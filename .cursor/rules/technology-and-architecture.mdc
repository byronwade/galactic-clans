---
alwaysApply: true
---

# Technology & Architecture

This document outlines the recommended technology stack and architectural design for **Galactic Clans**. The goal is to create a robust, scalable, and cross-platform game that can be easily deployed to desktop and web.

## Recommended Game Engine: Godot

For this project, we recommend using the **Godot Engine**. It is a free, open-source game engine that is lightweight, fast, and has excellent support for both 2D and 3D games. Most importantly, it allows us to export the game to a wide range of platforms, including **Windows, macOS, Linux, and web**, all from a single codebase.

### Why Godot?

-   **Cross-Platform**: Build once, deploy anywhere. This is a huge advantage for a project that needs to support both desktop and web.
-   **Performance**: Godot is known for its high performance, especially for 2D and low-poly 3D games.
-   **Flexibility**: Godot's node-based scene system is incredibly flexible and makes it easy to create complex game objects and scenes.
-   **Language Support**: Godot supports GDScript (a Python-like language), C#, and C++. This gives us the flexibility to choose the right tool for the job.

## Core Technologies

-   **Game Engine**: Godot Engine (v4.x)
-   **Language**: GDScript for gameplay logic and C# for performance-critical systems.
-   **Networking**: Godot's built-in high-level networking API for real-time multiplayer.
-   **Physics**: Godot's built-in 3D physics engine.
-   **Asset Management**: Git with Git-LFS for managing large binary assets.

## Architecture

We will follow a modular, scene-based architecture, which is a natural fit for Godot's design.

-   **Scene-Based Design**: Each major component of the game (e.g., Galaxy View, Planet View, a specific planet) will be its own scene. Scenes can be nested to create complex hierarchies.
-   **Node-Based Logic**: We will use Godot's node system to build our game objects. Each node in a scene has a specific function (e.g., a `MeshInstance3D` for a 3D model, a `Camera3D` for a camera).
-   **Signal System**: We will use Godot's signal system for communication between nodes and scenes. This is a powerful and flexible way to create loosely coupled systems.
-   **Autoloads (Singletons)**: For global systems like a `GameManager` or `NetworkManager`, we will use Godot's Autoload feature to create singletons that are accessible from anywhere in the game.

## Directory Structure

The project will be organized as follows:

```
/project
  /scenes
    /galaxy_view
      galaxy_view.tscn
      galaxy_view.gd
    /planet_view
      planet_view.tscn
      planet_view.gd
  /assets
    /models
    /textures
    /audio
  /scripts
    /systems
      game_manager.gd
      network_manager.gd
    /components
      idle_producer.gd
  /export
    /web
    /desktop
```
