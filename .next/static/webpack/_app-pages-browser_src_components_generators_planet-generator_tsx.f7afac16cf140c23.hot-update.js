"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_src_components_generators_planet-generator_tsx",{

/***/ "(app-pages-browser)/./src/shared/procgen/planet/planet-renderer.ts":
/*!******************************************************!*\
  !*** ./src/shared/procgen/planet/planet-renderer.ts ***!
  \******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PlanetRenderer: () => (/* binding */ PlanetRenderer)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _planet_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./planet-types */ \"(app-pages-browser)/./src/shared/procgen/planet/planet-types.ts\");\n/**\n * @file planet-renderer.ts\n * @description Enhanced planet renderer with comprehensive planet type support\n * @version 4.0.0\n * @author Galactic Clans Development Team\n *\n * @purpose Renders scientifically accurate planets using the comprehensive planet type\n * system with enhanced visual features and performance optimizations.\n */ \n\n// Default configuration\nconst DEFAULT_CONFIG = {\n    radius: 3.0,\n    seed: Date.now(),\n    starDistance: 1.0,\n    starType: \"G\",\n    detailLevel: 2,\n    featureDensity: 0.7,\n    colorVariation: 0.8,\n    enableLOD: true,\n    maxFeatures: 50,\n    renderDistance: 100,\n    enableAtmosphere: true,\n    enableRings: true,\n    enableMoons: true,\n    enableSpecialEffects: true,\n    enableAdvancedLighting: true,\n    ambientIntensity: 0.4,\n    sunIntensity: 1.5\n};\nclass PlanetRenderer {\n    /**\n\t * Render a planet with the specified configuration\n\t */ async renderPlanet() {\n        let config = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        if (this.isDisposed) {\n            throw new Error(\"PlanetRenderer has been disposed\");\n        }\n        const startTime = performance.now();\n        const finalConfig = {\n            ...DEFAULT_CONFIG,\n            ...config\n        };\n        try {\n            // Generate cache key\n            const cacheKey = this.generateCacheKey(finalConfig);\n            // Check cache first\n            const cachedMesh = this.renderCache.get(cacheKey);\n            if (cachedMesh && finalConfig.enableLOD) {\n                return this.createCachedResult(cachedMesh, finalConfig, startTime);\n            }\n            // Create new generator with seed\n            this.generator = new EnhancedPlanetGenerator(finalConfig.seed);\n            // Generate planet\n            const planetResult = this.generator.generatePlanet(finalConfig.planetClass, finalConfig.starDistance || 1.0, finalConfig.starType || \"G\");\n            // Apply render configuration overrides\n            this.applyRenderConfigOverrides(planetResult.config, finalConfig);\n            // Enhance the mesh with additional rendering features\n            await this.enhanceMeshForRendering(planetResult.mesh, planetResult.config, planetResult.planetType, finalConfig);\n            // Setup advanced lighting if enabled\n            if (finalConfig.enableAdvancedLighting) {\n                this.setupAdvancedLighting(planetResult.mesh, finalConfig);\n            }\n            // Cache the result\n            if (finalConfig.enableLOD) {\n                this.renderCache.set(cacheKey, planetResult.mesh.clone());\n                this.cleanupCache();\n            }\n            // Calculate render metadata\n            const metadata = this.calculateRenderMetadata(planetResult.mesh, startTime);\n            this.lastRenderTime = performance.now() - startTime;\n            return {\n                mesh: planetResult.mesh,\n                config: planetResult.config,\n                planetType: planetResult.planetType,\n                statistics: planetResult.statistics,\n                metadata\n            };\n        } catch (error) {\n            console.error(\"Planet rendering failed:\", error);\n            // Fallback to simple planet\n            return this.renderFallbackPlanet(finalConfig, startTime);\n        }\n    }\n    /**\n\t * Render a planet by specific type\n\t */ async renderPlanetByType(planetClass) {\n        let config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        return this.renderPlanet({\n            ...config,\n            planetClass\n        });\n    }\n    /**\n\t * Render multiple planets for a solar system\n\t */ async renderSolarSystemPlanets(planetCount) {\n        let starType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"G\";\n        const planets = [];\n        for(let i = 0; i < planetCount; i++){\n            const distance = 0.5 + i * 0.8; // AU from star\n            const config = {\n                starDistance: distance,\n                starType,\n                seed: Date.now() + i * 1000,\n                detailLevel: Math.max(1, 4 - i)\n            };\n            // Select appropriate planet type based on distance\n            config.planetClass = this.selectPlanetTypeByDistance(distance, starType);\n            const planet = await this.renderPlanet(config);\n            planets.push(planet);\n        }\n        return planets;\n    }\n    /**\n\t * Get all available planet types\n\t */ getAvailablePlanetTypes() {\n        return Array.from(_planet_types__WEBPACK_IMPORTED_MODULE_0__.PLANET_TYPES.keys());\n    }\n    /**\n\t * Get planet type information\n\t */ getPlanetTypeInfo(planetClass) {\n        return (0,_planet_types__WEBPACK_IMPORTED_MODULE_0__.getPlanetTypeByClass)(planetClass);\n    }\n    /**\n\t * Update planet quality based on performance\n\t */ updateQuality(qualityLevel) {\n        // Quality level 0-5, where 5 is highest quality\n        const quality = Math.max(0, Math.min(5, qualityLevel));\n        // Update default configuration based on quality\n        DEFAULT_CONFIG.detailLevel = Math.max(1, Math.floor(quality + 1));\n        DEFAULT_CONFIG.featureDensity = 0.3 + quality * 0.1;\n        DEFAULT_CONFIG.maxFeatures = 20 + quality * 10;\n        DEFAULT_CONFIG.enableSpecialEffects = quality >= 3;\n        DEFAULT_CONFIG.enableAdvancedLighting = quality >= 4;\n    }\n    /**\n\t * Dispose of resources\n\t */ dispose() {\n        if (this.isDisposed) return;\n        // Clear cache and dispose meshes\n        for (const mesh of this.renderCache.values()){\n            this.disposeMesh(mesh);\n        }\n        this.renderCache.clear();\n        this.isDisposed = true;\n    }\n    // Private Methods\n    generateCacheKey(config) {\n        const keyParts = [\n            config.planetClass || \"random\",\n            config.seed || 0,\n            config.radius || 3,\n            config.detailLevel || 2,\n            config.starDistance || 1,\n            config.featureDensity || 0.7\n        ];\n        return keyParts.join(\"|\");\n    }\n    createCachedResult(mesh, config, startTime) {\n        const clonedMesh = mesh.clone();\n        // Create minimal metadata for cached result\n        const metadata = {\n            renderTime: performance.now() - startTime,\n            polyCount: this.calculatePolyCount(clonedMesh),\n            textureCount: 1,\n            featureCount: clonedMesh.children.length,\n            memoryUsage: 0,\n            qualityLevel: \"cached\"\n        };\n        return {\n            mesh: clonedMesh,\n            config: {},\n            planetType: {},\n            statistics: {},\n            metadata\n        };\n    }\n    applyRenderConfigOverrides(planetConfig, renderConfig) {\n        if (renderConfig.radius !== undefined) {\n            planetConfig.radius = renderConfig.radius;\n        }\n        if (renderConfig.featureDensity !== undefined) {\n            planetConfig.featureDensity = renderConfig.featureDensity;\n        }\n        if (renderConfig.colorVariation !== undefined) {\n            planetConfig.colorVariation = renderConfig.colorVariation;\n        }\n        // Override features based on render config\n        if (renderConfig.enableAtmosphere !== undefined) {\n            planetConfig.features.clouds = renderConfig.enableAtmosphere;\n        }\n        if (renderConfig.enableRings !== undefined) {\n            planetConfig.features.rings = renderConfig.enableRings;\n        }\n        if (renderConfig.enableMoons !== undefined && !renderConfig.enableMoons) {\n            planetConfig.features.moons = 0;\n        }\n    }\n    async enhanceMeshForRendering(mesh, config, planetType, renderConfig) {\n        // Apply LOD if enabled\n        if (renderConfig.enableLOD) {\n            this.applyLOD(mesh, renderConfig.renderDistance || 100);\n        }\n        // Limit features if necessary\n        if (renderConfig.maxFeatures && mesh.children.length > renderConfig.maxFeatures) {\n            this.limitFeatures(mesh, renderConfig.maxFeatures);\n        }\n        // Add advanced visual effects\n        if (renderConfig.enableSpecialEffects) {\n            await this.addAdvancedEffects(mesh, config, planetType);\n        }\n        // Optimize for performance\n        this.optimizeMeshForPerformance(mesh);\n    }\n    applyLOD(mesh, renderDistance) {\n        mesh.children.forEach((child)=>{\n            if (child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh) {\n                // Create LOD versions\n                const lod = new three__WEBPACK_IMPORTED_MODULE_1__.LOD();\n                // High detail (close)\n                lod.addLevel(child, 0);\n                // Medium detail\n                const mediumGeometry = this.simplifyGeometry(child.geometry, 0.5);\n                const mediumMesh = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(mediumGeometry, child.material);\n                lod.addLevel(mediumMesh, renderDistance * 0.3);\n                // Low detail (far)\n                const lowGeometry = this.simplifyGeometry(child.geometry, 0.2);\n                const lowMesh = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(lowGeometry, child.material);\n                lod.addLevel(lowMesh, renderDistance * 0.7);\n                // Replace original mesh with LOD\n                const parent = child.parent;\n                if (parent) {\n                    parent.remove(child);\n                    parent.add(lod);\n                }\n            }\n        });\n    }\n    simplifyGeometry(geometry, factor) {\n        // Simple geometry simplification\n        const positions = geometry.attributes.position.array;\n        const simplified = new Float32Array(Math.floor(positions.length * factor));\n        for(let i = 0; i < simplified.length; i += 3){\n            const sourceIndex = Math.floor(i / factor) * 3;\n            simplified[i] = positions[sourceIndex];\n            simplified[i + 1] = positions[sourceIndex + 1];\n            simplified[i + 2] = positions[sourceIndex + 2];\n        }\n        const simplifiedGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry();\n        simplifiedGeometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_1__.BufferAttribute(simplified, 3));\n        simplifiedGeometry.computeVertexNormals();\n        return simplifiedGeometry;\n    }\n    limitFeatures(mesh, maxFeatures) {\n        while(mesh.children.length > maxFeatures){\n            const randomIndex = Math.floor(Math.random() * mesh.children.length);\n            const child = mesh.children[randomIndex];\n            mesh.remove(child);\n            this.disposeMesh(child);\n        }\n    }\n    async addAdvancedEffects(mesh, config, planetType) {\n        // Add particle effects for certain planet types\n        if (planetType.class === _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.LAVA_WORLD) {\n            this.addLavaParticles(mesh);\n        }\n        if (planetType.class === _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.GAS_GIANT) {\n            this.addAtmosphericStorms(mesh);\n        }\n        if (planetType.class === _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.ICE_GIANT) {\n            this.addIceShimmers(mesh);\n        }\n        // Add aurora effects for planets with magnetic fields\n        if (config.magneticField > 5) {\n            this.addAuroraEffect(mesh);\n        }\n    }\n    addLavaParticles(mesh) {\n        const particleCount = 100;\n        const particles = new three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry();\n        const positions = new Float32Array(particleCount * 3);\n        for(let i = 0; i < particleCount; i++){\n            positions[i * 3] = (Math.random() - 0.5) * 10;\n            positions[i * 3 + 1] = Math.random() * 5;\n            positions[i * 3 + 2] = (Math.random() - 0.5) * 10;\n        }\n        particles.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_1__.BufferAttribute(positions, 3));\n        const particleMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.PointsMaterial({\n            color: 0xff4500,\n            size: 0.1,\n            transparent: true,\n            opacity: 0.7\n        });\n        const particleSystem = new three__WEBPACK_IMPORTED_MODULE_1__.Points(particles, particleMaterial);\n        mesh.add(particleSystem);\n    }\n    addAtmosphericStorms(mesh) {\n        // Add storm spiral patterns\n        const stormGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.RingGeometry(2, 4, 8);\n        const stormMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0x4169e1,\n            transparent: true,\n            opacity: 0.3,\n            side: three__WEBPACK_IMPORTED_MODULE_1__.DoubleSide\n        });\n        for(let i = 0; i < 3; i++){\n            const storm = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(stormGeometry, stormMaterial);\n            storm.position.set((Math.random() - 0.5) * 8, (Math.random() - 0.5) * 8, (Math.random() - 0.5) * 8);\n            storm.rotation.x = Math.random() * Math.PI;\n            storm.rotation.y = Math.random() * Math.PI;\n            mesh.add(storm);\n        }\n    }\n    addIceShimmers(mesh) {\n        const shimmerGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(1, 16, 16);\n        const shimmerMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0x87ceeb,\n            transparent: true,\n            opacity: 0.2,\n            side: three__WEBPACK_IMPORTED_MODULE_1__.BackSide\n        });\n        const shimmer = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(shimmerGeometry, shimmerMaterial);\n        mesh.add(shimmer);\n    }\n    addAuroraEffect(mesh) {\n        const auroraGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.RingGeometry(3, 5, 32);\n        const auroraMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0x00ff7f,\n            transparent: true,\n            opacity: 0.4,\n            side: three__WEBPACK_IMPORTED_MODULE_1__.DoubleSide\n        });\n        const aurora = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(auroraGeometry, auroraMaterial);\n        aurora.rotation.x = Math.PI / 2;\n        mesh.add(aurora);\n    }\n    optimizeMeshForPerformance(mesh) {\n        mesh.traverse((child)=>{\n            if (child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh) {\n                // Enable frustum culling\n                child.frustumCulled = true;\n                // Merge geometries where possible\n                if (child.geometry instanceof three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry) {\n                    child.geometry.computeBoundingSphere();\n                    child.geometry.computeBoundingBox();\n                }\n                // Optimize materials\n                if (child.material instanceof three__WEBPACK_IMPORTED_MODULE_1__.Material) {\n                    child.material.precision = \"mediump\";\n                }\n            }\n        });\n    }\n    setupAdvancedLighting(mesh, config) {\n        // This would typically be handled by the scene, but we can add object-specific lighting\n        // Add ambient light for atmosphere\n        const ambientLight = new three__WEBPACK_IMPORTED_MODULE_1__.AmbientLight(0x404040, config.ambientIntensity || 0.4);\n        mesh.add(ambientLight);\n        // Add directional light for sun\n        const sunLight = new three__WEBPACK_IMPORTED_MODULE_1__.DirectionalLight(0xffffff, config.sunIntensity || 1.5);\n        sunLight.position.set(10, 10, 10);\n        sunLight.castShadow = true;\n        mesh.add(sunLight);\n        // Add subtle rim lighting\n        const rimLight = new three__WEBPACK_IMPORTED_MODULE_1__.DirectionalLight(0x87ceeb, 0.3);\n        rimLight.position.set(-10, 5, -10);\n        mesh.add(rimLight);\n    }\n    selectPlanetTypeByDistance(distance, starType) {\n        // Select planet type based on distance from star\n        if (distance < 0.5) {\n            return Math.random() < 0.7 ? _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.LAVA_WORLD : _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.IRON_WORLD;\n        } else if (distance < 1.5) {\n            return Math.random() < 0.6 ? _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.TERRESTRIAL : _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.SUPER_EARTH;\n        } else if (distance < 3.0) {\n            return Math.random() < 0.4 ? _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.OCEAN_WORLD : _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.TERRESTRIAL;\n        } else if (distance < 8.0) {\n            return Math.random() < 0.7 ? _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.GAS_GIANT : _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.ICE_GIANT;\n        } else {\n            return Math.random() < 0.8 ? _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.ICE_GIANT : _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.DWARF_PLANET;\n        }\n    }\n    renderFallbackPlanet(config, startTime) {\n        var _geometry_faces;\n        // Create a simple fallback planet\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_1__.IcosahedronGeometry(config.radius || 3, 1);\n        const material = new three__WEBPACK_IMPORTED_MODULE_1__.MeshPhongMaterial({\n            color: 0x888888\n        });\n        const mesh = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(geometry, material);\n        const group = new three__WEBPACK_IMPORTED_MODULE_1__.Group();\n        group.add(mesh);\n        const metadata = {\n            renderTime: performance.now() - startTime,\n            polyCount: ((_geometry_faces = geometry.faces) === null || _geometry_faces === void 0 ? void 0 : _geometry_faces.length) || 20,\n            textureCount: 0,\n            featureCount: 1,\n            memoryUsage: 0,\n            qualityLevel: \"fallback\"\n        };\n        return {\n            mesh: group,\n            config: {},\n            planetType: {},\n            statistics: {},\n            metadata\n        };\n    }\n    calculateRenderMetadata(mesh, startTime) {\n        let polyCount = 0;\n        let textureCount = 0;\n        let memoryUsage = 0;\n        mesh.traverse((child)=>{\n            if (child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh) {\n                if (child.geometry instanceof three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry) {\n                    const positions = child.geometry.attributes.position;\n                    if (positions) {\n                        polyCount += positions.count / 3;\n                    }\n                }\n                if (child.material instanceof three__WEBPACK_IMPORTED_MODULE_1__.Material) {\n                    textureCount++;\n                    // Estimate memory usage (very rough)\n                    memoryUsage += 1024; // 1KB per material estimate\n                }\n            }\n        });\n        return {\n            renderTime: performance.now() - startTime,\n            polyCount: Math.floor(polyCount),\n            textureCount,\n            featureCount: mesh.children.length,\n            memoryUsage,\n            qualityLevel: this.determineQualityLevel(polyCount, textureCount)\n        };\n    }\n    determineQualityLevel(polyCount, textureCount) {\n        if (polyCount > 10000) return \"ultra\";\n        if (polyCount > 5000) return \"high\";\n        if (polyCount > 2000) return \"medium\";\n        if (polyCount > 500) return \"low\";\n        return \"minimal\";\n    }\n    calculatePolyCount(mesh) {\n        let count = 0;\n        mesh.traverse((child)=>{\n            if (child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh && child.geometry instanceof three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry) {\n                const positions = child.geometry.attributes.position;\n                if (positions) {\n                    count += positions.count / 3;\n                }\n            }\n        });\n        return Math.floor(count);\n    }\n    disposeMesh(object) {\n        object.traverse((child)=>{\n            if (child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh) {\n                if (child.geometry) {\n                    child.geometry.dispose();\n                }\n                if (child.material) {\n                    if (Array.isArray(child.material)) {\n                        child.material.forEach((material)=>material.dispose());\n                    } else {\n                        child.material.dispose();\n                    }\n                }\n            }\n        });\n    }\n    cleanupCache() {\n        // Keep cache size reasonable\n        if (this.renderCache.size > 10) {\n            const firstKey = this.renderCache.keys().next().value;\n            const mesh = this.renderCache.get(firstKey);\n            if (mesh) {\n                this.disposeMesh(mesh);\n            }\n            this.renderCache.delete(firstKey);\n        }\n    }\n    // Public utility methods\n    /**\n\t * Get performance statistics\n\t */ getPerformanceStats() {\n        return {\n            lastRenderTime: this.lastRenderTime,\n            cacheSize: this.renderCache.size\n        };\n    }\n    /**\n\t * Clear render cache\n\t */ clearCache() {\n        for (const mesh of this.renderCache.values()){\n            this.disposeMesh(mesh);\n        }\n        this.renderCache.clear();\n    }\n    /**\n\t * Preload common planet types\n\t */ async preloadCommonTypes() {\n        const commonTypes = [\n            _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.TERRESTRIAL,\n            _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.GAS_GIANT,\n            _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.ICE_GIANT,\n            _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.OCEAN_WORLD\n        ];\n        const promises = commonTypes.map((type)=>this.renderPlanet({\n                planetClass: type,\n                detailLevel: 1,\n                enableSpecialEffects: false\n            }));\n        await Promise.all(promises);\n    }\n    constructor(){\n        this.isDisposed = false;\n        this.renderCache = new Map();\n        this.lastRenderTime = 0;\n        this.generator = new EnhancedPlanetGenerator();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/shared/procgen/planet/planet-renderer.ts\n"));

/***/ })

});