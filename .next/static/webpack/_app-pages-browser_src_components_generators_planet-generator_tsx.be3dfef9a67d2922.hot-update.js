"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_src_components_generators_planet-generator_tsx",{

/***/ "(app-pages-browser)/./src/shared/procgen/planet/planet-renderer.ts":
/*!******************************************************!*\
  !*** ./src/shared/procgen/planet/planet-renderer.ts ***!
  \******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PlanetRenderer: () => (/* binding */ PlanetRenderer)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _planet_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./planet-types */ \"(app-pages-browser)/./src/shared/procgen/planet/planet-types.ts\");\n/**\n * @file planet-renderer.ts\n * @description Enhanced planet renderer with comprehensive planet type support\n * @version 4.0.0\n * @author Galactic Clans Development Team\n *\n * @purpose Renders scientifically accurate planets using the comprehensive planet type\n * system with enhanced visual features and performance optimizations.\n */ \n\n// Default configuration\nconst DEFAULT_CONFIG = {\n    radius: 3.0,\n    seed: Date.now(),\n    starDistance: 1.0,\n    starType: \"G\",\n    detailLevel: 2,\n    featureDensity: 0.7,\n    colorVariation: 0.8,\n    enableLOD: true,\n    maxFeatures: 50,\n    renderDistance: 100,\n    enableAtmosphere: true,\n    enableRings: true,\n    enableMoons: true,\n    enableSpecialEffects: true,\n    enableAdvancedLighting: true,\n    ambientIntensity: 0.4,\n    sunIntensity: 1.5\n};\nclass PlanetRenderer {\n    /**\n\t * Render a planet with the specified configuration\n\t */ async renderPlanet() {\n        let config = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        if (this.isDisposed) {\n            throw new Error(\"PlanetRenderer has been disposed\");\n        }\n        const startTime = performance.now();\n        const finalConfig = {\n            ...DEFAULT_CONFIG,\n            ...config\n        };\n        try {\n            // Generate cache key\n            const cacheKey = this.generateCacheKey(finalConfig);\n            // Check cache first\n            const cachedMesh = this.renderCache.get(cacheKey);\n            if (cachedMesh && finalConfig.enableLOD) {\n                return this.createCachedResult(cachedMesh, finalConfig, startTime);\n            }\n            // Create new generator with seed\n            this.generator = new EnhancedPlanetGenerator(finalConfig.seed);\n            // Generate planet\n            const planetResult = this.generator.generatePlanet(finalConfig.planetClass, finalConfig.starDistance || 1.0, finalConfig.starType || \"G\");\n            // Apply render configuration overrides\n            this.applyRenderConfigOverrides(planetResult.config, finalConfig);\n            // Enhance the mesh with additional rendering features\n            await this.enhanceMeshForRendering(planetResult.mesh, planetResult.config, planetResult.planetType, finalConfig);\n            // Setup advanced lighting if enabled\n            if (finalConfig.enableAdvancedLighting) {\n                this.setupAdvancedLighting(planetResult.mesh, finalConfig);\n            }\n            // Cache the result\n            if (finalConfig.enableLOD) {\n                this.renderCache.set(cacheKey, planetResult.mesh.clone());\n                this.cleanupCache();\n            }\n            // Calculate render metadata\n            const metadata = this.calculateRenderMetadata(planetResult.mesh, startTime);\n            this.lastRenderTime = performance.now() - startTime;\n            return {\n                mesh: planetResult.mesh,\n                config: planetResult.config,\n                planetType: planetResult.planetType,\n                statistics: planetResult.statistics,\n                metadata\n            };\n        } catch (error) {\n            console.error(\"Planet rendering failed:\", error);\n            // Fallback to simple planet\n            return this.renderFallbackPlanet(finalConfig, startTime);\n        }\n    }\n    /**\n\t * Render a planet by specific type\n\t */ async renderPlanetByType(planetClass) {\n        let config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        return this.renderPlanet({\n            ...config,\n            planetClass\n        });\n    }\n    /**\n\t * Render multiple planets for a solar system\n\t */ async renderSolarSystemPlanets(planetCount) {\n        let starType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"G\";\n        const planets = [];\n        for(let i = 0; i < planetCount; i++){\n            const distance = 0.5 + i * 0.8; // AU from star\n            const config = {\n                starDistance: distance,\n                starType,\n                seed: Date.now() + i * 1000,\n                detailLevel: Math.max(1, 4 - i)\n            };\n            // Select appropriate planet type based on distance\n            config.planetClass = this.selectPlanetTypeByDistance(distance, starType);\n            const planet = await this.renderPlanet(config);\n            planets.push(planet);\n        }\n        return planets;\n    }\n    /**\n\t * Get all available planet types\n\t */ getAvailablePlanetTypes() {\n        return Array.from(_planet_types__WEBPACK_IMPORTED_MODULE_0__.PLANET_TYPES.keys());\n    }\n    /**\n\t * Get planet type information\n\t */ getPlanetTypeInfo(planetClass) {\n        return (0,_planet_types__WEBPACK_IMPORTED_MODULE_0__.getPlanetTypeByClass)(planetClass);\n    }\n    /**\n\t * Update planet quality based on performance\n\t */ updateQuality(qualityLevel) {\n        // Quality level 0-5, where 5 is highest quality\n        const quality = Math.max(0, Math.min(5, qualityLevel));\n        // Update default configuration based on quality\n        DEFAULT_CONFIG.detailLevel = Math.max(1, Math.floor(quality + 1));\n        DEFAULT_CONFIG.featureDensity = 0.3 + quality * 0.1;\n        DEFAULT_CONFIG.maxFeatures = 20 + quality * 10;\n        DEFAULT_CONFIG.enableSpecialEffects = quality >= 3;\n        DEFAULT_CONFIG.enableAdvancedLighting = quality >= 4;\n    }\n    /**\n\t * Dispose of resources\n\t */ dispose() {\n        if (this.isDisposed) return;\n        // Clear cache and dispose meshes\n        for (const mesh of this.renderCache.values()){\n            this.disposeMesh(mesh);\n        }\n        this.renderCache.clear();\n        this.isDisposed = true;\n    }\n    // Private Methods\n    generateCacheKey(config) {\n        const keyParts = [\n            config.planetClass || \"random\",\n            config.seed || 0,\n            config.radius || 3,\n            config.detailLevel || 2,\n            config.starDistance || 1,\n            config.featureDensity || 0.7\n        ];\n        return keyParts.join(\"|\");\n    }\n    createCachedResult(mesh, config, startTime) {\n        const clonedMesh = mesh.clone();\n        // Create minimal metadata for cached result\n        const metadata = {\n            renderTime: performance.now() - startTime,\n            polyCount: this.calculatePolyCount(clonedMesh),\n            textureCount: 1,\n            featureCount: clonedMesh.children.length,\n            memoryUsage: 0,\n            qualityLevel: \"cached\"\n        };\n        return {\n            mesh: clonedMesh,\n            config: {},\n            planetType: {},\n            statistics: {},\n            metadata\n        };\n    }\n    applyRenderConfigOverrides(planetConfig, renderConfig) {\n        if (renderConfig.radius !== undefined) {\n            planetConfig.radius = renderConfig.radius;\n        }\n        if (renderConfig.featureDensity !== undefined) {\n            planetConfig.featureDensity = renderConfig.featureDensity;\n        }\n        if (renderConfig.colorVariation !== undefined) {\n            planetConfig.colorVariation = renderConfig.colorVariation;\n        }\n        // Override features based on render config\n        if (renderConfig.enableAtmosphere !== undefined) {\n            planetConfig.features.clouds = renderConfig.enableAtmosphere;\n        }\n        if (renderConfig.enableRings !== undefined) {\n            planetConfig.features.rings = renderConfig.enableRings;\n        }\n        if (renderConfig.enableMoons !== undefined && !renderConfig.enableMoons) {\n            planetConfig.features.moons = 0;\n        }\n    }\n    async enhanceMeshForRendering(mesh, config, planetType, renderConfig) {\n        // Apply LOD if enabled\n        if (renderConfig.enableLOD) {\n            this.applyLOD(mesh, renderConfig.renderDistance || 100);\n        }\n        // Limit features if necessary\n        if (renderConfig.maxFeatures && mesh.children.length > renderConfig.maxFeatures) {\n            this.limitFeatures(mesh, renderConfig.maxFeatures);\n        }\n        // Add advanced visual effects\n        if (renderConfig.enableSpecialEffects) {\n            await this.addAdvancedEffects(mesh, config, planetType);\n        }\n        // Optimize for performance\n        this.optimizeMeshForPerformance(mesh);\n    }\n    applyLOD(mesh, renderDistance) {\n        mesh.children.forEach((child)=>{\n            if (child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh) {\n                // Create LOD versions\n                const lod = new three__WEBPACK_IMPORTED_MODULE_1__.LOD();\n                // High detail (close)\n                lod.addLevel(child, 0);\n                // Medium detail\n                const mediumGeometry = this.simplifyGeometry(child.geometry, 0.5);\n                const mediumMesh = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(mediumGeometry, child.material);\n                lod.addLevel(mediumMesh, renderDistance * 0.3);\n                // Low detail (far)\n                const lowGeometry = this.simplifyGeometry(child.geometry, 0.2);\n                const lowMesh = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(lowGeometry, child.material);\n                lod.addLevel(lowMesh, renderDistance * 0.7);\n                // Replace original mesh with LOD\n                const parent = child.parent;\n                if (parent) {\n                    parent.remove(child);\n                    parent.add(lod);\n                }\n            }\n        });\n    }\n    simplifyGeometry(geometry, factor) {\n        // Simple geometry simplification\n        const positions = geometry.attributes.position.array;\n        const simplified = new Float32Array(Math.floor(positions.length * factor));\n        for(let i = 0; i < simplified.length; i += 3){\n            const sourceIndex = Math.floor(i / factor) * 3;\n            simplified[i] = positions[sourceIndex];\n            simplified[i + 1] = positions[sourceIndex + 1];\n            simplified[i + 2] = positions[sourceIndex + 2];\n        }\n        const simplifiedGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry();\n        simplifiedGeometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_1__.BufferAttribute(simplified, 3));\n        simplifiedGeometry.computeVertexNormals();\n        return simplifiedGeometry;\n    }\n    limitFeatures(mesh, maxFeatures) {\n        while(mesh.children.length > maxFeatures){\n            const randomIndex = Math.floor(Math.random() * mesh.children.length);\n            const child = mesh.children[randomIndex];\n            mesh.remove(child);\n            this.disposeMesh(child);\n        }\n    }\n    async addAdvancedEffects(mesh, config, planetType) {\n        // Add particle effects for certain planet types\n        if (planetType.class === _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.LAVA_WORLD) {\n            this.addLavaParticles(mesh);\n        }\n        if (planetType.class === _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.GAS_GIANT) {\n            this.addAtmosphericStorms(mesh);\n        }\n        if (planetType.class === _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.ICE_GIANT) {\n            this.addIceShimmers(mesh);\n        }\n        // Add aurora effects for planets with magnetic fields\n        if (config.magneticField > 5) {\n            this.addAuroraEffect(mesh);\n        }\n    }\n    addLavaParticles(mesh) {\n        const particleCount = 100;\n        const particles = new three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry();\n        const positions = new Float32Array(particleCount * 3);\n        for(let i = 0; i < particleCount; i++){\n            positions[i * 3] = (Math.random() - 0.5) * 10;\n            positions[i * 3 + 1] = Math.random() * 5;\n            positions[i * 3 + 2] = (Math.random() - 0.5) * 10;\n        }\n        particles.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_1__.BufferAttribute(positions, 3));\n        const particleMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.PointsMaterial({\n            color: 0xff4500,\n            size: 0.1,\n            transparent: true,\n            opacity: 0.7\n        });\n        const particleSystem = new three__WEBPACK_IMPORTED_MODULE_1__.Points(particles, particleMaterial);\n        mesh.add(particleSystem);\n    }\n    addAtmosphericStorms(mesh) {\n        // Add storm spiral patterns\n        const stormGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.RingGeometry(2, 4, 8);\n        const stormMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0x4169e1,\n            transparent: true,\n            opacity: 0.3,\n            side: three__WEBPACK_IMPORTED_MODULE_1__.DoubleSide\n        });\n        for(let i = 0; i < 3; i++){\n            const storm = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(stormGeometry, stormMaterial);\n            storm.position.set((Math.random() - 0.5) * 8, (Math.random() - 0.5) * 8, (Math.random() - 0.5) * 8);\n            storm.rotation.x = Math.random() * Math.PI;\n            storm.rotation.y = Math.random() * Math.PI;\n            mesh.add(storm);\n        }\n    }\n    addIceShimmers(mesh) {\n        const shimmerGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(1, 16, 16);\n        const shimmerMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0x87ceeb,\n            transparent: true,\n            opacity: 0.2,\n            side: three__WEBPACK_IMPORTED_MODULE_1__.BackSide\n        });\n        const shimmer = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(shimmerGeometry, shimmerMaterial);\n        mesh.add(shimmer);\n    }\n    addAuroraEffect(mesh) {\n        const auroraGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.RingGeometry(3, 5, 32);\n        const auroraMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0x00ff7f,\n            transparent: true,\n            opacity: 0.4,\n            side: three__WEBPACK_IMPORTED_MODULE_1__.DoubleSide\n        });\n        const aurora = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(auroraGeometry, auroraMaterial);\n        aurora.rotation.x = Math.PI / 2;\n        mesh.add(aurora);\n    }\n    optimizeMeshForPerformance(mesh) {\n        mesh.traverse((child)=>{\n            if (child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh) {\n                // Enable frustum culling\n                child.frustumCulled = true;\n                // Merge geometries where possible\n                if (child.geometry instanceof three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry) {\n                    child.geometry.computeBoundingSphere();\n                    child.geometry.computeBoundingBox();\n                }\n                // Optimize materials\n                if (child.material instanceof three__WEBPACK_IMPORTED_MODULE_1__.Material) {\n                    child.material.precision = \"mediump\";\n                }\n            }\n        });\n    }\n    setupAdvancedLighting(mesh, config) {\n        // This would typically be handled by the scene, but we can add object-specific lighting\n        // Add ambient light for atmosphere\n        const ambientLight = new three__WEBPACK_IMPORTED_MODULE_1__.AmbientLight(0x404040, config.ambientIntensity || 0.4);\n        mesh.add(ambientLight);\n        // Add directional light for sun\n        const sunLight = new three__WEBPACK_IMPORTED_MODULE_1__.DirectionalLight(0xffffff, config.sunIntensity || 1.5);\n        sunLight.position.set(10, 10, 10);\n        sunLight.castShadow = true;\n        mesh.add(sunLight);\n        // Add subtle rim lighting\n        const rimLight = new three__WEBPACK_IMPORTED_MODULE_1__.DirectionalLight(0x87ceeb, 0.3);\n        rimLight.position.set(-10, 5, -10);\n        mesh.add(rimLight);\n    }\n    selectPlanetTypeByDistance(distance, starType) {\n        // Select planet type based on distance from star\n        if (distance < 0.5) {\n            return Math.random() < 0.7 ? _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.LAVA_WORLD : _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.IRON_WORLD;\n        } else if (distance < 1.5) {\n            return Math.random() < 0.6 ? _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.TERRESTRIAL : _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.SUPER_EARTH;\n        } else if (distance < 3.0) {\n            return Math.random() < 0.4 ? _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.OCEAN_WORLD : _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.TERRESTRIAL;\n        } else if (distance < 8.0) {\n            return Math.random() < 0.7 ? _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.GAS_GIANT : _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.ICE_GIANT;\n        } else {\n            return Math.random() < 0.8 ? _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.ICE_GIANT : _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.DWARF_PLANET;\n        }\n    }\n    renderFallbackPlanet(config, startTime) {\n        var _geometry_faces;\n        // Create a simple fallback planet\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_1__.IcosahedronGeometry(config.radius || 3, 1);\n        const material = new three__WEBPACK_IMPORTED_MODULE_1__.MeshPhongMaterial({\n            color: 0x888888\n        });\n        const mesh = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(geometry, material);\n        const group = new three__WEBPACK_IMPORTED_MODULE_1__.Group();\n        group.add(mesh);\n        const metadata = {\n            renderTime: performance.now() - startTime,\n            polyCount: ((_geometry_faces = geometry.faces) === null || _geometry_faces === void 0 ? void 0 : _geometry_faces.length) || 20,\n            textureCount: 0,\n            featureCount: 1,\n            memoryUsage: 0,\n            qualityLevel: \"fallback\"\n        };\n        return {\n            mesh: group,\n            config: {},\n            planetType: {},\n            statistics: {},\n            metadata\n        };\n    }\n    calculateRenderMetadata(mesh, startTime) {\n        let polyCount = 0;\n        let textureCount = 0;\n        let memoryUsage = 0;\n        mesh.traverse((child)=>{\n            if (child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh) {\n                if (child.geometry instanceof three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry) {\n                    const positions = child.geometry.attributes.position;\n                    if (positions) {\n                        polyCount += positions.count / 3;\n                    }\n                }\n                if (child.material instanceof three__WEBPACK_IMPORTED_MODULE_1__.Material) {\n                    textureCount++;\n                    // Estimate memory usage (very rough)\n                    memoryUsage += 1024; // 1KB per material estimate\n                }\n            }\n        });\n        return {\n            renderTime: performance.now() - startTime,\n            polyCount: Math.floor(polyCount),\n            textureCount,\n            featureCount: mesh.children.length,\n            memoryUsage,\n            qualityLevel: this.determineQualityLevel(polyCount, textureCount)\n        };\n    }\n    determineQualityLevel(polyCount, textureCount) {\n        if (polyCount > 10000) return \"ultra\";\n        if (polyCount > 5000) return \"high\";\n        if (polyCount > 2000) return \"medium\";\n        if (polyCount > 500) return \"low\";\n        return \"minimal\";\n    }\n    calculatePolyCount(mesh) {\n        let count = 0;\n        mesh.traverse((child)=>{\n            if (child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh && child.geometry instanceof three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry) {\n                const positions = child.geometry.attributes.position;\n                if (positions) {\n                    count += positions.count / 3;\n                }\n            }\n        });\n        return Math.floor(count);\n    }\n    disposeMesh(object) {\n        object.traverse((child)=>{\n            if (child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh) {\n                if (child.geometry) {\n                    child.geometry.dispose();\n                }\n                if (child.material) {\n                    if (Array.isArray(child.material)) {\n                        child.material.forEach((material)=>material.dispose());\n                    } else {\n                        child.material.dispose();\n                    }\n                }\n            }\n        });\n    }\n    cleanupCache() {\n        // Keep cache size reasonable\n        if (this.renderCache.size > 10) {\n            const firstKey = this.renderCache.keys().next().value;\n            const mesh = this.renderCache.get(firstKey);\n            if (mesh) {\n                this.disposeMesh(mesh);\n            }\n            this.renderCache.delete(firstKey);\n        }\n    }\n    // Public utility methods\n    /**\n\t * Get performance statistics\n\t */ getPerformanceStats() {\n        return {\n            lastRenderTime: this.lastRenderTime,\n            cacheSize: this.renderCache.size\n        };\n    }\n    /**\n\t * Clear render cache\n\t */ clearCache() {\n        for (const mesh of this.renderCache.values()){\n            this.disposeMesh(mesh);\n        }\n        this.renderCache.clear();\n    }\n    /**\n\t * Preload common planet types\n\t */ async preloadCommonTypes() {\n        const commonTypes = [\n            _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.TERRESTRIAL,\n            _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.GAS_GIANT,\n            _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.ICE_GIANT,\n            _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.OCEAN_WORLD\n        ];\n        const promises = commonTypes.map((type)=>this.renderPlanet({\n                planetClass: type,\n                detailLevel: 1,\n                enableSpecialEffects: false\n            }));\n        await Promise.all(promises);\n    }\n    constructor(){\n        this.isDisposed = false;\n        this.renderCache = new Map();\n        this.lastRenderTime = 0;\n        this.generator = new EnhancedPlanetGenerator();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zaGFyZWQvcHJvY2dlbi9wbGFuZXQvcGxhbmV0LXJlbmRlcmVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Ozs7OztDQVFDLEdBRThCO0FBQ3dHO0FBbUN2SSx3QkFBd0I7QUFDeEIsTUFBTUksaUJBQXFDO0lBQzFDQyxRQUFRO0lBQ1JDLE1BQU1DLEtBQUtDLEdBQUc7SUFDZEMsY0FBYztJQUNkQyxVQUFVO0lBQ1ZDLGFBQWE7SUFDYkMsZ0JBQWdCO0lBQ2hCQyxnQkFBZ0I7SUFDaEJDLFdBQVc7SUFDWEMsYUFBYTtJQUNiQyxnQkFBZ0I7SUFDaEJDLGtCQUFrQjtJQUNsQkMsYUFBYTtJQUNiQyxhQUFhO0lBQ2JDLHNCQUFzQjtJQUN0QkMsd0JBQXdCO0lBQ3hCQyxrQkFBa0I7SUFDbEJDLGNBQWM7QUFDZjtBQXFCTyxNQUFNQztJQVVaOztFQUVDLEdBQ0QsTUFBYUMsZUFBMkU7WUFBOURDLFNBQUFBLGlFQUE2QixDQUFDO1FBQ3ZELElBQUksSUFBSSxDQUFDQyxVQUFVLEVBQUU7WUFDcEIsTUFBTSxJQUFJQyxNQUFNO1FBQ2pCO1FBRUEsTUFBTUMsWUFBWUMsWUFBWXRCLEdBQUc7UUFDakMsTUFBTXVCLGNBQWM7WUFBRSxHQUFHM0IsY0FBYztZQUFFLEdBQUdzQixNQUFNO1FBQUM7UUFFbkQsSUFBSTtZQUNILHFCQUFxQjtZQUNyQixNQUFNTSxXQUFXLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNGO1lBRXZDLG9CQUFvQjtZQUNwQixNQUFNRyxhQUFhLElBQUksQ0FBQ0MsV0FBVyxDQUFDQyxHQUFHLENBQUNKO1lBQ3hDLElBQUlFLGNBQWNILFlBQVlqQixTQUFTLEVBQUU7Z0JBQ3hDLE9BQU8sSUFBSSxDQUFDdUIsa0JBQWtCLENBQUNILFlBQVlILGFBQWFGO1lBQ3pEO1lBRUEsaUNBQWlDO1lBQ2pDLElBQUksQ0FBQ1MsU0FBUyxHQUFHLElBQUlDLHdCQUF3QlIsWUFBWXpCLElBQUk7WUFFN0Qsa0JBQWtC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LENBQUM7Z0JBQ2pCaUIsYUFBYXlLO2dCQUNieE0sYUFBYTtnQkFDYlMsc0JBQXNCO1lBQ3ZCO1FBR0QsTUFBTWdNLFFBQVFDLEdBQUcsQ0FBQ0o7SUFDbkI7SUF4akJBLGFBQWM7YUFKTnRMLGFBQXNCO2FBQ3RCUSxjQUF3QyxJQUFJbUw7YUFDNUNqSyxpQkFBeUI7UUFHaEMsSUFBSSxDQUFDZixTQUFTLEdBQUcsSUFBSUM7SUFDdEI7QUF1akJEIiwic291cmNlcyI6WyIvVXNlcnMvYnlyb253YWRlL2Nvc21pYy9zcmMvc2hhcmVkL3Byb2NnZW4vcGxhbmV0L3BsYW5ldC1yZW5kZXJlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIHBsYW5ldC1yZW5kZXJlci50c1xuICogQGRlc2NyaXB0aW9uIEVuaGFuY2VkIHBsYW5ldCByZW5kZXJlciB3aXRoIGNvbXByZWhlbnNpdmUgcGxhbmV0IHR5cGUgc3VwcG9ydFxuICogQHZlcnNpb24gNC4wLjBcbiAqIEBhdXRob3IgR2FsYWN0aWMgQ2xhbnMgRGV2ZWxvcG1lbnQgVGVhbVxuICpcbiAqIEBwdXJwb3NlIFJlbmRlcnMgc2NpZW50aWZpY2FsbHkgYWNjdXJhdGUgcGxhbmV0cyB1c2luZyB0aGUgY29tcHJlaGVuc2l2ZSBwbGFuZXQgdHlwZVxuICogc3lzdGVtIHdpdGggZW5oYW5jZWQgdmlzdWFsIGZlYXR1cmVzIGFuZCBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25zLlxuICovXG5cbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgUGxhbmV0Q2xhc3MsIFBsYW5ldFR5cGVEZWZpbml0aW9uLCBCaW9tZVR5cGUsIGdldFBsYW5ldFR5cGVCeUNsYXNzLCBnZXRSYW5kb21QbGFuZXRUeXBlLCBQTEFORVRfVFlQRVMgfSBmcm9tIFwiLi9wbGFuZXQtdHlwZXNcIjtcblxuLy8gUGxhbmV0IFJlbmRlcmluZyBDb25maWd1cmF0aW9uXG5leHBvcnQgaW50ZXJmYWNlIFBsYW5ldFJlbmRlckNvbmZpZyB7XG5cdC8vIEJhc2ljIFByb3BlcnRpZXNcblx0cGxhbmV0Q2xhc3M/OiBQbGFuZXRDbGFzcztcblx0cmFkaXVzPzogbnVtYmVyO1xuXHRzZWVkPzogbnVtYmVyO1xuXG5cdC8vIE9yYml0YWwgUHJvcGVydGllc1xuXHRzdGFyRGlzdGFuY2U/OiBudW1iZXI7XG5cdHN0YXJUeXBlPzogc3RyaW5nO1xuXG5cdC8vIFZpc3VhbCBRdWFsaXR5XG5cdGRldGFpbExldmVsPzogbnVtYmVyO1xuXHRmZWF0dXJlRGVuc2l0eT86IG51bWJlcjtcblx0Y29sb3JWYXJpYXRpb24/OiBudW1iZXI7XG5cblx0Ly8gUGVyZm9ybWFuY2UgT3B0aW9uc1xuXHRlbmFibGVMT0Q/OiBib29sZWFuO1xuXHRtYXhGZWF0dXJlcz86IG51bWJlcjtcblx0cmVuZGVyRGlzdGFuY2U/OiBudW1iZXI7XG5cblx0Ly8gU3BlY2lhbCBGZWF0dXJlc1xuXHRlbmFibGVBdG1vc3BoZXJlPzogYm9vbGVhbjtcblx0ZW5hYmxlUmluZ3M/OiBib29sZWFuO1xuXHRlbmFibGVNb29ucz86IGJvb2xlYW47XG5cdGVuYWJsZVNwZWNpYWxFZmZlY3RzPzogYm9vbGVhbjtcblxuXHQvLyBMaWdodGluZ1xuXHRlbmFibGVBZHZhbmNlZExpZ2h0aW5nPzogYm9vbGVhbjtcblx0YW1iaWVudEludGVuc2l0eT86IG51bWJlcjtcblx0c3VuSW50ZW5zaXR5PzogbnVtYmVyO1xufVxuXG4vLyBEZWZhdWx0IGNvbmZpZ3VyYXRpb25cbmNvbnN0IERFRkFVTFRfQ09ORklHOiBQbGFuZXRSZW5kZXJDb25maWcgPSB7XG5cdHJhZGl1czogMy4wLFxuXHRzZWVkOiBEYXRlLm5vdygpLFxuXHRzdGFyRGlzdGFuY2U6IDEuMCxcblx0c3RhclR5cGU6IFwiR1wiLFxuXHRkZXRhaWxMZXZlbDogMixcblx0ZmVhdHVyZURlbnNpdHk6IDAuNyxcblx0Y29sb3JWYXJpYXRpb246IDAuOCxcblx0ZW5hYmxlTE9EOiB0cnVlLFxuXHRtYXhGZWF0dXJlczogNTAsXG5cdHJlbmRlckRpc3RhbmNlOiAxMDAsXG5cdGVuYWJsZUF0bW9zcGhlcmU6IHRydWUsXG5cdGVuYWJsZVJpbmdzOiB0cnVlLFxuXHRlbmFibGVNb29uczogdHJ1ZSxcblx0ZW5hYmxlU3BlY2lhbEVmZmVjdHM6IHRydWUsXG5cdGVuYWJsZUFkdmFuY2VkTGlnaHRpbmc6IHRydWUsXG5cdGFtYmllbnRJbnRlbnNpdHk6IDAuNCxcblx0c3VuSW50ZW5zaXR5OiAxLjUsXG59O1xuXG4vLyBQbGFuZXQgUmVuZGVyIFJlc3VsdFxuZXhwb3J0IGludGVyZmFjZSBQbGFuZXRSZW5kZXJSZXN1bHQge1xuXHRtZXNoOiBUSFJFRS5Hcm91cDtcblx0Y29uZmlnOiBFbmhhbmNlZFBsYW5ldENvbmZpZztcblx0cGxhbmV0VHlwZTogUGxhbmV0VHlwZURlZmluaXRpb247XG5cdHN0YXRpc3RpY3M6IGFueTtcblx0bWV0YWRhdGE6IFBsYW5ldFJlbmRlck1ldGFkYXRhO1xufVxuXG4vLyBSZW5kZXIgTWV0YWRhdGFcbmV4cG9ydCBpbnRlcmZhY2UgUGxhbmV0UmVuZGVyTWV0YWRhdGEge1xuXHRyZW5kZXJUaW1lOiBudW1iZXI7XG5cdHBvbHlDb3VudDogbnVtYmVyO1xuXHR0ZXh0dXJlQ291bnQ6IG51bWJlcjtcblx0ZmVhdHVyZUNvdW50OiBudW1iZXI7XG5cdG1lbW9yeVVzYWdlOiBudW1iZXI7XG5cdHF1YWxpdHlMZXZlbDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgUGxhbmV0UmVuZGVyZXIge1xuXHRwcml2YXRlIGdlbmVyYXRvcjogRW5oYW5jZWRQbGFuZXRHZW5lcmF0b3I7XG5cdHByaXZhdGUgaXNEaXNwb3NlZDogYm9vbGVhbiA9IGZhbHNlO1xuXHRwcml2YXRlIHJlbmRlckNhY2hlOiBNYXA8c3RyaW5nLCBUSFJFRS5Hcm91cD4gPSBuZXcgTWFwKCk7XG5cdHByaXZhdGUgbGFzdFJlbmRlclRpbWU6IG51bWJlciA9IDA7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5nZW5lcmF0b3IgPSBuZXcgRW5oYW5jZWRQbGFuZXRHZW5lcmF0b3IoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW5kZXIgYSBwbGFuZXQgd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZ3VyYXRpb25cblx0ICovXG5cdHB1YmxpYyBhc3luYyByZW5kZXJQbGFuZXQoY29uZmlnOiBQbGFuZXRSZW5kZXJDb25maWcgPSB7fSk6IFByb21pc2U8UGxhbmV0UmVuZGVyUmVzdWx0PiB7XG5cdFx0aWYgKHRoaXMuaXNEaXNwb3NlZCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiUGxhbmV0UmVuZGVyZXIgaGFzIGJlZW4gZGlzcG9zZWRcIik7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cdFx0Y29uc3QgZmluYWxDb25maWcgPSB7IC4uLkRFRkFVTFRfQ09ORklHLCAuLi5jb25maWcgfTtcblxuXHRcdHRyeSB7XG5cdFx0XHQvLyBHZW5lcmF0ZSBjYWNoZSBrZXlcblx0XHRcdGNvbnN0IGNhY2hlS2V5ID0gdGhpcy5nZW5lcmF0ZUNhY2hlS2V5KGZpbmFsQ29uZmlnKTtcblxuXHRcdFx0Ly8gQ2hlY2sgY2FjaGUgZmlyc3Rcblx0XHRcdGNvbnN0IGNhY2hlZE1lc2ggPSB0aGlzLnJlbmRlckNhY2hlLmdldChjYWNoZUtleSk7XG5cdFx0XHRpZiAoY2FjaGVkTWVzaCAmJiBmaW5hbENvbmZpZy5lbmFibGVMT0QpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY3JlYXRlQ2FjaGVkUmVzdWx0KGNhY2hlZE1lc2gsIGZpbmFsQ29uZmlnLCBzdGFydFRpbWUpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDcmVhdGUgbmV3IGdlbmVyYXRvciB3aXRoIHNlZWRcblx0XHRcdHRoaXMuZ2VuZXJhdG9yID0gbmV3IEVuaGFuY2VkUGxhbmV0R2VuZXJhdG9yKGZpbmFsQ29uZmlnLnNlZWQpO1xuXG5cdFx0XHQvLyBHZW5lcmF0ZSBwbGFuZXRcblx0XHRcdGNvbnN0IHBsYW5ldFJlc3VsdCA9IHRoaXMuZ2VuZXJhdG9yLmdlbmVyYXRlUGxhbmV0KGZpbmFsQ29uZmlnLnBsYW5ldENsYXNzLCBmaW5hbENvbmZpZy5zdGFyRGlzdGFuY2UgfHwgMS4wLCBmaW5hbENvbmZpZy5zdGFyVHlwZSB8fCBcIkdcIik7XG5cblx0XHRcdC8vIEFwcGx5IHJlbmRlciBjb25maWd1cmF0aW9uIG92ZXJyaWRlc1xuXHRcdFx0dGhpcy5hcHBseVJlbmRlckNvbmZpZ092ZXJyaWRlcyhwbGFuZXRSZXN1bHQuY29uZmlnLCBmaW5hbENvbmZpZyk7XG5cblx0XHRcdC8vIEVuaGFuY2UgdGhlIG1lc2ggd2l0aCBhZGRpdGlvbmFsIHJlbmRlcmluZyBmZWF0dXJlc1xuXHRcdFx0YXdhaXQgdGhpcy5lbmhhbmNlTWVzaEZvclJlbmRlcmluZyhwbGFuZXRSZXN1bHQubWVzaCwgcGxhbmV0UmVzdWx0LmNvbmZpZywgcGxhbmV0UmVzdWx0LnBsYW5ldFR5cGUsIGZpbmFsQ29uZmlnKTtcblxuXHRcdFx0Ly8gU2V0dXAgYWR2YW5jZWQgbGlnaHRpbmcgaWYgZW5hYmxlZFxuXHRcdFx0aWYgKGZpbmFsQ29uZmlnLmVuYWJsZUFkdmFuY2VkTGlnaHRpbmcpIHtcblx0XHRcdFx0dGhpcy5zZXR1cEFkdmFuY2VkTGlnaHRpbmcocGxhbmV0UmVzdWx0Lm1lc2gsIGZpbmFsQ29uZmlnKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHJlc3VsdFxuXHRcdFx0aWYgKGZpbmFsQ29uZmlnLmVuYWJsZUxPRCkge1xuXHRcdFx0XHR0aGlzLnJlbmRlckNhY2hlLnNldChjYWNoZUtleSwgcGxhbmV0UmVzdWx0Lm1lc2guY2xvbmUoKSk7XG5cdFx0XHRcdHRoaXMuY2xlYW51cENhY2hlKCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGN1bGF0ZSByZW5kZXIgbWV0YWRhdGFcblx0XHRcdGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jYWxjdWxhdGVSZW5kZXJNZXRhZGF0YShwbGFuZXRSZXN1bHQubWVzaCwgc3RhcnRUaW1lKTtcblxuXHRcdFx0dGhpcy5sYXN0UmVuZGVyVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnRUaW1lO1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRtZXNoOiBwbGFuZXRSZXN1bHQubWVzaCxcblx0XHRcdFx0Y29uZmlnOiBwbGFuZXRSZXN1bHQuY29uZmlnLFxuXHRcdFx0XHRwbGFuZXRUeXBlOiBwbGFuZXRSZXN1bHQucGxhbmV0VHlwZSxcblx0XHRcdFx0c3RhdGlzdGljczogcGxhbmV0UmVzdWx0LnN0YXRpc3RpY3MsXG5cdFx0XHRcdG1ldGFkYXRhLFxuXHRcdFx0fTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIlBsYW5ldCByZW5kZXJpbmcgZmFpbGVkOlwiLCBlcnJvcik7XG5cblx0XHRcdC8vIEZhbGxiYWNrIHRvIHNpbXBsZSBwbGFuZXRcblx0XHRcdHJldHVybiB0aGlzLnJlbmRlckZhbGxiYWNrUGxhbmV0KGZpbmFsQ29uZmlnLCBzdGFydFRpbWUpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBSZW5kZXIgYSBwbGFuZXQgYnkgc3BlY2lmaWMgdHlwZVxuXHQgKi9cblx0cHVibGljIGFzeW5jIHJlbmRlclBsYW5ldEJ5VHlwZShwbGFuZXRDbGFzczogUGxhbmV0Q2xhc3MsIGNvbmZpZzogUGxhbmV0UmVuZGVyQ29uZmlnID0ge30pOiBQcm9taXNlPFBsYW5ldFJlbmRlclJlc3VsdD4ge1xuXHRcdHJldHVybiB0aGlzLnJlbmRlclBsYW5ldCh7IC4uLmNvbmZpZywgcGxhbmV0Q2xhc3MgfSk7XG5cdH1cblxuXHQvKipcblx0ICogUmVuZGVyIG11bHRpcGxlIHBsYW5ldHMgZm9yIGEgc29sYXIgc3lzdGVtXG5cdCAqL1xuXHRwdWJsaWMgYXN5bmMgcmVuZGVyU29sYXJTeXN0ZW1QbGFuZXRzKHBsYW5ldENvdW50OiBudW1iZXIsIHN0YXJUeXBlOiBzdHJpbmcgPSBcIkdcIik6IFByb21pc2U8UGxhbmV0UmVuZGVyUmVzdWx0W10+IHtcblx0XHRjb25zdCBwbGFuZXRzOiBQbGFuZXRSZW5kZXJSZXN1bHRbXSA9IFtdO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBwbGFuZXRDb3VudDsgaSsrKSB7XG5cdFx0XHRjb25zdCBkaXN0YW5jZSA9IDAuNSArIGkgKiAwLjg7IC8vIEFVIGZyb20gc3RhclxuXHRcdFx0Y29uc3QgY29uZmlnOiBQbGFuZXRSZW5kZXJDb25maWcgPSB7XG5cdFx0XHRcdHN0YXJEaXN0YW5jZTogZGlzdGFuY2UsXG5cdFx0XHRcdHN0YXJUeXBlLFxuXHRcdFx0XHRzZWVkOiBEYXRlLm5vdygpICsgaSAqIDEwMDAsXG5cdFx0XHRcdGRldGFpbExldmVsOiBNYXRoLm1heCgxLCA0IC0gaSksIC8vIENsb3NlciBwbGFuZXRzIGdldCBtb3JlIGRldGFpbFxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gU2VsZWN0IGFwcHJvcHJpYXRlIHBsYW5ldCB0eXBlIGJhc2VkIG9uIGRpc3RhbmNlXG5cdFx0XHRjb25maWcucGxhbmV0Q2xhc3MgPSB0aGlzLnNlbGVjdFBsYW5ldFR5cGVCeURpc3RhbmNlKGRpc3RhbmNlLCBzdGFyVHlwZSk7XG5cblx0XHRcdGNvbnN0IHBsYW5ldCA9IGF3YWl0IHRoaXMucmVuZGVyUGxhbmV0KGNvbmZpZyk7XG5cdFx0XHRwbGFuZXRzLnB1c2gocGxhbmV0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcGxhbmV0cztcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgYWxsIGF2YWlsYWJsZSBwbGFuZXQgdHlwZXNcblx0ICovXG5cdHB1YmxpYyBnZXRBdmFpbGFibGVQbGFuZXRUeXBlcygpOiBQbGFuZXRDbGFzc1tdIHtcblx0XHRyZXR1cm4gQXJyYXkuZnJvbShQTEFORVRfVFlQRVMua2V5cygpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgcGxhbmV0IHR5cGUgaW5mb3JtYXRpb25cblx0ICovXG5cdHB1YmxpYyBnZXRQbGFuZXRUeXBlSW5mbyhwbGFuZXRDbGFzczogUGxhbmV0Q2xhc3MpOiBQbGFuZXRUeXBlRGVmaW5pdGlvbiB8IHVuZGVmaW5lZCB7XG5cdFx0cmV0dXJuIGdldFBsYW5ldFR5cGVCeUNsYXNzKHBsYW5ldENsYXNzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGUgcGxhbmV0IHF1YWxpdHkgYmFzZWQgb24gcGVyZm9ybWFuY2Vcblx0ICovXG5cdHB1YmxpYyB1cGRhdGVRdWFsaXR5KHF1YWxpdHlMZXZlbDogbnVtYmVyKTogdm9pZCB7XG5cdFx0Ly8gUXVhbGl0eSBsZXZlbCAwLTUsIHdoZXJlIDUgaXMgaGlnaGVzdCBxdWFsaXR5XG5cdFx0Y29uc3QgcXVhbGl0eSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDUsIHF1YWxpdHlMZXZlbCkpO1xuXG5cdFx0Ly8gVXBkYXRlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBiYXNlZCBvbiBxdWFsaXR5XG5cdFx0REVGQVVMVF9DT05GSUcuZGV0YWlsTGV2ZWwgPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKHF1YWxpdHkgKyAxKSk7XG5cdFx0REVGQVVMVF9DT05GSUcuZmVhdHVyZURlbnNpdHkgPSAwLjMgKyBxdWFsaXR5ICogMC4xO1xuXHRcdERFRkFVTFRfQ09ORklHLm1heEZlYXR1cmVzID0gMjAgKyBxdWFsaXR5ICogMTA7XG5cdFx0REVGQVVMVF9DT05GSUcuZW5hYmxlU3BlY2lhbEVmZmVjdHMgPSBxdWFsaXR5ID49IDM7XG5cdFx0REVGQVVMVF9DT05GSUcuZW5hYmxlQWR2YW5jZWRMaWdodGluZyA9IHF1YWxpdHkgPj0gNDtcblx0fVxuXG5cdC8qKlxuXHQgKiBEaXNwb3NlIG9mIHJlc291cmNlc1xuXHQgKi9cblx0cHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuaXNEaXNwb3NlZCkgcmV0dXJuO1xuXG5cdFx0Ly8gQ2xlYXIgY2FjaGUgYW5kIGRpc3Bvc2UgbWVzaGVzXG5cdFx0Zm9yIChjb25zdCBtZXNoIG9mIHRoaXMucmVuZGVyQ2FjaGUudmFsdWVzKCkpIHtcblx0XHRcdHRoaXMuZGlzcG9zZU1lc2gobWVzaCk7XG5cdFx0fVxuXHRcdHRoaXMucmVuZGVyQ2FjaGUuY2xlYXIoKTtcblxuXHRcdHRoaXMuaXNEaXNwb3NlZCA9IHRydWU7XG5cdH1cblxuXHQvLyBQcml2YXRlIE1ldGhvZHNcblxuXHRwcml2YXRlIGdlbmVyYXRlQ2FjaGVLZXkoY29uZmlnOiBQbGFuZXRSZW5kZXJDb25maWcpOiBzdHJpbmcge1xuXHRcdGNvbnN0IGtleVBhcnRzID0gW2NvbmZpZy5wbGFuZXRDbGFzcyB8fCBcInJhbmRvbVwiLCBjb25maWcuc2VlZCB8fCAwLCBjb25maWcucmFkaXVzIHx8IDMsIGNvbmZpZy5kZXRhaWxMZXZlbCB8fCAyLCBjb25maWcuc3RhckRpc3RhbmNlIHx8IDEsIGNvbmZpZy5mZWF0dXJlRGVuc2l0eSB8fCAwLjddO1xuXG5cdFx0cmV0dXJuIGtleVBhcnRzLmpvaW4oXCJ8XCIpO1xuXHR9XG5cblx0cHJpdmF0ZSBjcmVhdGVDYWNoZWRSZXN1bHQobWVzaDogVEhSRUUuR3JvdXAsIGNvbmZpZzogUGxhbmV0UmVuZGVyQ29uZmlnLCBzdGFydFRpbWU6IG51bWJlcik6IFBsYW5ldFJlbmRlclJlc3VsdCB7XG5cdFx0Y29uc3QgY2xvbmVkTWVzaCA9IG1lc2guY2xvbmUoKTtcblxuXHRcdC8vIENyZWF0ZSBtaW5pbWFsIG1ldGFkYXRhIGZvciBjYWNoZWQgcmVzdWx0XG5cdFx0Y29uc3QgbWV0YWRhdGE6IFBsYW5ldFJlbmRlck1ldGFkYXRhID0ge1xuXHRcdFx0cmVuZGVyVGltZTogcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWUsXG5cdFx0XHRwb2x5Q291bnQ6IHRoaXMuY2FsY3VsYXRlUG9seUNvdW50KGNsb25lZE1lc2gpLFxuXHRcdFx0dGV4dHVyZUNvdW50OiAxLFxuXHRcdFx0ZmVhdHVyZUNvdW50OiBjbG9uZWRNZXNoLmNoaWxkcmVuLmxlbmd0aCxcblx0XHRcdG1lbW9yeVVzYWdlOiAwLFxuXHRcdFx0cXVhbGl0eUxldmVsOiBcImNhY2hlZFwiLFxuXHRcdH07XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0bWVzaDogY2xvbmVkTWVzaCxcblx0XHRcdGNvbmZpZzoge30gYXMgRW5oYW5jZWRQbGFuZXRDb25maWcsIC8vIE1pbmltYWwgY29uZmlnIGZvciBjYWNoZWRcblx0XHRcdHBsYW5ldFR5cGU6IHt9IGFzIFBsYW5ldFR5cGVEZWZpbml0aW9uLFxuXHRcdFx0c3RhdGlzdGljczoge30sXG5cdFx0XHRtZXRhZGF0YSxcblx0XHR9O1xuXHR9XG5cblx0cHJpdmF0ZSBhcHBseVJlbmRlckNvbmZpZ092ZXJyaWRlcyhwbGFuZXRDb25maWc6IEVuaGFuY2VkUGxhbmV0Q29uZmlnLCByZW5kZXJDb25maWc6IFBsYW5ldFJlbmRlckNvbmZpZyk6IHZvaWQge1xuXHRcdGlmIChyZW5kZXJDb25maWcucmFkaXVzICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHBsYW5ldENvbmZpZy5yYWRpdXMgPSByZW5kZXJDb25maWcucmFkaXVzO1xuXHRcdH1cblxuXHRcdGlmIChyZW5kZXJDb25maWcuZmVhdHVyZURlbnNpdHkgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cGxhbmV0Q29uZmlnLmZlYXR1cmVEZW5zaXR5ID0gcmVuZGVyQ29uZmlnLmZlYXR1cmVEZW5zaXR5O1xuXHRcdH1cblxuXHRcdGlmIChyZW5kZXJDb25maWcuY29sb3JWYXJpYXRpb24gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cGxhbmV0Q29uZmlnLmNvbG9yVmFyaWF0aW9uID0gcmVuZGVyQ29uZmlnLmNvbG9yVmFyaWF0aW9uO1xuXHRcdH1cblxuXHRcdC8vIE92ZXJyaWRlIGZlYXR1cmVzIGJhc2VkIG9uIHJlbmRlciBjb25maWdcblx0XHRpZiAocmVuZGVyQ29uZmlnLmVuYWJsZUF0bW9zcGhlcmUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cGxhbmV0Q29uZmlnLmZlYXR1cmVzLmNsb3VkcyA9IHJlbmRlckNvbmZpZy5lbmFibGVBdG1vc3BoZXJlO1xuXHRcdH1cblxuXHRcdGlmIChyZW5kZXJDb25maWcuZW5hYmxlUmluZ3MgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cGxhbmV0Q29uZmlnLmZlYXR1cmVzLnJpbmdzID0gcmVuZGVyQ29uZmlnLmVuYWJsZVJpbmdzO1xuXHRcdH1cblxuXHRcdGlmIChyZW5kZXJDb25maWcuZW5hYmxlTW9vbnMgIT09IHVuZGVmaW5lZCAmJiAhcmVuZGVyQ29uZmlnLmVuYWJsZU1vb25zKSB7XG5cdFx0XHRwbGFuZXRDb25maWcuZmVhdHVyZXMubW9vbnMgPSAwO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgZW5oYW5jZU1lc2hGb3JSZW5kZXJpbmcobWVzaDogVEhSRUUuR3JvdXAsIGNvbmZpZzogRW5oYW5jZWRQbGFuZXRDb25maWcsIHBsYW5ldFR5cGU6IFBsYW5ldFR5cGVEZWZpbml0aW9uLCByZW5kZXJDb25maWc6IFBsYW5ldFJlbmRlckNvbmZpZyk6IFByb21pc2U8dm9pZD4ge1xuXHRcdC8vIEFwcGx5IExPRCBpZiBlbmFibGVkXG5cdFx0aWYgKHJlbmRlckNvbmZpZy5lbmFibGVMT0QpIHtcblx0XHRcdHRoaXMuYXBwbHlMT0QobWVzaCwgcmVuZGVyQ29uZmlnLnJlbmRlckRpc3RhbmNlIHx8IDEwMCk7XG5cdFx0fVxuXG5cdFx0Ly8gTGltaXQgZmVhdHVyZXMgaWYgbmVjZXNzYXJ5XG5cdFx0aWYgKHJlbmRlckNvbmZpZy5tYXhGZWF0dXJlcyAmJiBtZXNoLmNoaWxkcmVuLmxlbmd0aCA+IHJlbmRlckNvbmZpZy5tYXhGZWF0dXJlcykge1xuXHRcdFx0dGhpcy5saW1pdEZlYXR1cmVzKG1lc2gsIHJlbmRlckNvbmZpZy5tYXhGZWF0dXJlcyk7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIGFkdmFuY2VkIHZpc3VhbCBlZmZlY3RzXG5cdFx0aWYgKHJlbmRlckNvbmZpZy5lbmFibGVTcGVjaWFsRWZmZWN0cykge1xuXHRcdFx0YXdhaXQgdGhpcy5hZGRBZHZhbmNlZEVmZmVjdHMobWVzaCwgY29uZmlnLCBwbGFuZXRUeXBlKTtcblx0XHR9XG5cblx0XHQvLyBPcHRpbWl6ZSBmb3IgcGVyZm9ybWFuY2Vcblx0XHR0aGlzLm9wdGltaXplTWVzaEZvclBlcmZvcm1hbmNlKG1lc2gpO1xuXHR9XG5cblx0cHJpdmF0ZSBhcHBseUxPRChtZXNoOiBUSFJFRS5Hcm91cCwgcmVuZGVyRGlzdGFuY2U6IG51bWJlcik6IHZvaWQge1xuXHRcdG1lc2guY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcblx0XHRcdGlmIChjaGlsZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2gpIHtcblx0XHRcdFx0Ly8gQ3JlYXRlIExPRCB2ZXJzaW9uc1xuXHRcdFx0XHRjb25zdCBsb2QgPSBuZXcgVEhSRUUuTE9EKCk7XG5cblx0XHRcdFx0Ly8gSGlnaCBkZXRhaWwgKGNsb3NlKVxuXHRcdFx0XHRsb2QuYWRkTGV2ZWwoY2hpbGQsIDApO1xuXG5cdFx0XHRcdC8vIE1lZGl1bSBkZXRhaWxcblx0XHRcdFx0Y29uc3QgbWVkaXVtR2VvbWV0cnkgPSB0aGlzLnNpbXBsaWZ5R2VvbWV0cnkoY2hpbGQuZ2VvbWV0cnkgYXMgVEhSRUUuQnVmZmVyR2VvbWV0cnksIDAuNSk7XG5cdFx0XHRcdGNvbnN0IG1lZGl1bU1lc2ggPSBuZXcgVEhSRUUuTWVzaChtZWRpdW1HZW9tZXRyeSwgY2hpbGQubWF0ZXJpYWwpO1xuXHRcdFx0XHRsb2QuYWRkTGV2ZWwobWVkaXVtTWVzaCwgcmVuZGVyRGlzdGFuY2UgKiAwLjMpO1xuXG5cdFx0XHRcdC8vIExvdyBkZXRhaWwgKGZhcilcblx0XHRcdFx0Y29uc3QgbG93R2VvbWV0cnkgPSB0aGlzLnNpbXBsaWZ5R2VvbWV0cnkoY2hpbGQuZ2VvbWV0cnkgYXMgVEhSRUUuQnVmZmVyR2VvbWV0cnksIDAuMik7XG5cdFx0XHRcdGNvbnN0IGxvd01lc2ggPSBuZXcgVEhSRUUuTWVzaChsb3dHZW9tZXRyeSwgY2hpbGQubWF0ZXJpYWwpO1xuXHRcdFx0XHRsb2QuYWRkTGV2ZWwobG93TWVzaCwgcmVuZGVyRGlzdGFuY2UgKiAwLjcpO1xuXG5cdFx0XHRcdC8vIFJlcGxhY2Ugb3JpZ2luYWwgbWVzaCB3aXRoIExPRFxuXHRcdFx0XHRjb25zdCBwYXJlbnQgPSBjaGlsZC5wYXJlbnQ7XG5cdFx0XHRcdGlmIChwYXJlbnQpIHtcblx0XHRcdFx0XHRwYXJlbnQucmVtb3ZlKGNoaWxkKTtcblx0XHRcdFx0XHRwYXJlbnQuYWRkKGxvZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgc2ltcGxpZnlHZW9tZXRyeShnZW9tZXRyeTogVEhSRUUuQnVmZmVyR2VvbWV0cnksIGZhY3RvcjogbnVtYmVyKTogVEhSRUUuQnVmZmVyR2VvbWV0cnkge1xuXHRcdC8vIFNpbXBsZSBnZW9tZXRyeSBzaW1wbGlmaWNhdGlvblxuXHRcdGNvbnN0IHBvc2l0aW9ucyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XG5cdFx0Y29uc3Qgc2ltcGxpZmllZCA9IG5ldyBGbG9hdDMyQXJyYXkoTWF0aC5mbG9vcihwb3NpdGlvbnMubGVuZ3RoICogZmFjdG9yKSk7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHNpbXBsaWZpZWQubGVuZ3RoOyBpICs9IDMpIHtcblx0XHRcdGNvbnN0IHNvdXJjZUluZGV4ID0gTWF0aC5mbG9vcihpIC8gZmFjdG9yKSAqIDM7XG5cdFx0XHRzaW1wbGlmaWVkW2ldID0gcG9zaXRpb25zW3NvdXJjZUluZGV4XTtcblx0XHRcdHNpbXBsaWZpZWRbaSArIDFdID0gcG9zaXRpb25zW3NvdXJjZUluZGV4ICsgMV07XG5cdFx0XHRzaW1wbGlmaWVkW2kgKyAyXSA9IHBvc2l0aW9uc1tzb3VyY2VJbmRleCArIDJdO1xuXHRcdH1cblxuXHRcdGNvbnN0IHNpbXBsaWZpZWRHZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuXHRcdHNpbXBsaWZpZWRHZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHNpbXBsaWZpZWQsIDMpKTtcblx0XHRzaW1wbGlmaWVkR2VvbWV0cnkuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcblxuXHRcdHJldHVybiBzaW1wbGlmaWVkR2VvbWV0cnk7XG5cdH1cblxuXHRwcml2YXRlIGxpbWl0RmVhdHVyZXMobWVzaDogVEhSRUUuR3JvdXAsIG1heEZlYXR1cmVzOiBudW1iZXIpOiB2b2lkIHtcblx0XHR3aGlsZSAobWVzaC5jaGlsZHJlbi5sZW5ndGggPiBtYXhGZWF0dXJlcykge1xuXHRcdFx0Y29uc3QgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtZXNoLmNoaWxkcmVuLmxlbmd0aCk7XG5cdFx0XHRjb25zdCBjaGlsZCA9IG1lc2guY2hpbGRyZW5bcmFuZG9tSW5kZXhdO1xuXHRcdFx0bWVzaC5yZW1vdmUoY2hpbGQpO1xuXHRcdFx0dGhpcy5kaXNwb3NlTWVzaChjaGlsZCk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBhZGRBZHZhbmNlZEVmZmVjdHMobWVzaDogVEhSRUUuR3JvdXAsIGNvbmZpZzogRW5oYW5jZWRQbGFuZXRDb25maWcsIHBsYW5ldFR5cGU6IFBsYW5ldFR5cGVEZWZpbml0aW9uKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Ly8gQWRkIHBhcnRpY2xlIGVmZmVjdHMgZm9yIGNlcnRhaW4gcGxhbmV0IHR5cGVzXG5cdFx0aWYgKHBsYW5ldFR5cGUuY2xhc3MgPT09IFBsYW5ldENsYXNzLkxBVkFfV09STEQpIHtcblx0XHRcdHRoaXMuYWRkTGF2YVBhcnRpY2xlcyhtZXNoKTtcblx0XHR9XG5cblx0XHRpZiAocGxhbmV0VHlwZS5jbGFzcyA9PT0gUGxhbmV0Q2xhc3MuR0FTX0dJQU5UKSB7XG5cdFx0XHR0aGlzLmFkZEF0bW9zcGhlcmljU3Rvcm1zKG1lc2gpO1xuXHRcdH1cblxuXHRcdGlmIChwbGFuZXRUeXBlLmNsYXNzID09PSBQbGFuZXRDbGFzcy5JQ0VfR0lBTlQpIHtcblx0XHRcdHRoaXMuYWRkSWNlU2hpbW1lcnMobWVzaCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIGF1cm9yYSBlZmZlY3RzIGZvciBwbGFuZXRzIHdpdGggbWFnbmV0aWMgZmllbGRzXG5cdFx0aWYgKGNvbmZpZy5tYWduZXRpY0ZpZWxkID4gNSkge1xuXHRcdFx0dGhpcy5hZGRBdXJvcmFFZmZlY3QobWVzaCk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBhZGRMYXZhUGFydGljbGVzKG1lc2g6IFRIUkVFLkdyb3VwKTogdm9pZCB7XG5cdFx0Y29uc3QgcGFydGljbGVDb3VudCA9IDEwMDtcblx0XHRjb25zdCBwYXJ0aWNsZXMgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRjb25zdCBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KHBhcnRpY2xlQ291bnQgKiAzKTtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcGFydGljbGVDb3VudDsgaSsrKSB7XG5cdFx0XHRwb3NpdGlvbnNbaSAqIDNdID0gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMTA7XG5cdFx0XHRwb3NpdGlvbnNbaSAqIDMgKyAxXSA9IE1hdGgucmFuZG9tKCkgKiA1O1xuXHRcdFx0cG9zaXRpb25zW2kgKiAzICsgMl0gPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAxMDtcblx0XHR9XG5cblx0XHRwYXJ0aWNsZXMuc2V0QXR0cmlidXRlKFwicG9zaXRpb25cIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbnMsIDMpKTtcblxuXHRcdGNvbnN0IHBhcnRpY2xlTWF0ZXJpYWwgPSBuZXcgVEhSRUUuUG9pbnRzTWF0ZXJpYWwoe1xuXHRcdFx0Y29sb3I6IDB4ZmY0NTAwLFxuXHRcdFx0c2l6ZTogMC4xLFxuXHRcdFx0dHJhbnNwYXJlbnQ6IHRydWUsXG5cdFx0XHRvcGFjaXR5OiAwLjcsXG5cdFx0fSk7XG5cblx0XHRjb25zdCBwYXJ0aWNsZVN5c3RlbSA9IG5ldyBUSFJFRS5Qb2ludHMocGFydGljbGVzLCBwYXJ0aWNsZU1hdGVyaWFsKTtcblx0XHRtZXNoLmFkZChwYXJ0aWNsZVN5c3RlbSk7XG5cdH1cblxuXHRwcml2YXRlIGFkZEF0bW9zcGhlcmljU3Rvcm1zKG1lc2g6IFRIUkVFLkdyb3VwKTogdm9pZCB7XG5cdFx0Ly8gQWRkIHN0b3JtIHNwaXJhbCBwYXR0ZXJuc1xuXHRcdGNvbnN0IHN0b3JtR2VvbWV0cnkgPSBuZXcgVEhSRUUuUmluZ0dlb21ldHJ5KDIsIDQsIDgpO1xuXHRcdGNvbnN0IHN0b3JtTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xuXHRcdFx0Y29sb3I6IDB4NDE2OWUxLFxuXHRcdFx0dHJhbnNwYXJlbnQ6IHRydWUsXG5cdFx0XHRvcGFjaXR5OiAwLjMsXG5cdFx0XHRzaWRlOiBUSFJFRS5Eb3VibGVTaWRlLFxuXHRcdH0pO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcblx0XHRcdGNvbnN0IHN0b3JtID0gbmV3IFRIUkVFLk1lc2goc3Rvcm1HZW9tZXRyeSwgc3Rvcm1NYXRlcmlhbCk7XG5cdFx0XHRzdG9ybS5wb3NpdGlvbi5zZXQoKE1hdGgucmFuZG9tKCkgLSAwLjUpICogOCwgKE1hdGgucmFuZG9tKCkgLSAwLjUpICogOCwgKE1hdGgucmFuZG9tKCkgLSAwLjUpICogOCk7XG5cdFx0XHRzdG9ybS5yb3RhdGlvbi54ID0gTWF0aC5yYW5kb20oKSAqIE1hdGguUEk7XG5cdFx0XHRzdG9ybS5yb3RhdGlvbi55ID0gTWF0aC5yYW5kb20oKSAqIE1hdGguUEk7XG5cdFx0XHRtZXNoLmFkZChzdG9ybSk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBhZGRJY2VTaGltbWVycyhtZXNoOiBUSFJFRS5Hcm91cCk6IHZvaWQge1xuXHRcdGNvbnN0IHNoaW1tZXJHZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSgxLCAxNiwgMTYpO1xuXHRcdGNvbnN0IHNoaW1tZXJNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XG5cdFx0XHRjb2xvcjogMHg4N2NlZWIsXG5cdFx0XHR0cmFuc3BhcmVudDogdHJ1ZSxcblx0XHRcdG9wYWNpdHk6IDAuMixcblx0XHRcdHNpZGU6IFRIUkVFLkJhY2tTaWRlLFxuXHRcdH0pO1xuXG5cdFx0Y29uc3Qgc2hpbW1lciA9IG5ldyBUSFJFRS5NZXNoKHNoaW1tZXJHZW9tZXRyeSwgc2hpbW1lck1hdGVyaWFsKTtcblx0XHRtZXNoLmFkZChzaGltbWVyKTtcblx0fVxuXG5cdHByaXZhdGUgYWRkQXVyb3JhRWZmZWN0KG1lc2g6IFRIUkVFLkdyb3VwKTogdm9pZCB7XG5cdFx0Y29uc3QgYXVyb3JhR2VvbWV0cnkgPSBuZXcgVEhSRUUuUmluZ0dlb21ldHJ5KDMsIDUsIDMyKTtcblx0XHRjb25zdCBhdXJvcmFNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XG5cdFx0XHRjb2xvcjogMHgwMGZmN2YsXG5cdFx0XHR0cmFuc3BhcmVudDogdHJ1ZSxcblx0XHRcdG9wYWNpdHk6IDAuNCxcblx0XHRcdHNpZGU6IFRIUkVFLkRvdWJsZVNpZGUsXG5cdFx0fSk7XG5cblx0XHRjb25zdCBhdXJvcmEgPSBuZXcgVEhSRUUuTWVzaChhdXJvcmFHZW9tZXRyeSwgYXVyb3JhTWF0ZXJpYWwpO1xuXHRcdGF1cm9yYS5yb3RhdGlvbi54ID0gTWF0aC5QSSAvIDI7XG5cdFx0bWVzaC5hZGQoYXVyb3JhKTtcblx0fVxuXG5cdHByaXZhdGUgb3B0aW1pemVNZXNoRm9yUGVyZm9ybWFuY2UobWVzaDogVEhSRUUuR3JvdXApOiB2b2lkIHtcblx0XHRtZXNoLnRyYXZlcnNlKChjaGlsZCkgPT4ge1xuXHRcdFx0aWYgKGNoaWxkIGluc3RhbmNlb2YgVEhSRUUuTWVzaCkge1xuXHRcdFx0XHQvLyBFbmFibGUgZnJ1c3R1bSBjdWxsaW5nXG5cdFx0XHRcdGNoaWxkLmZydXN0dW1DdWxsZWQgPSB0cnVlO1xuXG5cdFx0XHRcdC8vIE1lcmdlIGdlb21ldHJpZXMgd2hlcmUgcG9zc2libGVcblx0XHRcdFx0aWYgKGNoaWxkLmdlb21ldHJ5IGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkpIHtcblx0XHRcdFx0XHRjaGlsZC5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblx0XHRcdFx0XHRjaGlsZC5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE9wdGltaXplIG1hdGVyaWFsc1xuXHRcdFx0XHRpZiAoY2hpbGQubWF0ZXJpYWwgaW5zdGFuY2VvZiBUSFJFRS5NYXRlcmlhbCkge1xuXHRcdFx0XHRcdGNoaWxkLm1hdGVyaWFsLnByZWNpc2lvbiA9IFwibWVkaXVtcFwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRwcml2YXRlIHNldHVwQWR2YW5jZWRMaWdodGluZyhtZXNoOiBUSFJFRS5Hcm91cCwgY29uZmlnOiBQbGFuZXRSZW5kZXJDb25maWcpOiB2b2lkIHtcblx0XHQvLyBUaGlzIHdvdWxkIHR5cGljYWxseSBiZSBoYW5kbGVkIGJ5IHRoZSBzY2VuZSwgYnV0IHdlIGNhbiBhZGQgb2JqZWN0LXNwZWNpZmljIGxpZ2h0aW5nXG5cblx0XHQvLyBBZGQgYW1iaWVudCBsaWdodCBmb3IgYXRtb3NwaGVyZVxuXHRcdGNvbnN0IGFtYmllbnRMaWdodCA9IG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHg0MDQwNDAsIGNvbmZpZy5hbWJpZW50SW50ZW5zaXR5IHx8IDAuNCk7XG5cdFx0bWVzaC5hZGQoYW1iaWVudExpZ2h0KTtcblxuXHRcdC8vIEFkZCBkaXJlY3Rpb25hbCBsaWdodCBmb3Igc3VuXG5cdFx0Y29uc3Qgc3VuTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweGZmZmZmZiwgY29uZmlnLnN1bkludGVuc2l0eSB8fCAxLjUpO1xuXHRcdHN1bkxpZ2h0LnBvc2l0aW9uLnNldCgxMCwgMTAsIDEwKTtcblx0XHRzdW5MaWdodC5jYXN0U2hhZG93ID0gdHJ1ZTtcblx0XHRtZXNoLmFkZChzdW5MaWdodCk7XG5cblx0XHQvLyBBZGQgc3VidGxlIHJpbSBsaWdodGluZ1xuXHRcdGNvbnN0IHJpbUxpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHg4N2NlZWIsIDAuMyk7XG5cdFx0cmltTGlnaHQucG9zaXRpb24uc2V0KC0xMCwgNSwgLTEwKTtcblx0XHRtZXNoLmFkZChyaW1MaWdodCk7XG5cdH1cblxuXHRwcml2YXRlIHNlbGVjdFBsYW5ldFR5cGVCeURpc3RhbmNlKGRpc3RhbmNlOiBudW1iZXIsIHN0YXJUeXBlOiBzdHJpbmcpOiBQbGFuZXRDbGFzcyB7XG5cdFx0Ly8gU2VsZWN0IHBsYW5ldCB0eXBlIGJhc2VkIG9uIGRpc3RhbmNlIGZyb20gc3RhclxuXHRcdGlmIChkaXN0YW5jZSA8IDAuNSkge1xuXHRcdFx0cmV0dXJuIE1hdGgucmFuZG9tKCkgPCAwLjcgPyBQbGFuZXRDbGFzcy5MQVZBX1dPUkxEIDogUGxhbmV0Q2xhc3MuSVJPTl9XT1JMRDtcblx0XHR9IGVsc2UgaWYgKGRpc3RhbmNlIDwgMS41KSB7XG5cdFx0XHRyZXR1cm4gTWF0aC5yYW5kb20oKSA8IDAuNiA/IFBsYW5ldENsYXNzLlRFUlJFU1RSSUFMIDogUGxhbmV0Q2xhc3MuU1VQRVJfRUFSVEg7XG5cdFx0fSBlbHNlIGlmIChkaXN0YW5jZSA8IDMuMCkge1xuXHRcdFx0cmV0dXJuIE1hdGgucmFuZG9tKCkgPCAwLjQgPyBQbGFuZXRDbGFzcy5PQ0VBTl9XT1JMRCA6IFBsYW5ldENsYXNzLlRFUlJFU1RSSUFMO1xuXHRcdH0gZWxzZSBpZiAoZGlzdGFuY2UgPCA4LjApIHtcblx0XHRcdHJldHVybiBNYXRoLnJhbmRvbSgpIDwgMC43ID8gUGxhbmV0Q2xhc3MuR0FTX0dJQU5UIDogUGxhbmV0Q2xhc3MuSUNFX0dJQU5UO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gTWF0aC5yYW5kb20oKSA8IDAuOCA/IFBsYW5ldENsYXNzLklDRV9HSUFOVCA6IFBsYW5ldENsYXNzLkRXQVJGX1BMQU5FVDtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIHJlbmRlckZhbGxiYWNrUGxhbmV0KGNvbmZpZzogUGxhbmV0UmVuZGVyQ29uZmlnLCBzdGFydFRpbWU6IG51bWJlcik6IFBsYW5ldFJlbmRlclJlc3VsdCB7XG5cdFx0Ly8gQ3JlYXRlIGEgc2ltcGxlIGZhbGxiYWNrIHBsYW5ldFxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkljb3NhaGVkcm9uR2VvbWV0cnkoY29uZmlnLnJhZGl1cyB8fCAzLCAxKTtcblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IGNvbG9yOiAweDg4ODg4OCB9KTtcblx0XHRjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcblxuXHRcdGNvbnN0IGdyb3VwID0gbmV3IFRIUkVFLkdyb3VwKCk7XG5cdFx0Z3JvdXAuYWRkKG1lc2gpO1xuXG5cdFx0Y29uc3QgbWV0YWRhdGE6IFBsYW5ldFJlbmRlck1ldGFkYXRhID0ge1xuXHRcdFx0cmVuZGVyVGltZTogcGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWUsXG5cdFx0XHRwb2x5Q291bnQ6IGdlb21ldHJ5LmZhY2VzPy5sZW5ndGggfHwgMjAsXG5cdFx0XHR0ZXh0dXJlQ291bnQ6IDAsXG5cdFx0XHRmZWF0dXJlQ291bnQ6IDEsXG5cdFx0XHRtZW1vcnlVc2FnZTogMCxcblx0XHRcdHF1YWxpdHlMZXZlbDogXCJmYWxsYmFja1wiLFxuXHRcdH07XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0bWVzaDogZ3JvdXAsXG5cdFx0XHRjb25maWc6IHt9IGFzIEVuaGFuY2VkUGxhbmV0Q29uZmlnLFxuXHRcdFx0cGxhbmV0VHlwZToge30gYXMgUGxhbmV0VHlwZURlZmluaXRpb24sXG5cdFx0XHRzdGF0aXN0aWNzOiB7fSxcblx0XHRcdG1ldGFkYXRhLFxuXHRcdH07XG5cdH1cblxuXHRwcml2YXRlIGNhbGN1bGF0ZVJlbmRlck1ldGFkYXRhKG1lc2g6IFRIUkVFLkdyb3VwLCBzdGFydFRpbWU6IG51bWJlcik6IFBsYW5ldFJlbmRlck1ldGFkYXRhIHtcblx0XHRsZXQgcG9seUNvdW50ID0gMDtcblx0XHRsZXQgdGV4dHVyZUNvdW50ID0gMDtcblx0XHRsZXQgbWVtb3J5VXNhZ2UgPSAwO1xuXG5cdFx0bWVzaC50cmF2ZXJzZSgoY2hpbGQpID0+IHtcblx0XHRcdGlmIChjaGlsZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2gpIHtcblx0XHRcdFx0aWYgKGNoaWxkLmdlb21ldHJ5IGluc3RhbmNlb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkpIHtcblx0XHRcdFx0XHRjb25zdCBwb3NpdGlvbnMgPSBjaGlsZC5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdFx0XHRcdGlmIChwb3NpdGlvbnMpIHtcblx0XHRcdFx0XHRcdHBvbHlDb3VudCArPSBwb3NpdGlvbnMuY291bnQgLyAzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChjaGlsZC5tYXRlcmlhbCBpbnN0YW5jZW9mIFRIUkVFLk1hdGVyaWFsKSB7XG5cdFx0XHRcdFx0dGV4dHVyZUNvdW50Kys7XG5cdFx0XHRcdFx0Ly8gRXN0aW1hdGUgbWVtb3J5IHVzYWdlICh2ZXJ5IHJvdWdoKVxuXHRcdFx0XHRcdG1lbW9yeVVzYWdlICs9IDEwMjQ7IC8vIDFLQiBwZXIgbWF0ZXJpYWwgZXN0aW1hdGVcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHJlbmRlclRpbWU6IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnRUaW1lLFxuXHRcdFx0cG9seUNvdW50OiBNYXRoLmZsb29yKHBvbHlDb3VudCksXG5cdFx0XHR0ZXh0dXJlQ291bnQsXG5cdFx0XHRmZWF0dXJlQ291bnQ6IG1lc2guY2hpbGRyZW4ubGVuZ3RoLFxuXHRcdFx0bWVtb3J5VXNhZ2UsXG5cdFx0XHRxdWFsaXR5TGV2ZWw6IHRoaXMuZGV0ZXJtaW5lUXVhbGl0eUxldmVsKHBvbHlDb3VudCwgdGV4dHVyZUNvdW50KSxcblx0XHR9O1xuXHR9XG5cblx0cHJpdmF0ZSBkZXRlcm1pbmVRdWFsaXR5TGV2ZWwocG9seUNvdW50OiBudW1iZXIsIHRleHR1cmVDb3VudDogbnVtYmVyKTogc3RyaW5nIHtcblx0XHRpZiAocG9seUNvdW50ID4gMTAwMDApIHJldHVybiBcInVsdHJhXCI7XG5cdFx0aWYgKHBvbHlDb3VudCA+IDUwMDApIHJldHVybiBcImhpZ2hcIjtcblx0XHRpZiAocG9seUNvdW50ID4gMjAwMCkgcmV0dXJuIFwibWVkaXVtXCI7XG5cdFx0aWYgKHBvbHlDb3VudCA+IDUwMCkgcmV0dXJuIFwibG93XCI7XG5cdFx0cmV0dXJuIFwibWluaW1hbFwiO1xuXHR9XG5cblx0cHJpdmF0ZSBjYWxjdWxhdGVQb2x5Q291bnQobWVzaDogVEhSRUUuR3JvdXApOiBudW1iZXIge1xuXHRcdGxldCBjb3VudCA9IDA7XG5cdFx0bWVzaC50cmF2ZXJzZSgoY2hpbGQpID0+IHtcblx0XHRcdGlmIChjaGlsZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2ggJiYgY2hpbGQuZ2VvbWV0cnkgaW5zdGFuY2VvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeSkge1xuXHRcdFx0XHRjb25zdCBwb3NpdGlvbnMgPSBjaGlsZC5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdFx0XHRpZiAocG9zaXRpb25zKSB7XG5cdFx0XHRcdFx0Y291bnQgKz0gcG9zaXRpb25zLmNvdW50IC8gMztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBNYXRoLmZsb29yKGNvdW50KTtcblx0fVxuXG5cdHByaXZhdGUgZGlzcG9zZU1lc2gob2JqZWN0OiBUSFJFRS5PYmplY3QzRCk6IHZvaWQge1xuXHRcdG9iamVjdC50cmF2ZXJzZSgoY2hpbGQpID0+IHtcblx0XHRcdGlmIChjaGlsZCBpbnN0YW5jZW9mIFRIUkVFLk1lc2gpIHtcblx0XHRcdFx0aWYgKGNoaWxkLmdlb21ldHJ5KSB7XG5cdFx0XHRcdFx0Y2hpbGQuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChjaGlsZC5tYXRlcmlhbCkge1xuXHRcdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KGNoaWxkLm1hdGVyaWFsKSkge1xuXHRcdFx0XHRcdFx0Y2hpbGQubWF0ZXJpYWwuZm9yRWFjaCgobWF0ZXJpYWwpID0+IG1hdGVyaWFsLmRpc3Bvc2UoKSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNoaWxkLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgY2xlYW51cENhY2hlKCk6IHZvaWQge1xuXHRcdC8vIEtlZXAgY2FjaGUgc2l6ZSByZWFzb25hYmxlXG5cdFx0aWYgKHRoaXMucmVuZGVyQ2FjaGUuc2l6ZSA+IDEwKSB7XG5cdFx0XHRjb25zdCBmaXJzdEtleSA9IHRoaXMucmVuZGVyQ2FjaGUua2V5cygpLm5leHQoKS52YWx1ZTtcblx0XHRcdGNvbnN0IG1lc2ggPSB0aGlzLnJlbmRlckNhY2hlLmdldChmaXJzdEtleSk7XG5cdFx0XHRpZiAobWVzaCkge1xuXHRcdFx0XHR0aGlzLmRpc3Bvc2VNZXNoKG1lc2gpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5yZW5kZXJDYWNoZS5kZWxldGUoZmlyc3RLZXkpO1xuXHRcdH1cblx0fVxuXG5cdC8vIFB1YmxpYyB1dGlsaXR5IG1ldGhvZHNcblxuXHQvKipcblx0ICogR2V0IHBlcmZvcm1hbmNlIHN0YXRpc3RpY3Ncblx0ICovXG5cdHB1YmxpYyBnZXRQZXJmb3JtYW5jZVN0YXRzKCk6IHsgbGFzdFJlbmRlclRpbWU6IG51bWJlcjsgY2FjaGVTaXplOiBudW1iZXIgfSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGxhc3RSZW5kZXJUaW1lOiB0aGlzLmxhc3RSZW5kZXJUaW1lLFxuXHRcdFx0Y2FjaGVTaXplOiB0aGlzLnJlbmRlckNhY2hlLnNpemUsXG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDbGVhciByZW5kZXIgY2FjaGVcblx0ICovXG5cdHB1YmxpYyBjbGVhckNhY2hlKCk6IHZvaWQge1xuXHRcdGZvciAoY29uc3QgbWVzaCBvZiB0aGlzLnJlbmRlckNhY2hlLnZhbHVlcygpKSB7XG5cdFx0XHR0aGlzLmRpc3Bvc2VNZXNoKG1lc2gpO1xuXHRcdH1cblx0XHR0aGlzLnJlbmRlckNhY2hlLmNsZWFyKCk7XG5cdH1cblxuXHQvKipcblx0ICogUHJlbG9hZCBjb21tb24gcGxhbmV0IHR5cGVzXG5cdCAqL1xuXHRwdWJsaWMgYXN5bmMgcHJlbG9hZENvbW1vblR5cGVzKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGNvbnN0IGNvbW1vblR5cGVzID0gW1BsYW5ldENsYXNzLlRFUlJFU1RSSUFMLCBQbGFuZXRDbGFzcy5HQVNfR0lBTlQsIFBsYW5ldENsYXNzLklDRV9HSUFOVCwgUGxhbmV0Q2xhc3MuT0NFQU5fV09STERdO1xuXG5cdFx0Y29uc3QgcHJvbWlzZXMgPSBjb21tb25UeXBlcy5tYXAoKHR5cGUpID0+XG5cdFx0XHR0aGlzLnJlbmRlclBsYW5ldCh7XG5cdFx0XHRcdHBsYW5ldENsYXNzOiB0eXBlLFxuXHRcdFx0XHRkZXRhaWxMZXZlbDogMSxcblx0XHRcdFx0ZW5hYmxlU3BlY2lhbEVmZmVjdHM6IGZhbHNlLFxuXHRcdFx0fSlcblx0XHQpO1xuXG5cdFx0YXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuXHR9XG59XG4iXSwibmFtZXMiOlsiVEhSRUUiLCJQbGFuZXRDbGFzcyIsImdldFBsYW5ldFR5cGVCeUNsYXNzIiwiUExBTkVUX1RZUEVTIiwiREVGQVVMVF9DT05GSUciLCJyYWRpdXMiLCJzZWVkIiwiRGF0ZSIsIm5vdyIsInN0YXJEaXN0YW5jZSIsInN0YXJUeXBlIiwiZGV0YWlsTGV2ZWwiLCJmZWF0dXJlRGVuc2l0eSIsImNvbG9yVmFyaWF0aW9uIiwiZW5hYmxlTE9EIiwibWF4RmVhdHVyZXMiLCJyZW5kZXJEaXN0YW5jZSIsImVuYWJsZUF0bW9zcGhlcmUiLCJlbmFibGVSaW5ncyIsImVuYWJsZU1vb25zIiwiZW5hYmxlU3BlY2lhbEVmZmVjdHMiLCJlbmFibGVBZHZhbmNlZExpZ2h0aW5nIiwiYW1iaWVudEludGVuc2l0eSIsInN1bkludGVuc2l0eSIsIlBsYW5ldFJlbmRlcmVyIiwicmVuZGVyUGxhbmV0IiwiY29uZmlnIiwiaXNEaXNwb3NlZCIsIkVycm9yIiwic3RhcnRUaW1lIiwicGVyZm9ybWFuY2UiLCJmaW5hbENvbmZpZyIsImNhY2hlS2V5IiwiZ2VuZXJhdGVDYWNoZUtleSIsImNhY2hlZE1lc2giLCJyZW5kZXJDYWNoZSIsImdldCIsImNyZWF0ZUNhY2hlZFJlc3VsdCIsImdlbmVyYXRvciIsIkVuaGFuY2VkUGxhbmV0R2VuZXJhdG9yIiwicGxhbmV0UmVzdWx0IiwiZ2VuZXJhdGVQbGFuZXQiLCJwbGFuZXRDbGFzcyIsImFwcGx5UmVuZGVyQ29uZmlnT3ZlcnJpZGVzIiwiZW5oYW5jZU1lc2hGb3JSZW5kZXJpbmciLCJtZXNoIiwicGxhbmV0VHlwZSIsInNldHVwQWR2YW5jZWRMaWdodGluZyIsInNldCIsImNsb25lIiwiY2xlYW51cENhY2hlIiwibWV0YWRhdGEiLCJjYWxjdWxhdGVSZW5kZXJNZXRhZGF0YSIsImxhc3RSZW5kZXJUaW1lIiwic3RhdGlzdGljcyIsImVycm9yIiwiY29uc29sZSIsInJlbmRlckZhbGxiYWNrUGxhbmV0IiwicmVuZGVyUGxhbmV0QnlUeXBlIiwicmVuZGVyU29sYXJTeXN0ZW1QbGFuZXRzIiwicGxhbmV0Q291bnQiLCJwbGFuZXRzIiwiaSIsImRpc3RhbmNlIiwiTWF0aCIsIm1heCIsInNlbGVjdFBsYW5ldFR5cGVCeURpc3RhbmNlIiwicGxhbmV0IiwicHVzaCIsImdldEF2YWlsYWJsZVBsYW5ldFR5cGVzIiwiQXJyYXkiLCJmcm9tIiwia2V5cyIsImdldFBsYW5ldFR5cGVJbmZvIiwidXBkYXRlUXVhbGl0eSIsInF1YWxpdHlMZXZlbCIsInF1YWxpdHkiLCJtaW4iLCJmbG9vciIsImRpc3Bvc2UiLCJ2YWx1ZXMiLCJkaXNwb3NlTWVzaCIsImNsZWFyIiwia2V5UGFydHMiLCJqb2luIiwiY2xvbmVkTWVzaCIsInJlbmRlclRpbWUiLCJwb2x5Q291bnQiLCJjYWxjdWxhdGVQb2x5Q291bnQiLCJ0ZXh0dXJlQ291bnQiLCJmZWF0dXJlQ291bnQiLCJjaGlsZHJlbiIsImxlbmd0aCIsIm1lbW9yeVVzYWdlIiwicGxhbmV0Q29uZmlnIiwicmVuZGVyQ29uZmlnIiwidW5kZWZpbmVkIiwiZmVhdHVyZXMiLCJjbG91ZHMiLCJyaW5ncyIsIm1vb25zIiwiYXBwbHlMT0QiLCJsaW1pdEZlYXR1cmVzIiwiYWRkQWR2YW5jZWRFZmZlY3RzIiwib3B0aW1pemVNZXNoRm9yUGVyZm9ybWFuY2UiLCJmb3JFYWNoIiwiY2hpbGQiLCJNZXNoIiwibG9kIiwiTE9EIiwiYWRkTGV2ZWwiLCJtZWRpdW1HZW9tZXRyeSIsInNpbXBsaWZ5R2VvbWV0cnkiLCJnZW9tZXRyeSIsIm1lZGl1bU1lc2giLCJtYXRlcmlhbCIsImxvd0dlb21ldHJ5IiwibG93TWVzaCIsInBhcmVudCIsInJlbW92ZSIsImFkZCIsImZhY3RvciIsInBvc2l0aW9ucyIsImF0dHJpYnV0ZXMiLCJwb3NpdGlvbiIsImFycmF5Iiwic2ltcGxpZmllZCIsIkZsb2F0MzJBcnJheSIsInNvdXJjZUluZGV4Iiwic2ltcGxpZmllZEdlb21ldHJ5IiwiQnVmZmVyR2VvbWV0cnkiLCJzZXRBdHRyaWJ1dGUiLCJCdWZmZXJBdHRyaWJ1dGUiLCJjb21wdXRlVmVydGV4Tm9ybWFscyIsInJhbmRvbUluZGV4IiwicmFuZG9tIiwiY2xhc3MiLCJMQVZBX1dPUkxEIiwiYWRkTGF2YVBhcnRpY2xlcyIsIkdBU19HSUFOVCIsImFkZEF0bW9zcGhlcmljU3Rvcm1zIiwiSUNFX0dJQU5UIiwiYWRkSWNlU2hpbW1lcnMiLCJtYWduZXRpY0ZpZWxkIiwiYWRkQXVyb3JhRWZmZWN0IiwicGFydGljbGVDb3VudCIsInBhcnRpY2xlcyIsInBhcnRpY2xlTWF0ZXJpYWwiLCJQb2ludHNNYXRlcmlhbCIsImNvbG9yIiwic2l6ZSIsInRyYW5zcGFyZW50Iiwib3BhY2l0eSIsInBhcnRpY2xlU3lzdGVtIiwiUG9pbnRzIiwic3Rvcm1HZW9tZXRyeSIsIlJpbmdHZW9tZXRyeSIsInN0b3JtTWF0ZXJpYWwiLCJNZXNoQmFzaWNNYXRlcmlhbCIsInNpZGUiLCJEb3VibGVTaWRlIiwic3Rvcm0iLCJyb3RhdGlvbiIsIngiLCJQSSIsInkiLCJzaGltbWVyR2VvbWV0cnkiLCJTcGhlcmVHZW9tZXRyeSIsInNoaW1tZXJNYXRlcmlhbCIsIkJhY2tTaWRlIiwic2hpbW1lciIsImF1cm9yYUdlb21ldHJ5IiwiYXVyb3JhTWF0ZXJpYWwiLCJhdXJvcmEiLCJ0cmF2ZXJzZSIsImZydXN0dW1DdWxsZWQiLCJjb21wdXRlQm91bmRpbmdTcGhlcmUiLCJjb21wdXRlQm91bmRpbmdCb3giLCJNYXRlcmlhbCIsInByZWNpc2lvbiIsImFtYmllbnRMaWdodCIsIkFtYmllbnRMaWdodCIsInN1bkxpZ2h0IiwiRGlyZWN0aW9uYWxMaWdodCIsImNhc3RTaGFkb3ciLCJyaW1MaWdodCIsIklST05fV09STEQiLCJURVJSRVNUUklBTCIsIlNVUEVSX0VBUlRIIiwiT0NFQU5fV09STEQiLCJEV0FSRl9QTEFORVQiLCJJY29zYWhlZHJvbkdlb21ldHJ5IiwiTWVzaFBob25nTWF0ZXJpYWwiLCJncm91cCIsIkdyb3VwIiwiZmFjZXMiLCJjb3VudCIsImRldGVybWluZVF1YWxpdHlMZXZlbCIsIm9iamVjdCIsImlzQXJyYXkiLCJmaXJzdEtleSIsIm5leHQiLCJ2YWx1ZSIsImRlbGV0ZSIsImdldFBlcmZvcm1hbmNlU3RhdHMiLCJjYWNoZVNpemUiLCJjbGVhckNhY2hlIiwicHJlbG9hZENvbW1vblR5cGVzIiwiY29tbW9uVHlwZXMiLCJwcm9taXNlcyIsIm1hcCIsInR5cGUiLCJQcm9taXNlIiwiYWxsIiwiTWFwIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/shared/procgen/planet/planet-renderer.ts\n"));

/***/ })

});