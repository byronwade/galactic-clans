"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_src_components_generators_planet-generator_tsx",{

/***/ "(app-pages-browser)/./src/shared/procgen/planet/planet-renderer.ts":
/*!******************************************************!*\
  !*** ./src/shared/procgen/planet/planet-renderer.ts ***!
  \******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PlanetRenderer: () => (/* binding */ PlanetRenderer)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _planet_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./planet-types */ \"(app-pages-browser)/./src/shared/procgen/planet/planet-types.ts\");\n/**\n * @file planet-renderer.ts\n * @description Unified planet renderer with comprehensive planet type support\n * @version 5.0.0\n * @author Galactic Clans Development Team\n *\n * @purpose Renders scientifically accurate planets using the comprehensive planet type\n * system with enhanced visual features and performance optimizations.\n */ \n\n// Default configuration\nconst DEFAULT_CONFIG = {\n    radius: 3.0,\n    seed: Date.now(),\n    starDistance: 1.0,\n    starType: \"G\",\n    detailLevel: 2,\n    featureDensity: 0.7,\n    colorVariation: 0.8,\n    enableLOD: true,\n    maxFeatures: 50,\n    renderDistance: 100,\n    enableAtmosphere: true,\n    enableRings: true,\n    enableMoons: true,\n    enableSpecialEffects: true,\n    enableAdvancedLighting: true,\n    ambientIntensity: 0.4,\n    sunIntensity: 1.5\n};\nclass PlanetRenderer {\n    /**\n\t * Render a planet with the specified configuration\n\t */ async renderPlanetByType(planetClass) {\n        let config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const startTime = performance.now();\n        const finalConfig = {\n            ...DEFAULT_CONFIG,\n            ...config\n        };\n        // Get planet type definition\n        const planetType = (0,_planet_types__WEBPACK_IMPORTED_MODULE_0__.getPlanetTypeByClass)(planetClass);\n        if (!planetType) {\n            throw new Error(\"Unknown planet class: \".concat(planetClass));\n        }\n        // Check cache first\n        const cacheKey = this.generateCacheKey(finalConfig);\n        if (this.renderCache.has(cacheKey)) {\n            const cachedMesh = this.renderCache.get(cacheKey);\n            return this.createCachedResult(cachedMesh, finalConfig, startTime);\n        }\n        try {\n            // Generate planet mesh\n            const mesh = await this.generatePlanetMesh(planetType, finalConfig);\n            // Apply effects based on configuration\n            if (finalConfig.enableAtmosphere) {\n                this.addAtmosphere(mesh, planetType);\n            }\n            if (finalConfig.enableRings && planetType.features.rings) {\n                this.addRings(mesh, planetType);\n            }\n            if (finalConfig.enableMoons && planetType.features.moons > 0) {\n                this.addMoons(mesh, planetType);\n            }\n            if (finalConfig.enableSpecialEffects) {\n                this.addSpecialEffects(mesh, planetType);\n            }\n            if (finalConfig.enableAdvancedLighting) {\n                this.setupAdvancedLighting(mesh, finalConfig);\n            }\n            // Cache the result\n            this.renderCache.set(cacheKey, mesh);\n            // Calculate metadata\n            const metadata = this.calculateRenderMetadata(mesh, startTime);\n            return {\n                mesh,\n                config: finalConfig,\n                planetType,\n                statistics: {\n                    vertexCount: this.calculatePolyCount(mesh),\n                    featureCount: this.countFeatures(mesh)\n                },\n                metadata\n            };\n        } catch (error) {\n            console.error(\"Planet rendering failed:\", error);\n            return this.renderFallbackPlanet(finalConfig, startTime);\n        }\n    }\n    /**\n\t * Generate a simple planet mesh based on planet type\n\t */ async generatePlanetMesh(planetType, config) {\n        const group = new three__WEBPACK_IMPORTED_MODULE_1__.Group();\n        // Create basic sphere geometry\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(config.radius || 3.0, 32, 32);\n        // Create material based on planet type\n        const material = this.createPlanetMaterial(planetType, config);\n        // Create mesh\n        const mesh = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(geometry, material);\n        group.add(mesh);\n        // Add basic rotation\n        mesh.rotation.x = Math.PI * 0.1; // Slight tilt\n        return group;\n    }\n    /**\n\t * Create planet material based on type\n\t */ createPlanetMaterial(planetType, config) {\n        // Use primary colors from planet type\n        const primaryColor = planetType.primaryColors[0] || new three__WEBPACK_IMPORTED_MODULE_1__.Color(0x4a7c59);\n        // Create basic material\n        const material = new three__WEBPACK_IMPORTED_MODULE_1__.MeshLambertMaterial({\n            color: primaryColor,\n            emissive: new three__WEBPACK_IMPORTED_MODULE_1__.Color(0x111111),\n            emissiveIntensity: 0.1\n        });\n        return material;\n    }\n    /**\n\t * Get radius from mesh geometry\n\t */ getMeshRadius(mesh) {\n        const firstMesh = mesh.children[0];\n        if (firstMesh && firstMesh.geometry instanceof three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry) {\n            return firstMesh.geometry.parameters.radius;\n        }\n        return 3.0; // Default radius\n    }\n    /**\n\t * Add atmosphere effect\n\t */ addAtmosphere(mesh, planetType) {\n        if (!planetType.features.clouds) return;\n        const radius = this.getMeshRadius(mesh);\n        const atmosphereGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(radius * 1.1, 32, 32);\n        const atmosphereMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0x87ceeb,\n            transparent: true,\n            opacity: 0.3,\n            side: three__WEBPACK_IMPORTED_MODULE_1__.BackSide\n        });\n        const atmosphere = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(atmosphereGeometry, atmosphereMaterial);\n        mesh.add(atmosphere);\n    }\n    /**\n\t * Add ring system\n\t */ addRings(mesh, planetType) {\n        const radius = this.getMeshRadius(mesh);\n        const ringGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.RingGeometry(radius * 1.5, radius * 2.5, 64);\n        const ringMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0xcccccc,\n            transparent: true,\n            opacity: 0.6,\n            side: three__WEBPACK_IMPORTED_MODULE_1__.DoubleSide\n        });\n        const rings = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(ringGeometry, ringMaterial);\n        rings.rotation.x = Math.PI * 0.5; // Rotate to be horizontal\n        mesh.add(rings);\n    }\n    /**\n\t * Add moons\n\t */ addMoons(mesh, planetType) {\n        const moonCount = Math.min(planetType.features.moons, 3); // Limit to 3 for performance\n        for(let i = 0; i < moonCount; i++){\n            const moonGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(0.3, 16, 16);\n            const moonMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshLambertMaterial({\n                color: 0x888888\n            });\n            const moon = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(moonGeometry, moonMaterial);\n            // Position moons in orbit\n            const angle = i / moonCount * Math.PI * 2;\n            const distance = 4 + i * 0.5;\n            moon.position.set(Math.cos(angle) * distance, Math.sin(angle) * distance * 0.3, Math.sin(angle) * distance * 0.7);\n            mesh.add(moon);\n        }\n    }\n    /**\n\t * Add special effects based on planet type\n\t */ addSpecialEffects(mesh, planetType) {\n        // Add lava particles for lava worlds\n        if (planetType.class === _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.LAVA_WORLD) {\n            this.addLavaParticles(mesh);\n        }\n        // Add ice shimmers for ice giants\n        if (planetType.class === _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.ICE_GIANT) {\n            this.addIceShimmers(mesh);\n        }\n        // Add aurora for planets with magnetosphere\n        if (planetType.features.aurorae) {\n            this.addAuroraEffect(mesh);\n        }\n    }\n    /**\n\t * Add lava particle effect\n\t */ addLavaParticles(mesh) {\n        const particleCount = 50;\n        const particles = new three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry();\n        const positions = new Float32Array(particleCount * 3);\n        for(let i = 0; i < particleCount * 3; i += 3){\n            positions[i] = (Math.random() - 0.5) * 6;\n            positions[i + 1] = (Math.random() - 0.5) * 6;\n            positions[i + 2] = (Math.random() - 0.5) * 6;\n        }\n        particles.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_1__.BufferAttribute(positions, 3));\n        const particleMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.PointsMaterial({\n            color: 0xff4500,\n            size: 0.1,\n            transparent: true,\n            opacity: 0.8\n        });\n        const particleSystem = new three__WEBPACK_IMPORTED_MODULE_1__.Points(particles, particleMaterial);\n        mesh.add(particleSystem);\n    }\n    /**\n\t * Add ice shimmer effect\n\t */ addIceShimmers(mesh) {\n        const radius = this.getMeshRadius(mesh);\n        const shimmerGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(radius * 1.05, 32, 32);\n        const shimmerMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0x87ceeb,\n            transparent: true,\n            opacity: 0.2,\n            side: three__WEBPACK_IMPORTED_MODULE_1__.BackSide\n        });\n        const shimmer = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(shimmerGeometry, shimmerMaterial);\n        mesh.add(shimmer);\n    }\n    /**\n\t * Add aurora effect\n\t */ addAuroraEffect(mesh) {\n        const auroraGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(mesh.children[0].geometry.parameters.radius * 1.2, 32, 32);\n        const auroraMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0x00ff00,\n            transparent: true,\n            opacity: 0.1,\n            side: three__WEBPACK_IMPORTED_MODULE_1__.BackSide\n        });\n        const aurora = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(auroraGeometry, auroraMaterial);\n        mesh.add(aurora);\n    }\n    /**\n\t * Setup advanced lighting\n\t */ setupAdvancedLighting(mesh, config) {\n        // Add ambient light\n        const ambientLight = new three__WEBPACK_IMPORTED_MODULE_1__.AmbientLight(0x404040, config.ambientIntensity || 0.4);\n        mesh.add(ambientLight);\n        // Add directional light (sun)\n        const sunLight = new three__WEBPACK_IMPORTED_MODULE_1__.DirectionalLight(0xffffff, config.sunIntensity || 1.5);\n        sunLight.position.set(10, 10, 5);\n        mesh.add(sunLight);\n    }\n    /**\n\t * Get available planet types\n\t */ getAvailablePlanetTypes() {\n        return Array.from(_planet_types__WEBPACK_IMPORTED_MODULE_0__.PLANET_TYPES.keys());\n    }\n    /**\n\t * Get planet type information\n\t */ getPlanetTypeInfo(planetClass) {\n        return (0,_planet_types__WEBPACK_IMPORTED_MODULE_0__.getPlanetTypeByClass)(planetClass);\n    }\n    /**\n\t * Update quality settings\n\t */ updateQuality(qualityLevel) {\n        // Adjust detail level based on quality\n        const detailLevel = Math.max(1, Math.min(5, qualityLevel));\n        // Clear cache to force regeneration with new quality\n        this.clearCache();\n        console.log(\"\\uD83C\\uDF0D [PLANET] Quality updated to level \".concat(detailLevel));\n    }\n    /**\n\t * Dispose of resources\n\t */ dispose() {\n        if (this.isDisposed) return;\n        // Clear cache\n        this.clearCache();\n        this.isDisposed = true;\n        console.log(\"🌍 [PLANET] Renderer disposed\");\n    }\n    /**\n\t * Generate cache key for configuration\n\t */ generateCacheKey(config) {\n        return \"\".concat(config.planetClass, \"-\").concat(config.radius, \"-\").concat(config.seed, \"-\").concat(config.detailLevel);\n    }\n    /**\n\t * Create cached result\n\t */ createCachedResult(mesh, config, startTime) {\n        const planetType = (0,_planet_types__WEBPACK_IMPORTED_MODULE_0__.getPlanetTypeByClass)(config.planetClass || _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.TERRESTRIAL);\n        const metadata = this.calculateRenderMetadata(mesh, startTime);\n        return {\n            mesh: mesh.clone(),\n            config,\n            planetType,\n            statistics: {\n                vertexCount: this.calculatePolyCount(mesh),\n                featureCount: this.countFeatures(mesh)\n            },\n            metadata\n        };\n    }\n    /**\n\t * Calculate render metadata\n\t */ calculateRenderMetadata(mesh, startTime) {\n        const renderTime = performance.now() - startTime;\n        const polyCount = this.calculatePolyCount(mesh);\n        const featureCount = this.countFeatures(mesh);\n        return {\n            renderTime,\n            polyCount,\n            textureCount: 1,\n            featureCount,\n            memoryUsage: polyCount * 32,\n            qualityLevel: this.determineQualityLevel(polyCount, 1)\n        };\n    }\n    /**\n\t * Calculate polygon count\n\t */ calculatePolyCount(mesh) {\n        let count = 0;\n        mesh.traverse((child)=>{\n            if (child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh && child.geometry) {\n                const geometry = child.geometry;\n                if (geometry.attributes.position) {\n                    count += geometry.attributes.position.count / 3;\n                }\n            }\n        });\n        return count;\n    }\n    /**\n\t * Count features in mesh\n\t */ countFeatures(mesh) {\n        let count = 0;\n        mesh.traverse((child)=>{\n            if (child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh) {\n                count++;\n            }\n        });\n        return count;\n    }\n    /**\n\t * Determine quality level\n\t */ determineQualityLevel(polyCount, textureCount) {\n        if (polyCount > 10000) return \"Ultra\";\n        if (polyCount > 5000) return \"High\";\n        if (polyCount > 2000) return \"Medium\";\n        return \"Low\";\n    }\n    /**\n\t * Render fallback planet\n\t */ renderFallbackPlanet(config, startTime) {\n        console.warn(\"🌍 [PLANET] Using fallback planet renderer\");\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(config.radius || 3.0, 16, 16);\n        const material = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0x808080\n        });\n        const mesh = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(geometry, material);\n        const group = new three__WEBPACK_IMPORTED_MODULE_1__.Group();\n        group.add(mesh);\n        const planetType = (0,_planet_types__WEBPACK_IMPORTED_MODULE_0__.getPlanetTypeByClass)(_planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.TERRESTRIAL);\n        const metadata = this.calculateRenderMetadata(group, startTime);\n        return {\n            mesh: group,\n            config,\n            planetType,\n            statistics: {\n                vertexCount: 256,\n                featureCount: 1\n            },\n            metadata\n        };\n    }\n    /**\n\t * Get performance statistics\n\t */ getPerformanceStats() {\n        return {\n            lastRenderTime: this.lastRenderTime,\n            cacheSize: this.renderCache.size\n        };\n    }\n    /**\n\t * Clear render cache\n\t */ clearCache() {\n        this.renderCache.forEach((mesh)=>{\n            this.disposeMesh(mesh);\n        });\n        this.renderCache.clear();\n        console.log(\"🌍 [PLANET] Cache cleared\");\n    }\n    /**\n\t * Dispose of mesh resources\n\t */ disposeMesh(object) {\n        object.traverse((child)=>{\n            if (child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh) {\n                if (child.geometry) {\n                    child.geometry.dispose();\n                }\n                if (child.material) {\n                    if (Array.isArray(child.material)) {\n                        child.material.forEach((material)=>material.dispose());\n                    } else {\n                        child.material.dispose();\n                    }\n                }\n            }\n        });\n    }\n    /**\n\t * Preload common planet types\n\t */ async preloadCommonTypes() {\n        const commonTypes = [\n            _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.TERRESTRIAL,\n            _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.GAS_GIANT,\n            _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.ICE_GIANT\n        ];\n        console.log(\"🌍 [PLANET] Preloading common planet types...\");\n        for (const planetClass of commonTypes){\n            try {\n                await this.renderPlanetByType(planetClass, {\n                    detailLevel: 1\n                });\n            } catch (error) {\n                console.warn(\"\\uD83C\\uDF0D [PLANET] Failed to preload \".concat(planetClass, \":\"), error);\n            }\n        }\n        console.log(\"🌍 [PLANET] Preloading complete\");\n    }\n    constructor(){\n        this.isDisposed = false;\n        this.renderCache = new Map();\n        this.lastRenderTime = 0;\n    // Initialize renderer\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zaGFyZWQvcHJvY2dlbi9wbGFuZXQvcGxhbmV0LXJlbmRlcmVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Ozs7OztDQVFDLEdBRThCO0FBQ2tGO0FBb0NqSCx3QkFBd0I7QUFDeEIsTUFBTUksaUJBQXFDO0lBQzFDQyxRQUFRO0lBQ1JDLE1BQU1DLEtBQUtDLEdBQUc7SUFDZEMsY0FBYztJQUNkQyxVQUFVO0lBQ1ZDLGFBQWE7SUFDYkMsZ0JBQWdCO0lBQ2hCQyxnQkFBZ0I7SUFDaEJDLFdBQVc7SUFDWEMsYUFBYTtJQUNiQyxnQkFBZ0I7SUFDaEJDLGtCQUFrQjtJQUNsQkMsYUFBYTtJQUNiQyxhQUFhO0lBQ2JDLHNCQUFzQjtJQUN0QkMsd0JBQXdCO0lBQ3hCQyxrQkFBa0I7SUFDbEJDLGNBQWM7QUFDZjtBQXFCTyxNQUFNQztJQVNaOztFQUVDLEdBQ0QsTUFBYUMsbUJBQW1CQyxXQUF3QixFQUFnRTtZQUE5REMsU0FBQUEsaUVBQTZCLENBQUM7UUFDdkYsTUFBTUMsWUFBWUMsWUFBWXJCLEdBQUc7UUFDakMsTUFBTXNCLGNBQWM7WUFBRSxHQUFHMUIsY0FBYztZQUFFLEdBQUd1QixNQUFNO1FBQUM7UUFFbkQsNkJBQTZCO1FBQzdCLE1BQU1JLGFBQWE3QixtRUFBb0JBLENBQUN3QjtRQUN4QyxJQUFJLENBQUNLLFlBQVk7WUFDaEIsTUFBTSxJQUFJQyxNQUFNLHlCQUFxQyxPQUFaTjtRQUMxQztRQUVBLG9CQUFvQjtRQUNwQixNQUFNTyxXQUFXLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNKO1FBQ3ZDLElBQUksSUFBSSxDQUFDSyxXQUFXLENBQUNDLEdBQUcsQ0FBQ0gsV0FBVztZQUNuQyxNQUFNSSxhQUFhLElBQUksQ0FBQ0YsV0FBVyxDQUFDRyxHQUFHLENBQUNMO1lBQ3hDLE9BQU8sSUFBSSxDQUFDTSxrQkFBa0IsQ0FBQ0YsWUFBWVAsYUFBYUY7UUFDekQ7UUFFQSxJQUFJO1lBQ0gsdUJBQXVCO1lB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TUFBTXpILGVBQWVpSixZQUFhO1lBQ3RDLElBQUk7Z0JBQ0gsTUFBTSxJQUFJLENBQUNsSixrQkFBa0IsQ0FBQ0MsYUFBYTtvQkFBRWYsYUFBYTtnQkFBRTtZQUM3RCxFQUFFLE9BQU8rQyxPQUFPO2dCQUNmQyxRQUFRc0csSUFBSSxDQUFDLDJDQUE2QyxPQUFadkksYUFBWSxNQUFJZ0M7WUFDL0Q7UUFDRDtRQUVBQyxRQUFRd0YsR0FBRyxDQUFDO0lBQ2I7SUFwZUEsYUFBYzthQUpORSxhQUFzQjthQUN0QmxILGNBQXdDLElBQUkwSTthQUM1Q1YsaUJBQXlCO0lBR2hDLHNCQUFzQjtJQUN2QjtBQW1lRCIsInNvdXJjZXMiOlsiL1VzZXJzL2J5cm9ud2FkZS9jb3NtaWMvc3JjL3NoYXJlZC9wcm9jZ2VuL3BsYW5ldC9wbGFuZXQtcmVuZGVyZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBwbGFuZXQtcmVuZGVyZXIudHNcbiAqIEBkZXNjcmlwdGlvbiBVbmlmaWVkIHBsYW5ldCByZW5kZXJlciB3aXRoIGNvbXByZWhlbnNpdmUgcGxhbmV0IHR5cGUgc3VwcG9ydFxuICogQHZlcnNpb24gNS4wLjBcbiAqIEBhdXRob3IgR2FsYWN0aWMgQ2xhbnMgRGV2ZWxvcG1lbnQgVGVhbVxuICpcbiAqIEBwdXJwb3NlIFJlbmRlcnMgc2NpZW50aWZpY2FsbHkgYWNjdXJhdGUgcGxhbmV0cyB1c2luZyB0aGUgY29tcHJlaGVuc2l2ZSBwbGFuZXQgdHlwZVxuICogc3lzdGVtIHdpdGggZW5oYW5jZWQgdmlzdWFsIGZlYXR1cmVzIGFuZCBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25zLlxuICovXG5cbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgUGxhbmV0Q2xhc3MsIEJpb21lVHlwZSwgZ2V0UGxhbmV0VHlwZUJ5Q2xhc3MsIGdldFJhbmRvbVBsYW5ldFR5cGUsIFBMQU5FVF9UWVBFUyB9IGZyb20gXCIuL3BsYW5ldC10eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBQbGFuZXRUeXBlRGVmaW5pdGlvbiB9IGZyb20gXCIuL3BsYW5ldC10eXBlc1wiO1xuXG4vLyBQbGFuZXQgUmVuZGVyaW5nIENvbmZpZ3VyYXRpb25cbmV4cG9ydCBpbnRlcmZhY2UgUGxhbmV0UmVuZGVyQ29uZmlnIHtcblx0Ly8gQmFzaWMgUHJvcGVydGllc1xuXHRwbGFuZXRDbGFzcz86IFBsYW5ldENsYXNzO1xuXHRyYWRpdXM/OiBudW1iZXI7XG5cdHNlZWQ/OiBudW1iZXI7XG5cblx0Ly8gT3JiaXRhbCBQcm9wZXJ0aWVzXG5cdHN0YXJEaXN0YW5jZT86IG51bWJlcjtcblx0c3RhclR5cGU/OiBzdHJpbmc7XG5cblx0Ly8gVmlzdWFsIFF1YWxpdHlcblx0ZGV0YWlsTGV2ZWw/OiBudW1iZXI7XG5cdGZlYXR1cmVEZW5zaXR5PzogbnVtYmVyO1xuXHRjb2xvclZhcmlhdGlvbj86IG51bWJlcjtcblxuXHQvLyBQZXJmb3JtYW5jZSBPcHRpb25zXG5cdGVuYWJsZUxPRD86IGJvb2xlYW47XG5cdG1heEZlYXR1cmVzPzogbnVtYmVyO1xuXHRyZW5kZXJEaXN0YW5jZT86IG51bWJlcjtcblxuXHQvLyBTcGVjaWFsIEZlYXR1cmVzXG5cdGVuYWJsZUF0bW9zcGhlcmU/OiBib29sZWFuO1xuXHRlbmFibGVSaW5ncz86IGJvb2xlYW47XG5cdGVuYWJsZU1vb25zPzogYm9vbGVhbjtcblx0ZW5hYmxlU3BlY2lhbEVmZmVjdHM/OiBib29sZWFuO1xuXG5cdC8vIExpZ2h0aW5nXG5cdGVuYWJsZUFkdmFuY2VkTGlnaHRpbmc/OiBib29sZWFuO1xuXHRhbWJpZW50SW50ZW5zaXR5PzogbnVtYmVyO1xuXHRzdW5JbnRlbnNpdHk/OiBudW1iZXI7XG59XG5cbi8vIERlZmF1bHQgY29uZmlndXJhdGlvblxuY29uc3QgREVGQVVMVF9DT05GSUc6IFBsYW5ldFJlbmRlckNvbmZpZyA9IHtcblx0cmFkaXVzOiAzLjAsXG5cdHNlZWQ6IERhdGUubm93KCksXG5cdHN0YXJEaXN0YW5jZTogMS4wLFxuXHRzdGFyVHlwZTogXCJHXCIsXG5cdGRldGFpbExldmVsOiAyLFxuXHRmZWF0dXJlRGVuc2l0eTogMC43LFxuXHRjb2xvclZhcmlhdGlvbjogMC44LFxuXHRlbmFibGVMT0Q6IHRydWUsXG5cdG1heEZlYXR1cmVzOiA1MCxcblx0cmVuZGVyRGlzdGFuY2U6IDEwMCxcblx0ZW5hYmxlQXRtb3NwaGVyZTogdHJ1ZSxcblx0ZW5hYmxlUmluZ3M6IHRydWUsXG5cdGVuYWJsZU1vb25zOiB0cnVlLFxuXHRlbmFibGVTcGVjaWFsRWZmZWN0czogdHJ1ZSxcblx0ZW5hYmxlQWR2YW5jZWRMaWdodGluZzogdHJ1ZSxcblx0YW1iaWVudEludGVuc2l0eTogMC40LFxuXHRzdW5JbnRlbnNpdHk6IDEuNSxcbn07XG5cbi8vIFBsYW5ldCBSZW5kZXIgUmVzdWx0XG5leHBvcnQgaW50ZXJmYWNlIFBsYW5ldFJlbmRlclJlc3VsdCB7XG5cdG1lc2g6IFRIUkVFLkdyb3VwO1xuXHRjb25maWc6IFBsYW5ldFJlbmRlckNvbmZpZztcblx0cGxhbmV0VHlwZTogUGxhbmV0VHlwZURlZmluaXRpb247XG5cdHN0YXRpc3RpY3M6IGFueTtcblx0bWV0YWRhdGE6IFBsYW5ldFJlbmRlck1ldGFkYXRhO1xufVxuXG4vLyBSZW5kZXIgTWV0YWRhdGFcbmV4cG9ydCBpbnRlcmZhY2UgUGxhbmV0UmVuZGVyTWV0YWRhdGEge1xuXHRyZW5kZXJUaW1lOiBudW1iZXI7XG5cdHBvbHlDb3VudDogbnVtYmVyO1xuXHR0ZXh0dXJlQ291bnQ6IG51bWJlcjtcblx0ZmVhdHVyZUNvdW50OiBudW1iZXI7XG5cdG1lbW9yeVVzYWdlOiBudW1iZXI7XG5cdHF1YWxpdHlMZXZlbDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgUGxhbmV0UmVuZGVyZXIge1xuXHRwcml2YXRlIGlzRGlzcG9zZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblx0cHJpdmF0ZSByZW5kZXJDYWNoZTogTWFwPHN0cmluZywgVEhSRUUuR3JvdXA+ID0gbmV3IE1hcCgpO1xuXHRwcml2YXRlIGxhc3RSZW5kZXJUaW1lOiBudW1iZXIgPSAwO1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdC8vIEluaXRpYWxpemUgcmVuZGVyZXJcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW5kZXIgYSBwbGFuZXQgd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZ3VyYXRpb25cblx0ICovXG5cdHB1YmxpYyBhc3luYyByZW5kZXJQbGFuZXRCeVR5cGUocGxhbmV0Q2xhc3M6IFBsYW5ldENsYXNzLCBjb25maWc6IFBsYW5ldFJlbmRlckNvbmZpZyA9IHt9KTogUHJvbWlzZTxQbGFuZXRSZW5kZXJSZXN1bHQ+IHtcblx0XHRjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcblx0XHRjb25zdCBmaW5hbENvbmZpZyA9IHsgLi4uREVGQVVMVF9DT05GSUcsIC4uLmNvbmZpZyB9O1xuXG5cdFx0Ly8gR2V0IHBsYW5ldCB0eXBlIGRlZmluaXRpb25cblx0XHRjb25zdCBwbGFuZXRUeXBlID0gZ2V0UGxhbmV0VHlwZUJ5Q2xhc3MocGxhbmV0Q2xhc3MpO1xuXHRcdGlmICghcGxhbmV0VHlwZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHBsYW5ldCBjbGFzczogJHtwbGFuZXRDbGFzc31gKTtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBjYWNoZSBmaXJzdFxuXHRcdGNvbnN0IGNhY2hlS2V5ID0gdGhpcy5nZW5lcmF0ZUNhY2hlS2V5KGZpbmFsQ29uZmlnKTtcblx0XHRpZiAodGhpcy5yZW5kZXJDYWNoZS5oYXMoY2FjaGVLZXkpKSB7XG5cdFx0XHRjb25zdCBjYWNoZWRNZXNoID0gdGhpcy5yZW5kZXJDYWNoZS5nZXQoY2FjaGVLZXkpITtcblx0XHRcdHJldHVybiB0aGlzLmNyZWF0ZUNhY2hlZFJlc3VsdChjYWNoZWRNZXNoLCBmaW5hbENvbmZpZywgc3RhcnRUaW1lKTtcblx0XHR9XG5cblx0XHR0cnkge1xuXHRcdFx0Ly8gR2VuZXJhdGUgcGxhbmV0IG1lc2hcblx0XHRcdGNvbnN0IG1lc2ggPSBhd2FpdCB0aGlzLmdlbmVyYXRlUGxhbmV0TWVzaChwbGFuZXRUeXBlLCBmaW5hbENvbmZpZyk7XG5cblx0XHRcdC8vIEFwcGx5IGVmZmVjdHMgYmFzZWQgb24gY29uZmlndXJhdGlvblxuXHRcdFx0aWYgKGZpbmFsQ29uZmlnLmVuYWJsZUF0bW9zcGhlcmUpIHtcblx0XHRcdFx0dGhpcy5hZGRBdG1vc3BoZXJlKG1lc2gsIHBsYW5ldFR5cGUpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZmluYWxDb25maWcuZW5hYmxlUmluZ3MgJiYgcGxhbmV0VHlwZS5mZWF0dXJlcy5yaW5ncykge1xuXHRcdFx0XHR0aGlzLmFkZFJpbmdzKG1lc2gsIHBsYW5ldFR5cGUpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZmluYWxDb25maWcuZW5hYmxlTW9vbnMgJiYgcGxhbmV0VHlwZS5mZWF0dXJlcy5tb29ucyA+IDApIHtcblx0XHRcdFx0dGhpcy5hZGRNb29ucyhtZXNoLCBwbGFuZXRUeXBlKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGZpbmFsQ29uZmlnLmVuYWJsZVNwZWNpYWxFZmZlY3RzKSB7XG5cdFx0XHRcdHRoaXMuYWRkU3BlY2lhbEVmZmVjdHMobWVzaCwgcGxhbmV0VHlwZSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChmaW5hbENvbmZpZy5lbmFibGVBZHZhbmNlZExpZ2h0aW5nKSB7XG5cdFx0XHRcdHRoaXMuc2V0dXBBZHZhbmNlZExpZ2h0aW5nKG1lc2gsIGZpbmFsQ29uZmlnKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHJlc3VsdFxuXHRcdFx0dGhpcy5yZW5kZXJDYWNoZS5zZXQoY2FjaGVLZXksIG1lc2gpO1xuXG5cdFx0XHQvLyBDYWxjdWxhdGUgbWV0YWRhdGFcblx0XHRcdGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jYWxjdWxhdGVSZW5kZXJNZXRhZGF0YShtZXNoLCBzdGFydFRpbWUpO1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRtZXNoLFxuXHRcdFx0XHRjb25maWc6IGZpbmFsQ29uZmlnLFxuXHRcdFx0XHRwbGFuZXRUeXBlLFxuXHRcdFx0XHRzdGF0aXN0aWNzOiB7XG5cdFx0XHRcdFx0dmVydGV4Q291bnQ6IHRoaXMuY2FsY3VsYXRlUG9seUNvdW50KG1lc2gpLFxuXHRcdFx0XHRcdGZlYXR1cmVDb3VudDogdGhpcy5jb3VudEZlYXR1cmVzKG1lc2gpLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRtZXRhZGF0YSxcblx0XHRcdH07XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJQbGFuZXQgcmVuZGVyaW5nIGZhaWxlZDpcIiwgZXJyb3IpO1xuXHRcdFx0cmV0dXJuIHRoaXMucmVuZGVyRmFsbGJhY2tQbGFuZXQoZmluYWxDb25maWcsIHN0YXJ0VGltZSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlIGEgc2ltcGxlIHBsYW5ldCBtZXNoIGJhc2VkIG9uIHBsYW5ldCB0eXBlXG5cdCAqL1xuXHRwcml2YXRlIGFzeW5jIGdlbmVyYXRlUGxhbmV0TWVzaChwbGFuZXRUeXBlOiBQbGFuZXRUeXBlRGVmaW5pdGlvbiwgY29uZmlnOiBQbGFuZXRSZW5kZXJDb25maWcpOiBQcm9taXNlPFRIUkVFLkdyb3VwPiB7XG5cdFx0Y29uc3QgZ3JvdXAgPSBuZXcgVEhSRUUuR3JvdXAoKTtcblxuXHRcdC8vIENyZWF0ZSBiYXNpYyBzcGhlcmUgZ2VvbWV0cnlcblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShjb25maWcucmFkaXVzIHx8IDMuMCwgMzIsIDMyKTtcblxuXHRcdC8vIENyZWF0ZSBtYXRlcmlhbCBiYXNlZCBvbiBwbGFuZXQgdHlwZVxuXHRcdGNvbnN0IG1hdGVyaWFsID0gdGhpcy5jcmVhdGVQbGFuZXRNYXRlcmlhbChwbGFuZXRUeXBlLCBjb25maWcpO1xuXG5cdFx0Ly8gQ3JlYXRlIG1lc2hcblx0XHRjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcblx0XHRncm91cC5hZGQobWVzaCk7XG5cblx0XHQvLyBBZGQgYmFzaWMgcm90YXRpb25cblx0XHRtZXNoLnJvdGF0aW9uLnggPSBNYXRoLlBJICogMC4xOyAvLyBTbGlnaHQgdGlsdFxuXG5cdFx0cmV0dXJuIGdyb3VwO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZSBwbGFuZXQgbWF0ZXJpYWwgYmFzZWQgb24gdHlwZVxuXHQgKi9cblx0cHJpdmF0ZSBjcmVhdGVQbGFuZXRNYXRlcmlhbChwbGFuZXRUeXBlOiBQbGFuZXRUeXBlRGVmaW5pdGlvbiwgY29uZmlnOiBQbGFuZXRSZW5kZXJDb25maWcpOiBUSFJFRS5NYXRlcmlhbCB7XG5cdFx0Ly8gVXNlIHByaW1hcnkgY29sb3JzIGZyb20gcGxhbmV0IHR5cGVcblx0XHRjb25zdCBwcmltYXJ5Q29sb3IgPSBwbGFuZXRUeXBlLnByaW1hcnlDb2xvcnNbMF0gfHwgbmV3IFRIUkVFLkNvbG9yKDB4NGE3YzU5KTtcblxuXHRcdC8vIENyZWF0ZSBiYXNpYyBtYXRlcmlhbFxuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoe1xuXHRcdFx0Y29sb3I6IHByaW1hcnlDb2xvcixcblx0XHRcdGVtaXNzaXZlOiBuZXcgVEhSRUUuQ29sb3IoMHgxMTExMTEpLFxuXHRcdFx0ZW1pc3NpdmVJbnRlbnNpdHk6IDAuMSxcblx0XHR9KTtcblxuXHRcdHJldHVybiBtYXRlcmlhbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgcmFkaXVzIGZyb20gbWVzaCBnZW9tZXRyeVxuXHQgKi9cblx0cHJpdmF0ZSBnZXRNZXNoUmFkaXVzKG1lc2g6IFRIUkVFLkdyb3VwKTogbnVtYmVyIHtcblx0XHRjb25zdCBmaXJzdE1lc2ggPSBtZXNoLmNoaWxkcmVuWzBdIGFzIFRIUkVFLk1lc2g7XG5cdFx0aWYgKGZpcnN0TWVzaCAmJiBmaXJzdE1lc2guZ2VvbWV0cnkgaW5zdGFuY2VvZiBUSFJFRS5TcGhlcmVHZW9tZXRyeSkge1xuXHRcdFx0cmV0dXJuIChmaXJzdE1lc2guZ2VvbWV0cnkgYXMgVEhSRUUuU3BoZXJlR2VvbWV0cnkpLnBhcmFtZXRlcnMucmFkaXVzO1xuXHRcdH1cblx0XHRyZXR1cm4gMy4wOyAvLyBEZWZhdWx0IHJhZGl1c1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZCBhdG1vc3BoZXJlIGVmZmVjdFxuXHQgKi9cblx0cHJpdmF0ZSBhZGRBdG1vc3BoZXJlKG1lc2g6IFRIUkVFLkdyb3VwLCBwbGFuZXRUeXBlOiBQbGFuZXRUeXBlRGVmaW5pdGlvbik6IHZvaWQge1xuXHRcdGlmICghcGxhbmV0VHlwZS5mZWF0dXJlcy5jbG91ZHMpIHJldHVybjtcblxuXHRcdGNvbnN0IHJhZGl1cyA9IHRoaXMuZ2V0TWVzaFJhZGl1cyhtZXNoKTtcblx0XHRjb25zdCBhdG1vc3BoZXJlR2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkocmFkaXVzICogMS4xLCAzMiwgMzIpO1xuXG5cdFx0Y29uc3QgYXRtb3NwaGVyZU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcblx0XHRcdGNvbG9yOiAweDg3Y2VlYixcblx0XHRcdHRyYW5zcGFyZW50OiB0cnVlLFxuXHRcdFx0b3BhY2l0eTogMC4zLFxuXHRcdFx0c2lkZTogVEhSRUUuQmFja1NpZGUsXG5cdFx0fSk7XG5cblx0XHRjb25zdCBhdG1vc3BoZXJlID0gbmV3IFRIUkVFLk1lc2goYXRtb3NwaGVyZUdlb21ldHJ5LCBhdG1vc3BoZXJlTWF0ZXJpYWwpO1xuXHRcdG1lc2guYWRkKGF0bW9zcGhlcmUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZCByaW5nIHN5c3RlbVxuXHQgKi9cblx0cHJpdmF0ZSBhZGRSaW5ncyhtZXNoOiBUSFJFRS5Hcm91cCwgcGxhbmV0VHlwZTogUGxhbmV0VHlwZURlZmluaXRpb24pOiB2b2lkIHtcblx0XHRjb25zdCByYWRpdXMgPSB0aGlzLmdldE1lc2hSYWRpdXMobWVzaCk7XG5cdFx0Y29uc3QgcmluZ0dlb21ldHJ5ID0gbmV3IFRIUkVFLlJpbmdHZW9tZXRyeShyYWRpdXMgKiAxLjUsIHJhZGl1cyAqIDIuNSwgNjQpO1xuXG5cdFx0Y29uc3QgcmluZ01hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcblx0XHRcdGNvbG9yOiAweGNjY2NjYyxcblx0XHRcdHRyYW5zcGFyZW50OiB0cnVlLFxuXHRcdFx0b3BhY2l0eTogMC42LFxuXHRcdFx0c2lkZTogVEhSRUUuRG91YmxlU2lkZSxcblx0XHR9KTtcblxuXHRcdGNvbnN0IHJpbmdzID0gbmV3IFRIUkVFLk1lc2gocmluZ0dlb21ldHJ5LCByaW5nTWF0ZXJpYWwpO1xuXHRcdHJpbmdzLnJvdGF0aW9uLnggPSBNYXRoLlBJICogMC41OyAvLyBSb3RhdGUgdG8gYmUgaG9yaXpvbnRhbFxuXHRcdG1lc2guYWRkKHJpbmdzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGQgbW9vbnNcblx0ICovXG5cdHByaXZhdGUgYWRkTW9vbnMobWVzaDogVEhSRUUuR3JvdXAsIHBsYW5ldFR5cGU6IFBsYW5ldFR5cGVEZWZpbml0aW9uKTogdm9pZCB7XG5cdFx0Y29uc3QgbW9vbkNvdW50ID0gTWF0aC5taW4ocGxhbmV0VHlwZS5mZWF0dXJlcy5tb29ucywgMyk7IC8vIExpbWl0IHRvIDMgZm9yIHBlcmZvcm1hbmNlXG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG1vb25Db3VudDsgaSsrKSB7XG5cdFx0XHRjb25zdCBtb29uR2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoMC4zLCAxNiwgMTYpO1xuXHRcdFx0Y29uc3QgbW9vbk1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoe1xuXHRcdFx0XHRjb2xvcjogMHg4ODg4ODgsXG5cdFx0XHR9KTtcblxuXHRcdFx0Y29uc3QgbW9vbiA9IG5ldyBUSFJFRS5NZXNoKG1vb25HZW9tZXRyeSwgbW9vbk1hdGVyaWFsKTtcblxuXHRcdFx0Ly8gUG9zaXRpb24gbW9vbnMgaW4gb3JiaXRcblx0XHRcdGNvbnN0IGFuZ2xlID0gKGkgLyBtb29uQ291bnQpICogTWF0aC5QSSAqIDI7XG5cdFx0XHRjb25zdCBkaXN0YW5jZSA9IDQgKyBpICogMC41O1xuXHRcdFx0bW9vbi5wb3NpdGlvbi5zZXQoTWF0aC5jb3MoYW5nbGUpICogZGlzdGFuY2UsIE1hdGguc2luKGFuZ2xlKSAqIGRpc3RhbmNlICogMC4zLCBNYXRoLnNpbihhbmdsZSkgKiBkaXN0YW5jZSAqIDAuNyk7XG5cblx0XHRcdG1lc2guYWRkKG1vb24pO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGQgc3BlY2lhbCBlZmZlY3RzIGJhc2VkIG9uIHBsYW5ldCB0eXBlXG5cdCAqL1xuXHRwcml2YXRlIGFkZFNwZWNpYWxFZmZlY3RzKG1lc2g6IFRIUkVFLkdyb3VwLCBwbGFuZXRUeXBlOiBQbGFuZXRUeXBlRGVmaW5pdGlvbik6IHZvaWQge1xuXHRcdC8vIEFkZCBsYXZhIHBhcnRpY2xlcyBmb3IgbGF2YSB3b3JsZHNcblx0XHRpZiAocGxhbmV0VHlwZS5jbGFzcyA9PT0gUGxhbmV0Q2xhc3MuTEFWQV9XT1JMRCkge1xuXHRcdFx0dGhpcy5hZGRMYXZhUGFydGljbGVzKG1lc2gpO1xuXHRcdH1cblxuXHRcdC8vIEFkZCBpY2Ugc2hpbW1lcnMgZm9yIGljZSBnaWFudHNcblx0XHRpZiAocGxhbmV0VHlwZS5jbGFzcyA9PT0gUGxhbmV0Q2xhc3MuSUNFX0dJQU5UKSB7XG5cdFx0XHR0aGlzLmFkZEljZVNoaW1tZXJzKG1lc2gpO1xuXHRcdH1cblxuXHRcdC8vIEFkZCBhdXJvcmEgZm9yIHBsYW5ldHMgd2l0aCBtYWduZXRvc3BoZXJlXG5cdFx0aWYgKHBsYW5ldFR5cGUuZmVhdHVyZXMuYXVyb3JhZSkge1xuXHRcdFx0dGhpcy5hZGRBdXJvcmFFZmZlY3QobWVzaCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZCBsYXZhIHBhcnRpY2xlIGVmZmVjdFxuXHQgKi9cblx0cHJpdmF0ZSBhZGRMYXZhUGFydGljbGVzKG1lc2g6IFRIUkVFLkdyb3VwKTogdm9pZCB7XG5cdFx0Y29uc3QgcGFydGljbGVDb3VudCA9IDUwO1xuXHRcdGNvbnN0IHBhcnRpY2xlcyA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuXHRcdGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkocGFydGljbGVDb3VudCAqIDMpO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0aWNsZUNvdW50ICogMzsgaSArPSAzKSB7XG5cdFx0XHRwb3NpdGlvbnNbaV0gPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiA2O1xuXHRcdFx0cG9zaXRpb25zW2kgKyAxXSA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDY7XG5cdFx0XHRwb3NpdGlvbnNbaSArIDJdID0gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogNjtcblx0XHR9XG5cblx0XHRwYXJ0aWNsZXMuc2V0QXR0cmlidXRlKFwicG9zaXRpb25cIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbnMsIDMpKTtcblxuXHRcdGNvbnN0IHBhcnRpY2xlTWF0ZXJpYWwgPSBuZXcgVEhSRUUuUG9pbnRzTWF0ZXJpYWwoe1xuXHRcdFx0Y29sb3I6IDB4ZmY0NTAwLFxuXHRcdFx0c2l6ZTogMC4xLFxuXHRcdFx0dHJhbnNwYXJlbnQ6IHRydWUsXG5cdFx0XHRvcGFjaXR5OiAwLjgsXG5cdFx0fSk7XG5cblx0XHRjb25zdCBwYXJ0aWNsZVN5c3RlbSA9IG5ldyBUSFJFRS5Qb2ludHMocGFydGljbGVzLCBwYXJ0aWNsZU1hdGVyaWFsKTtcblx0XHRtZXNoLmFkZChwYXJ0aWNsZVN5c3RlbSk7XG5cdH1cblxuXHQvKipcblx0ICogQWRkIGljZSBzaGltbWVyIGVmZmVjdFxuXHQgKi9cblx0cHJpdmF0ZSBhZGRJY2VTaGltbWVycyhtZXNoOiBUSFJFRS5Hcm91cCk6IHZvaWQge1xuXHRcdGNvbnN0IHJhZGl1cyA9IHRoaXMuZ2V0TWVzaFJhZGl1cyhtZXNoKTtcblx0XHRjb25zdCBzaGltbWVyR2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkocmFkaXVzICogMS4wNSwgMzIsIDMyKTtcblxuXHRcdGNvbnN0IHNoaW1tZXJNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XG5cdFx0XHRjb2xvcjogMHg4N2NlZWIsXG5cdFx0XHR0cmFuc3BhcmVudDogdHJ1ZSxcblx0XHRcdG9wYWNpdHk6IDAuMixcblx0XHRcdHNpZGU6IFRIUkVFLkJhY2tTaWRlLFxuXHRcdH0pO1xuXG5cdFx0Y29uc3Qgc2hpbW1lciA9IG5ldyBUSFJFRS5NZXNoKHNoaW1tZXJHZW9tZXRyeSwgc2hpbW1lck1hdGVyaWFsKTtcblx0XHRtZXNoLmFkZChzaGltbWVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGQgYXVyb3JhIGVmZmVjdFxuXHQgKi9cblx0cHJpdmF0ZSBhZGRBdXJvcmFFZmZlY3QobWVzaDogVEhSRUUuR3JvdXApOiB2b2lkIHtcblx0XHRjb25zdCBhdXJvcmFHZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSgobWVzaC5jaGlsZHJlblswXSBhcyBUSFJFRS5NZXNoKS5nZW9tZXRyeS5wYXJhbWV0ZXJzLnJhZGl1cyAqIDEuMiwgMzIsIDMyKTtcblxuXHRcdGNvbnN0IGF1cm9yYU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcblx0XHRcdGNvbG9yOiAweDAwZmYwMCxcblx0XHRcdHRyYW5zcGFyZW50OiB0cnVlLFxuXHRcdFx0b3BhY2l0eTogMC4xLFxuXHRcdFx0c2lkZTogVEhSRUUuQmFja1NpZGUsXG5cdFx0fSk7XG5cblx0XHRjb25zdCBhdXJvcmEgPSBuZXcgVEhSRUUuTWVzaChhdXJvcmFHZW9tZXRyeSwgYXVyb3JhTWF0ZXJpYWwpO1xuXHRcdG1lc2guYWRkKGF1cm9yYSk7XG5cdH1cblxuXHQvKipcblx0ICogU2V0dXAgYWR2YW5jZWQgbGlnaHRpbmdcblx0ICovXG5cdHByaXZhdGUgc2V0dXBBZHZhbmNlZExpZ2h0aW5nKG1lc2g6IFRIUkVFLkdyb3VwLCBjb25maWc6IFBsYW5ldFJlbmRlckNvbmZpZyk6IHZvaWQge1xuXHRcdC8vIEFkZCBhbWJpZW50IGxpZ2h0XG5cdFx0Y29uc3QgYW1iaWVudExpZ2h0ID0gbmV3IFRIUkVFLkFtYmllbnRMaWdodCgweDQwNDA0MCwgY29uZmlnLmFtYmllbnRJbnRlbnNpdHkgfHwgMC40KTtcblx0XHRtZXNoLmFkZChhbWJpZW50TGlnaHQpO1xuXG5cdFx0Ly8gQWRkIGRpcmVjdGlvbmFsIGxpZ2h0IChzdW4pXG5cdFx0Y29uc3Qgc3VuTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweGZmZmZmZiwgY29uZmlnLnN1bkludGVuc2l0eSB8fCAxLjUpO1xuXHRcdHN1bkxpZ2h0LnBvc2l0aW9uLnNldCgxMCwgMTAsIDUpO1xuXHRcdG1lc2guYWRkKHN1bkxpZ2h0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgYXZhaWxhYmxlIHBsYW5ldCB0eXBlc1xuXHQgKi9cblx0cHVibGljIGdldEF2YWlsYWJsZVBsYW5ldFR5cGVzKCk6IFBsYW5ldENsYXNzW10ge1xuXHRcdHJldHVybiBBcnJheS5mcm9tKFBMQU5FVF9UWVBFUy5rZXlzKCkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBwbGFuZXQgdHlwZSBpbmZvcm1hdGlvblxuXHQgKi9cblx0cHVibGljIGdldFBsYW5ldFR5cGVJbmZvKHBsYW5ldENsYXNzOiBQbGFuZXRDbGFzcyk6IFBsYW5ldFR5cGVEZWZpbml0aW9uIHwgdW5kZWZpbmVkIHtcblx0XHRyZXR1cm4gZ2V0UGxhbmV0VHlwZUJ5Q2xhc3MocGxhbmV0Q2xhc3MpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZSBxdWFsaXR5IHNldHRpbmdzXG5cdCAqL1xuXHRwdWJsaWMgdXBkYXRlUXVhbGl0eShxdWFsaXR5TGV2ZWw6IG51bWJlcik6IHZvaWQge1xuXHRcdC8vIEFkanVzdCBkZXRhaWwgbGV2ZWwgYmFzZWQgb24gcXVhbGl0eVxuXHRcdGNvbnN0IGRldGFpbExldmVsID0gTWF0aC5tYXgoMSwgTWF0aC5taW4oNSwgcXVhbGl0eUxldmVsKSk7XG5cblx0XHQvLyBDbGVhciBjYWNoZSB0byBmb3JjZSByZWdlbmVyYXRpb24gd2l0aCBuZXcgcXVhbGl0eVxuXHRcdHRoaXMuY2xlYXJDYWNoZSgpO1xuXG5cdFx0Y29uc29sZS5sb2coYPCfjI0gW1BMQU5FVF0gUXVhbGl0eSB1cGRhdGVkIHRvIGxldmVsICR7ZGV0YWlsTGV2ZWx9YCk7XG5cdH1cblxuXHQvKipcblx0ICogRGlzcG9zZSBvZiByZXNvdXJjZXNcblx0ICovXG5cdHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLmlzRGlzcG9zZWQpIHJldHVybjtcblxuXHRcdC8vIENsZWFyIGNhY2hlXG5cdFx0dGhpcy5jbGVhckNhY2hlKCk7XG5cblx0XHR0aGlzLmlzRGlzcG9zZWQgPSB0cnVlO1xuXHRcdGNvbnNvbGUubG9nKFwi8J+MjSBbUExBTkVUXSBSZW5kZXJlciBkaXNwb3NlZFwiKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZSBjYWNoZSBrZXkgZm9yIGNvbmZpZ3VyYXRpb25cblx0ICovXG5cdHByaXZhdGUgZ2VuZXJhdGVDYWNoZUtleShjb25maWc6IFBsYW5ldFJlbmRlckNvbmZpZyk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIGAke2NvbmZpZy5wbGFuZXRDbGFzc30tJHtjb25maWcucmFkaXVzfS0ke2NvbmZpZy5zZWVkfS0ke2NvbmZpZy5kZXRhaWxMZXZlbH1gO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZSBjYWNoZWQgcmVzdWx0XG5cdCAqL1xuXHRwcml2YXRlIGNyZWF0ZUNhY2hlZFJlc3VsdChtZXNoOiBUSFJFRS5Hcm91cCwgY29uZmlnOiBQbGFuZXRSZW5kZXJDb25maWcsIHN0YXJ0VGltZTogbnVtYmVyKTogUGxhbmV0UmVuZGVyUmVzdWx0IHtcblx0XHRjb25zdCBwbGFuZXRUeXBlID0gZ2V0UGxhbmV0VHlwZUJ5Q2xhc3MoY29uZmlnLnBsYW5ldENsYXNzIHx8IFBsYW5ldENsYXNzLlRFUlJFU1RSSUFMKSE7XG5cdFx0Y29uc3QgbWV0YWRhdGEgPSB0aGlzLmNhbGN1bGF0ZVJlbmRlck1ldGFkYXRhKG1lc2gsIHN0YXJ0VGltZSk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0bWVzaDogbWVzaC5jbG9uZSgpLFxuXHRcdFx0Y29uZmlnLFxuXHRcdFx0cGxhbmV0VHlwZSxcblx0XHRcdHN0YXRpc3RpY3M6IHtcblx0XHRcdFx0dmVydGV4Q291bnQ6IHRoaXMuY2FsY3VsYXRlUG9seUNvdW50KG1lc2gpLFxuXHRcdFx0XHRmZWF0dXJlQ291bnQ6IHRoaXMuY291bnRGZWF0dXJlcyhtZXNoKSxcblx0XHRcdH0sXG5cdFx0XHRtZXRhZGF0YSxcblx0XHR9O1xuXHR9XG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZSByZW5kZXIgbWV0YWRhdGFcblx0ICovXG5cdHByaXZhdGUgY2FsY3VsYXRlUmVuZGVyTWV0YWRhdGEobWVzaDogVEhSRUUuR3JvdXAsIHN0YXJ0VGltZTogbnVtYmVyKTogUGxhbmV0UmVuZGVyTWV0YWRhdGEge1xuXHRcdGNvbnN0IHJlbmRlclRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZTtcblx0XHRjb25zdCBwb2x5Q291bnQgPSB0aGlzLmNhbGN1bGF0ZVBvbHlDb3VudChtZXNoKTtcblx0XHRjb25zdCBmZWF0dXJlQ291bnQgPSB0aGlzLmNvdW50RmVhdHVyZXMobWVzaCk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0cmVuZGVyVGltZSxcblx0XHRcdHBvbHlDb3VudCxcblx0XHRcdHRleHR1cmVDb3VudDogMSwgLy8gU2ltcGxpZmllZFxuXHRcdFx0ZmVhdHVyZUNvdW50LFxuXHRcdFx0bWVtb3J5VXNhZ2U6IHBvbHlDb3VudCAqIDMyLCAvLyBSb3VnaCBlc3RpbWF0ZVxuXHRcdFx0cXVhbGl0eUxldmVsOiB0aGlzLmRldGVybWluZVF1YWxpdHlMZXZlbChwb2x5Q291bnQsIDEpLFxuXHRcdH07XG5cdH1cblxuXHQvKipcblx0ICogQ2FsY3VsYXRlIHBvbHlnb24gY291bnRcblx0ICovXG5cdHByaXZhdGUgY2FsY3VsYXRlUG9seUNvdW50KG1lc2g6IFRIUkVFLkdyb3VwKTogbnVtYmVyIHtcblx0XHRsZXQgY291bnQgPSAwO1xuXHRcdG1lc2gudHJhdmVyc2UoKGNoaWxkKSA9PiB7XG5cdFx0XHRpZiAoY2hpbGQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoICYmIGNoaWxkLmdlb21ldHJ5KSB7XG5cdFx0XHRcdGNvbnN0IGdlb21ldHJ5ID0gY2hpbGQuZ2VvbWV0cnk7XG5cdFx0XHRcdGlmIChnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uKSB7XG5cdFx0XHRcdFx0Y291bnQgKz0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5jb3VudCAvIDM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gY291bnQ7XG5cdH1cblxuXHQvKipcblx0ICogQ291bnQgZmVhdHVyZXMgaW4gbWVzaFxuXHQgKi9cblx0cHJpdmF0ZSBjb3VudEZlYXR1cmVzKG1lc2g6IFRIUkVFLkdyb3VwKTogbnVtYmVyIHtcblx0XHRsZXQgY291bnQgPSAwO1xuXHRcdG1lc2gudHJhdmVyc2UoKGNoaWxkKSA9PiB7XG5cdFx0XHRpZiAoY2hpbGQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIGNvdW50O1xuXHR9XG5cblx0LyoqXG5cdCAqIERldGVybWluZSBxdWFsaXR5IGxldmVsXG5cdCAqL1xuXHRwcml2YXRlIGRldGVybWluZVF1YWxpdHlMZXZlbChwb2x5Q291bnQ6IG51bWJlciwgdGV4dHVyZUNvdW50OiBudW1iZXIpOiBzdHJpbmcge1xuXHRcdGlmIChwb2x5Q291bnQgPiAxMDAwMCkgcmV0dXJuIFwiVWx0cmFcIjtcblx0XHRpZiAocG9seUNvdW50ID4gNTAwMCkgcmV0dXJuIFwiSGlnaFwiO1xuXHRcdGlmIChwb2x5Q291bnQgPiAyMDAwKSByZXR1cm4gXCJNZWRpdW1cIjtcblx0XHRyZXR1cm4gXCJMb3dcIjtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW5kZXIgZmFsbGJhY2sgcGxhbmV0XG5cdCAqL1xuXHRwcml2YXRlIHJlbmRlckZhbGxiYWNrUGxhbmV0KGNvbmZpZzogUGxhbmV0UmVuZGVyQ29uZmlnLCBzdGFydFRpbWU6IG51bWJlcik6IFBsYW5ldFJlbmRlclJlc3VsdCB7XG5cdFx0Y29uc29sZS53YXJuKFwi8J+MjSBbUExBTkVUXSBVc2luZyBmYWxsYmFjayBwbGFuZXQgcmVuZGVyZXJcIik7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShjb25maWcucmFkaXVzIHx8IDMuMCwgMTYsIDE2KTtcblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7IGNvbG9yOiAweDgwODA4MCB9KTtcblx0XHRjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcblx0XHRjb25zdCBncm91cCA9IG5ldyBUSFJFRS5Hcm91cCgpO1xuXHRcdGdyb3VwLmFkZChtZXNoKTtcblxuXHRcdGNvbnN0IHBsYW5ldFR5cGUgPSBnZXRQbGFuZXRUeXBlQnlDbGFzcyhQbGFuZXRDbGFzcy5URVJSRVNUUklBTCkhO1xuXHRcdGNvbnN0IG1ldGFkYXRhID0gdGhpcy5jYWxjdWxhdGVSZW5kZXJNZXRhZGF0YShncm91cCwgc3RhcnRUaW1lKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRtZXNoOiBncm91cCxcblx0XHRcdGNvbmZpZyxcblx0XHRcdHBsYW5ldFR5cGUsXG5cdFx0XHRzdGF0aXN0aWNzOiB7IHZlcnRleENvdW50OiAyNTYsIGZlYXR1cmVDb3VudDogMSB9LFxuXHRcdFx0bWV0YWRhdGEsXG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgcGVyZm9ybWFuY2Ugc3RhdGlzdGljc1xuXHQgKi9cblx0cHVibGljIGdldFBlcmZvcm1hbmNlU3RhdHMoKTogeyBsYXN0UmVuZGVyVGltZTogbnVtYmVyOyBjYWNoZVNpemU6IG51bWJlciB9IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0bGFzdFJlbmRlclRpbWU6IHRoaXMubGFzdFJlbmRlclRpbWUsXG5cdFx0XHRjYWNoZVNpemU6IHRoaXMucmVuZGVyQ2FjaGUuc2l6ZSxcblx0XHR9O1xuXHR9XG5cblx0LyoqXG5cdCAqIENsZWFyIHJlbmRlciBjYWNoZVxuXHQgKi9cblx0cHVibGljIGNsZWFyQ2FjaGUoKTogdm9pZCB7XG5cdFx0dGhpcy5yZW5kZXJDYWNoZS5mb3JFYWNoKChtZXNoKSA9PiB7XG5cdFx0XHR0aGlzLmRpc3Bvc2VNZXNoKG1lc2gpO1xuXHRcdH0pO1xuXHRcdHRoaXMucmVuZGVyQ2FjaGUuY2xlYXIoKTtcblx0XHRjb25zb2xlLmxvZyhcIvCfjI0gW1BMQU5FVF0gQ2FjaGUgY2xlYXJlZFwiKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEaXNwb3NlIG9mIG1lc2ggcmVzb3VyY2VzXG5cdCAqL1xuXHRwcml2YXRlIGRpc3Bvc2VNZXNoKG9iamVjdDogVEhSRUUuT2JqZWN0M0QpOiB2b2lkIHtcblx0XHRvYmplY3QudHJhdmVyc2UoKGNoaWxkKSA9PiB7XG5cdFx0XHRpZiAoY2hpbGQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoKSB7XG5cdFx0XHRcdGlmIChjaGlsZC5nZW9tZXRyeSkge1xuXHRcdFx0XHRcdGNoaWxkLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY2hpbGQubWF0ZXJpYWwpIHtcblx0XHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShjaGlsZC5tYXRlcmlhbCkpIHtcblx0XHRcdFx0XHRcdGNoaWxkLm1hdGVyaWFsLmZvckVhY2goKG1hdGVyaWFsKSA9PiBtYXRlcmlhbC5kaXNwb3NlKCkpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjaGlsZC5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogUHJlbG9hZCBjb21tb24gcGxhbmV0IHR5cGVzXG5cdCAqL1xuXHRwdWJsaWMgYXN5bmMgcHJlbG9hZENvbW1vblR5cGVzKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGNvbnN0IGNvbW1vblR5cGVzID0gW1BsYW5ldENsYXNzLlRFUlJFU1RSSUFMLCBQbGFuZXRDbGFzcy5HQVNfR0lBTlQsIFBsYW5ldENsYXNzLklDRV9HSUFOVF07XG5cblx0XHRjb25zb2xlLmxvZyhcIvCfjI0gW1BMQU5FVF0gUHJlbG9hZGluZyBjb21tb24gcGxhbmV0IHR5cGVzLi4uXCIpO1xuXG5cdFx0Zm9yIChjb25zdCBwbGFuZXRDbGFzcyBvZiBjb21tb25UeXBlcykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0YXdhaXQgdGhpcy5yZW5kZXJQbGFuZXRCeVR5cGUocGxhbmV0Q2xhc3MsIHsgZGV0YWlsTGV2ZWw6IDEgfSk7XG5cdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oYPCfjI0gW1BMQU5FVF0gRmFpbGVkIHRvIHByZWxvYWQgJHtwbGFuZXRDbGFzc306YCwgZXJyb3IpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbnNvbGUubG9nKFwi8J+MjSBbUExBTkVUXSBQcmVsb2FkaW5nIGNvbXBsZXRlXCIpO1xuXHR9XG59XG4iXSwibmFtZXMiOlsiVEhSRUUiLCJQbGFuZXRDbGFzcyIsImdldFBsYW5ldFR5cGVCeUNsYXNzIiwiUExBTkVUX1RZUEVTIiwiREVGQVVMVF9DT05GSUciLCJyYWRpdXMiLCJzZWVkIiwiRGF0ZSIsIm5vdyIsInN0YXJEaXN0YW5jZSIsInN0YXJUeXBlIiwiZGV0YWlsTGV2ZWwiLCJmZWF0dXJlRGVuc2l0eSIsImNvbG9yVmFyaWF0aW9uIiwiZW5hYmxlTE9EIiwibWF4RmVhdHVyZXMiLCJyZW5kZXJEaXN0YW5jZSIsImVuYWJsZUF0bW9zcGhlcmUiLCJlbmFibGVSaW5ncyIsImVuYWJsZU1vb25zIiwiZW5hYmxlU3BlY2lhbEVmZmVjdHMiLCJlbmFibGVBZHZhbmNlZExpZ2h0aW5nIiwiYW1iaWVudEludGVuc2l0eSIsInN1bkludGVuc2l0eSIsIlBsYW5ldFJlbmRlcmVyIiwicmVuZGVyUGxhbmV0QnlUeXBlIiwicGxhbmV0Q2xhc3MiLCJjb25maWciLCJzdGFydFRpbWUiLCJwZXJmb3JtYW5jZSIsImZpbmFsQ29uZmlnIiwicGxhbmV0VHlwZSIsIkVycm9yIiwiY2FjaGVLZXkiLCJnZW5lcmF0ZUNhY2hlS2V5IiwicmVuZGVyQ2FjaGUiLCJoYXMiLCJjYWNoZWRNZXNoIiwiZ2V0IiwiY3JlYXRlQ2FjaGVkUmVzdWx0IiwibWVzaCIsImdlbmVyYXRlUGxhbmV0TWVzaCIsImFkZEF0bW9zcGhlcmUiLCJmZWF0dXJlcyIsInJpbmdzIiwiYWRkUmluZ3MiLCJtb29ucyIsImFkZE1vb25zIiwiYWRkU3BlY2lhbEVmZmVjdHMiLCJzZXR1cEFkdmFuY2VkTGlnaHRpbmciLCJzZXQiLCJtZXRhZGF0YSIsImNhbGN1bGF0ZVJlbmRlck1ldGFkYXRhIiwic3RhdGlzdGljcyIsInZlcnRleENvdW50IiwiY2FsY3VsYXRlUG9seUNvdW50IiwiZmVhdHVyZUNvdW50IiwiY291bnRGZWF0dXJlcyIsImVycm9yIiwiY29uc29sZSIsInJlbmRlckZhbGxiYWNrUGxhbmV0IiwiZ3JvdXAiLCJHcm91cCIsImdlb21ldHJ5IiwiU3BoZXJlR2VvbWV0cnkiLCJtYXRlcmlhbCIsImNyZWF0ZVBsYW5ldE1hdGVyaWFsIiwiTWVzaCIsImFkZCIsInJvdGF0aW9uIiwieCIsIk1hdGgiLCJQSSIsInByaW1hcnlDb2xvciIsInByaW1hcnlDb2xvcnMiLCJDb2xvciIsIk1lc2hMYW1iZXJ0TWF0ZXJpYWwiLCJjb2xvciIsImVtaXNzaXZlIiwiZW1pc3NpdmVJbnRlbnNpdHkiLCJnZXRNZXNoUmFkaXVzIiwiZmlyc3RNZXNoIiwiY2hpbGRyZW4iLCJwYXJhbWV0ZXJzIiwiY2xvdWRzIiwiYXRtb3NwaGVyZUdlb21ldHJ5IiwiYXRtb3NwaGVyZU1hdGVyaWFsIiwiTWVzaEJhc2ljTWF0ZXJpYWwiLCJ0cmFuc3BhcmVudCIsIm9wYWNpdHkiLCJzaWRlIiwiQmFja1NpZGUiLCJhdG1vc3BoZXJlIiwicmluZ0dlb21ldHJ5IiwiUmluZ0dlb21ldHJ5IiwicmluZ01hdGVyaWFsIiwiRG91YmxlU2lkZSIsIm1vb25Db3VudCIsIm1pbiIsImkiLCJtb29uR2VvbWV0cnkiLCJtb29uTWF0ZXJpYWwiLCJtb29uIiwiYW5nbGUiLCJkaXN0YW5jZSIsInBvc2l0aW9uIiwiY29zIiwic2luIiwiY2xhc3MiLCJMQVZBX1dPUkxEIiwiYWRkTGF2YVBhcnRpY2xlcyIsIklDRV9HSUFOVCIsImFkZEljZVNoaW1tZXJzIiwiYXVyb3JhZSIsImFkZEF1cm9yYUVmZmVjdCIsInBhcnRpY2xlQ291bnQiLCJwYXJ0aWNsZXMiLCJCdWZmZXJHZW9tZXRyeSIsInBvc2l0aW9ucyIsIkZsb2F0MzJBcnJheSIsInJhbmRvbSIsInNldEF0dHJpYnV0ZSIsIkJ1ZmZlckF0dHJpYnV0ZSIsInBhcnRpY2xlTWF0ZXJpYWwiLCJQb2ludHNNYXRlcmlhbCIsInNpemUiLCJwYXJ0aWNsZVN5c3RlbSIsIlBvaW50cyIsInNoaW1tZXJHZW9tZXRyeSIsInNoaW1tZXJNYXRlcmlhbCIsInNoaW1tZXIiLCJhdXJvcmFHZW9tZXRyeSIsImF1cm9yYU1hdGVyaWFsIiwiYXVyb3JhIiwiYW1iaWVudExpZ2h0IiwiQW1iaWVudExpZ2h0Iiwic3VuTGlnaHQiLCJEaXJlY3Rpb25hbExpZ2h0IiwiZ2V0QXZhaWxhYmxlUGxhbmV0VHlwZXMiLCJBcnJheSIsImZyb20iLCJrZXlzIiwiZ2V0UGxhbmV0VHlwZUluZm8iLCJ1cGRhdGVRdWFsaXR5IiwicXVhbGl0eUxldmVsIiwibWF4IiwiY2xlYXJDYWNoZSIsImxvZyIsImRpc3Bvc2UiLCJpc0Rpc3Bvc2VkIiwiVEVSUkVTVFJJQUwiLCJjbG9uZSIsInJlbmRlclRpbWUiLCJwb2x5Q291bnQiLCJ0ZXh0dXJlQ291bnQiLCJtZW1vcnlVc2FnZSIsImRldGVybWluZVF1YWxpdHlMZXZlbCIsImNvdW50IiwidHJhdmVyc2UiLCJjaGlsZCIsImF0dHJpYnV0ZXMiLCJ3YXJuIiwiZ2V0UGVyZm9ybWFuY2VTdGF0cyIsImxhc3RSZW5kZXJUaW1lIiwiY2FjaGVTaXplIiwiZm9yRWFjaCIsImRpc3Bvc2VNZXNoIiwiY2xlYXIiLCJvYmplY3QiLCJpc0FycmF5IiwicHJlbG9hZENvbW1vblR5cGVzIiwiY29tbW9uVHlwZXMiLCJHQVNfR0lBTlQiLCJNYXAiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/shared/procgen/planet/planet-renderer.ts\n"));

/***/ })

});