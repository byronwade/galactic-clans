"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_components_BlackHoleRenderer_tsx"],{

/***/ "(app-pages-browser)/./src/components/BlackHoleRenderer.tsx":
/*!**********************************************!*\
  !*** ./src/components/BlackHoleRenderer.tsx ***!
  \**********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BlackHoleRenderer)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nfunction BlackHoleRenderer(param) {\n    let { onGenerate, onClear, config = {} } = param;\n    _s();\n    const mountRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const sceneRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const rendererRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const cameraRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const blackHoleGroupRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const animationIdRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [scene, setScene] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [camera, setCamera] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [renderer, setRenderer] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [currentBlackHole, setCurrentBlackHole] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isGenerating, setIsGenerating] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Ultra-enhanced configuration based on advanced reference\n    const defaultConfig = {\n        mass: 10,\n        spin: 0.95,\n        inclination: 35,\n        diskInnerRadius: 1.5,\n        diskOuterRadius: 20,\n        temperature: 80000,\n        accretionRate: 0.85,\n        magneticField: 2000000,\n        coronaTemperature: 150000000,\n        jetPower: 0.8,\n        viewingDistance: 150,\n        type: \"supermassive\",\n        lensingStrength: 1.2,\n        volumetricDensity: 0.7,\n        plasmaDensity: 0.9,\n        synchrotronEmission: 0.95,\n        relativisticBeaming: 0.8,\n        ...config\n    };\n    // Precise Schwarzschild radius calculation\n    const calculateSchwarzschildRadius = (mass)=>{\n        return mass * 3.0; // Simplified for visualization\n    };\n    // Enhanced blackbody radiation with relativistic corrections\n    const blackBodyColor = (temperature)=>{\n        const t = Math.max(temperature, 1000) / 10000;\n        let r, g, b;\n        if (t < 0.5) {\n            r = 1.0;\n            g = Math.pow(t * 2.0, 0.6);\n            b = Math.pow(t * 2.0, 2.0);\n        } else if (t < 0.8) {\n            r = 1.0;\n            g = 0.8 + 0.2 * (t - 0.5) / 0.3;\n            b = 0.6 + 0.4 * (t - 0.5) / 0.3;\n        } else {\n            r = 1.0 - 0.2 * (t - 0.8) / 0.2;\n            g = 0.95 + 0.05 * (t - 0.8) / 0.2;\n            b = 1.0;\n        }\n        // Relativistic blue-shifting for extreme temperatures\n        if (temperature > 200000) {\n            const boost = Math.min(temperature / 2000000, 1.0);\n            b = Math.min(1.0, b + boost * 0.4);\n            r = Math.max(0.4, r - boost * 0.3);\n        }\n        return [\n            r,\n            g,\n            b\n        ];\n    };\n    // Ultra-advanced gravitational lensing with Kerr spacetime\n    const createAdvancedLensingShader = (config)=>{\n        return {\n            vertexShader: \"\\n\t\t\t\tvarying vec2 vUv;\\n\t\t\t\tvarying vec3 vPosition;\\n\t\t\t\tvarying vec3 vWorldPosition;\\n\t\t\t\tvarying vec3 vViewDirection;\\n\t\t\t\t\\n\t\t\t\tvoid main() {\\n\t\t\t\t\tvUv = uv;\\n\t\t\t\t\tvPosition = position;\\n\t\t\t\t\tvWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\\n\t\t\t\t\tvViewDirection = normalize(vWorldPosition - cameraPosition);\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n\t\t\t\t}\\n\t\t\t\",\n            fragmentShader: \"\\n\t\t\t\tuniform float time;\\n\t\t\t\tuniform vec3 blackHolePosition;\\n\t\t\t\tuniform float schwarzschildRadius;\\n\t\t\t\tuniform float lensingStrength;\\n\t\t\t\tuniform float mass;\\n\t\t\t\tuniform float spin;\\n\t\t\t\tuniform sampler2D backgroundTexture;\\n\t\t\t\tuniform vec2 resolution;\\n\t\t\t\tuniform vec3 cameraPosition;\\n\t\t\t\t\\n\t\t\t\tvarying vec2 vUv;\\n\t\t\t\tvarying vec3 vPosition;\\n\t\t\t\tvarying vec3 vWorldPosition;\\n\t\t\t\tvarying vec3 vViewDirection;\\n\t\t\t\t\\n\t\t\t\t#define PI 3.14159265359\\n\t\t\t\t#define MAX_STEPS 48\\n\t\t\t\t#define STEP_SIZE 0.15\\n\t\t\t\t\\n\t\t\t\t// Kerr metric components for spinning black hole\\n\t\t\t\tfloat kerrMetric(vec3 pos, float a) {\\n\t\t\t\t\tfloat r = length(pos);\\n\t\t\t\t\tfloat theta = acos(clamp(pos.y / r, -1.0, 1.0));\\n\t\t\t\t\tfloat rho2 = r * r + a * a * cos(theta) * cos(theta);\\n\t\t\t\t\tfloat delta = r * r - 2.0 * r + a * a;\\n\t\t\t\t\treturn max(rho2 / delta, 0.1);\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\t// Advanced photon geodesic integration\\n\t\t\t\tvec3 integrateGeodesic(vec3 position, vec3 direction, float rs, float spin) {\\n\t\t\t\t\tvec3 pos = position;\\n\t\t\t\t\tvec3 dir = normalize(direction);\\n\t\t\t\t\tfloat dt = STEP_SIZE;\\n\t\t\t\t\t\\n\t\t\t\t\tfor (int i = 0; i < MAX_STEPS; i++) {\\n\t\t\t\t\t\tfloat r = length(pos);\\n\t\t\t\t\t\tif (r < rs) break; // Event horizon crossing\\n\t\t\t\t\t\t\\n\t\t\t\t\t\t// Kerr parameter\\n\t\t\t\t\t\tfloat a = spin * rs * 0.5;\\n\t\t\t\t\t\t\\n\t\t\t\t\t\t// Metric coefficients\\n\t\t\t\t\t\tfloat theta = acos(clamp(pos.y / r, -1.0, 1.0));\\n\t\t\t\t\t\tfloat rho2 = r * r + a * a * cos(theta) * cos(theta);\\n\t\t\t\t\t\tfloat delta = r * r - 2.0 * r + a * a;\\n\t\t\t\t\t\t\\n\t\t\t\t\t\t// Gravitational acceleration (Einstein field equations)\\n\t\t\t\t\t\tvec3 radialForce = -1.5 * rs * rs * normalize(pos) / (r * r * r);\\n\t\t\t\t\t\t\\n\t\t\t\t\t\t// Frame dragging (Lense-Thirring effect)\\n\t\t\t\t\t\tvec3 frameDragging = cross(normalize(pos), vec3(0, 1, 0)) * (a * rs) / (r * r * r);\\n\t\t\t\t\t\t\\n\t\t\t\t\t\t// Tidal forces\\n\t\t\t\t\t\tvec3 tidalForce = -0.1 * rs * pos / (r * r);\\n\t\t\t\t\t\t\\n\t\t\t\t\t\t// Combined acceleration\\n\t\t\t\t\t\tvec3 acceleration = radialForce + frameDragging * 0.2 + tidalForce;\\n\t\t\t\t\t\t\\n\t\t\t\t\t\t// Geodesic integration\\n\t\t\t\t\t\tdir += acceleration * dt;\\n\t\t\t\t\t\tpos += normalize(dir) * dt * 0.8;\\n\t\t\t\t\t\t\\n\t\t\t\t\t\t// Escape condition\\n\t\t\t\t\t\tif (r > 200.0 * rs) break;\\n\t\t\t\t\t}\\n\t\t\t\t\t\\n\t\t\t\t\treturn pos;\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\t// Multi-scale gravitational lensing\\n\t\t\t\tvec2 gravitationalLensing(vec2 uv, vec3 bhPos, float rs, float strength, float spin) {\\n\t\t\t\t\tvec3 rayOrigin = cameraPosition;\\n\t\t\t\t\tvec3 rayDir = normalize(vWorldPosition - rayOrigin);\\n\t\t\t\t\t\\n\t\t\t\t\t// Impact parameter calculation\\n\t\t\t\t\tvec3 toBH = bhPos - rayOrigin;\\n\t\t\t\t\tfloat b = length(cross(rayDir, normalize(toBH)));\\n\t\t\t\t\tfloat distance = length(toBH);\\n\t\t\t\t\t\\n\t\t\t\t\t// Einstein deflection with Kerr corrections\\n\t\t\t\t\tfloat basicDeflection = 4.0 * rs / max(b, rs * 0.1);\\n\t\t\t\t\tfloat kerrCorrection = 1.0 + spin * spin * 0.3;\\n\t\t\t\t\tfloat deflection = basicDeflection * kerrCorrection * strength;\\n\t\t\t\t\t\\n\t\t\t\t\t// Critical radius for multiple imaging\\n\t\t\t\t\tfloat criticalRadius = sqrt(27.0) * rs * 0.5;\\n\t\t\t\t\tfloat primaryImageStrength = 1.0;\\n\t\t\t\t\tfloat secondaryImageStrength = 0.0;\\n\t\t\t\t\t\\n\t\t\t\t\tif (b < criticalRadius) {\\n\t\t\t\t\t\tprimaryImageStrength = 1.5;\\n\t\t\t\t\t\tsecondaryImageStrength = 0.8 * exp(-(b - rs) * 2.0);\\n\t\t\t\t\t}\\n\t\t\t\t\t\\n\t\t\t\t\t// Primary lensed image\\n\t\t\t\t\tvec3 toCenter = normalize(bhPos - vWorldPosition);\\n\t\t\t\t\tvec2 primaryOffset = toCenter.xy * deflection * 0.08 * primaryImageStrength;\\n\t\t\t\t\t\\n\t\t\t\t\t// Secondary image (Einstein ring)\\n\t\t\t\t\tfloat ringRadius = 2.6 * rs / distance;\\n\t\t\t\t\tvec2 ringCenter = vec2(0.5);\\n\t\t\t\t\tvec2 toRing = normalize(uv - ringCenter);\\n\t\t\t\t\tvec2 secondaryOffset = toRing * ringRadius * secondaryImageStrength * 0.3;\\n\t\t\t\t\t\\n\t\t\t\t\t// Apply total lensing\\n\t\t\t\t\tvec2 lensedUV = uv + primaryOffset + secondaryOffset;\\n\t\t\t\t\t\\n\t\t\t\t\t// Photon sphere enhancement\\n\t\t\t\t\tfloat distFromCenter = length(uv - 0.5);\\n\t\t\t\t\tfloat photonSphere = smoothstep(0.24, 0.26, distFromCenter) * \\n\t\t\t\t\t\t\t\t\t   smoothstep(0.28, 0.26, distFromCenter);\\n\t\t\t\t\tif (photonSphere > 0.1) {\\n\t\t\t\t\t\tlensedUV += toCenter.xy * 0.15 * photonSphere;\\n\t\t\t\t\t}\\n\t\t\t\t\t\\n\t\t\t\t\t// Wrap coordinates\\n\t\t\t\t\tlensedUV = fract(lensedUV + 1.0);\\n\t\t\t\t\t\\n\t\t\t\t\treturn lensedUV;\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\t// Relativistic effects on light\\n\t\t\t\tvec3 relativisticEffects(vec3 color, vec3 position, float rs, float spin) {\\n\t\t\t\t\tfloat r = length(position);\\n\t\t\t\t\t\\n\t\t\t\t\t// Gravitational redshift (time dilation)\\n\t\t\t\t\tfloat redshift = sqrt(max(1.0 - rs / r, 0.1));\\n\t\t\t\t\t\\n\t\t\t\t\t// Relativistic Doppler effect\\n\t\t\t\t\tfloat phi = atan(position.z, position.x);\\n\t\t\t\t\tfloat rotationalVel = spin * rs / (r * r) * 0.5;\\n\t\t\t\t\tfloat dopplerFactor = 1.0 + rotationalVel * cos(phi + time * 0.1);\\n\t\t\t\t\t\\n\t\t\t\t\t// Apply frequency shifts\\n\t\t\t\t\tvec3 shiftedColor = color;\\n\t\t\t\t\tshiftedColor.r *= redshift * dopplerFactor;\\n\t\t\t\t\tshiftedColor.g *= pow(redshift, 0.7) * sqrt(dopplerFactor);\\n\t\t\t\t\tshiftedColor.b *= pow(redshift, 0.4) * pow(dopplerFactor, 0.3);\\n\t\t\t\t\t\\n\t\t\t\t\t// Intensity boosting from gravitational focusing\\n\t\t\t\t\tfloat focusingBoost = 1.0 + 0.5 / (1.0 + pow(r / rs - 1.0, 2.0));\\n\t\t\t\t\tshiftedColor *= focusingBoost;\\n\t\t\t\t\t\\n\t\t\t\t\treturn shiftedColor;\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\tvoid main() {\\n\t\t\t\t\tvec2 lensedUV = gravitationalLensing(vUv, blackHolePosition, schwarzschildRadius, lensingStrength, spin);\\n\t\t\t\t\t\\n\t\t\t\t\t// Sample background with enhanced lensing\\n\t\t\t\t\tvec3 lensedColor = texture2D(backgroundTexture, lensedUV).rgb;\\n\t\t\t\t\t\\n\t\t\t\t\t// Apply full relativistic effects\\n\t\t\t\t\tlensedColor = relativisticEffects(lensedColor, vWorldPosition, schwarzschildRadius, spin);\\n\t\t\t\t\t\\n\t\t\t\t\t// Enhanced Einstein ring system\\n\t\t\t\t\tfloat distanceFromCenter = length(vUv - 0.5) * 2.0;\\n\t\t\t\t\t\\n\t\t\t\t\t// Primary Einstein ring\\n\t\t\t\t\tfloat primaryRing = smoothstep(0.46, 0.50, distanceFromCenter) * \\n\t\t\t\t\t\t\t\t\t   smoothstep(0.54, 0.50, distanceFromCenter);\\n\t\t\t\t\tlensedColor += primaryRing * vec3(1.0, 0.95, 0.85) * 1.5;\\n\t\t\t\t\t\\n\t\t\t\t\t// Secondary Einstein ring\\n\t\t\t\t\tfloat secondaryRing = smoothstep(0.72, 0.75, distanceFromCenter) * \\n\t\t\t\t\t\t\t\t\t\t smoothstep(0.78, 0.75, distanceFromCenter);\\n\t\t\t\t\tlensedColor += secondaryRing * vec3(0.9, 0.95, 1.0) * 0.8;\\n\t\t\t\t\t\\n\t\t\t\t\t// Photon sphere critical curve\\n\t\t\t\t\tfloat photonRing = smoothstep(0.74, 0.76, distanceFromCenter) * \\n\t\t\t\t\t\t\t\t\t  smoothstep(0.78, 0.76, distanceFromCenter);\\n\t\t\t\t\tlensedColor += photonRing * vec3(1.0, 0.9, 0.8) * 2.0;\\n\t\t\t\t\t\\n\t\t\t\t\t// Caustic light patterns\\n\t\t\t\t\tvec2 causticCoord = lensedUV * 25.0 + time * 0.15;\\n\t\t\t\t\tfloat caustic = abs(sin(causticCoord.x) * sin(causticCoord.y)) * 0.15;\\n\t\t\t\t\tlensedColor += caustic * vec3(0.8, 0.9, 1.0);\\n\t\t\t\t\t\\n\t\t\t\t\t// Interference patterns from multiple paths\\n\t\t\t\t\tfloat interference = sin(distanceFromCenter * 40.0 + time * 5.0) * 0.05;\\n\t\t\t\t\tlensedColor += interference * vec3(1.0, 1.0, 0.9);\\n\t\t\t\t\t\\n\t\t\t\t\tgl_FragColor = vec4(lensedColor, 1.0);\\n\t\t\t\t}\\n\t\t\t\"\n        };\n    };\n    // Volumetric accretion disk with plasma physics\n    const createVolumetricDiskShader = (config)=>{\n        const rs = calculateSchwarzschildRadius(config.mass);\n        const [r, g, b] = blackBodyColor(config.temperature);\n        return {\n            vertexShader: \"\\n\t\t\t\tvarying vec2 vUv;\\n\t\t\t\tvarying vec3 vPosition;\\n\t\t\t\tvarying vec3 vNormal;\\n\t\t\t\tvarying vec3 vWorldPosition;\\n\t\t\t\tvarying float vRadius;\\n\t\t\t\tvarying float vHeight;\\n\t\t\t\tvarying float vDistanceToCamera;\\n\t\t\t\t\\n\t\t\t\tvoid main() {\\n\t\t\t\t\tvUv = uv;\\n\t\t\t\t\tvPosition = position;\\n\t\t\t\t\tvNormal = normal;\\n\t\t\t\t\tvWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\\n\t\t\t\t\tvRadius = length(position.xz);\\n\t\t\t\t\tvHeight = position.y;\\n\t\t\t\t\tvDistanceToCamera = distance(cameraPosition, vWorldPosition);\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n\t\t\t\t}\\n\t\t\t\",\n            fragmentShader: \"\\n\t\t\t\tuniform float time;\\n\t\t\t\tuniform float innerRadius;\\n\t\t\t\tuniform float outerRadius;\\n\t\t\t\tuniform float temperature;\\n\t\t\t\tuniform float accretionRate;\\n\t\t\t\tuniform float spin;\\n\t\t\t\tuniform float inclination;\\n\t\t\t\tuniform vec3 baseColor;\\n\t\t\t\tuniform float magneticField;\\n\t\t\t\tuniform float coronaTemp;\\n\t\t\t\tuniform float volumetricDensity;\\n\t\t\t\tuniform float plasmaDensity;\\n\t\t\t\tuniform float synchrotronEmission;\\n\t\t\t\tuniform float relativisticBeaming;\\n\t\t\t\tuniform vec3 cameraPosition;\\n\t\t\t\t\\n\t\t\t\tvarying vec2 vUv;\\n\t\t\t\tvarying vec3 vPosition;\\n\t\t\t\tvarying vec3 vNormal;\\n\t\t\t\tvarying vec3 vWorldPosition;\\n\t\t\t\tvarying float vRadius;\\n\t\t\t\tvarying float vHeight;\\n\t\t\t\tvarying float vDistanceToCamera;\\n\t\t\t\t\\n\t\t\t\t#define PI 3.14159265359\\n\t\t\t\t\\n\t\t\t\t// Ultra-advanced 3D noise for plasma turbulence\\n\t\t\t\tvec3 hash3(vec3 p) {\\n\t\t\t\t\tp = vec3(dot(p, vec3(127.1, 311.7, 74.7)),\\n\t\t\t\t\t\t\tdot(p, vec3(269.5, 183.3, 246.1)),\\n\t\t\t\t\t\t\tdot(p, vec3(113.5, 271.9, 124.6)));\\n\t\t\t\t\treturn -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\tfloat noise3D(vec3 p) {\\n\t\t\t\t\tvec3 i = floor(p);\\n\t\t\t\t\tvec3 f = fract(p);\\n\t\t\t\t\tvec3 u = f * f * (3.0 - 2.0 * f);\\n\t\t\t\t\t\\n\t\t\t\t\tfloat a = dot(hash3(i + vec3(0,0,0)), f - vec3(0,0,0));\\n\t\t\t\t\tfloat b = dot(hash3(i + vec3(1,0,0)), f - vec3(1,0,0));\\n\t\t\t\t\tfloat c = dot(hash3(i + vec3(0,1,0)), f - vec3(0,1,0));\\n\t\t\t\t\tfloat d = dot(hash3(i + vec3(1,1,0)), f - vec3(1,1,0));\\n\t\t\t\t\tfloat e = dot(hash3(i + vec3(0,0,1)), f - vec3(0,0,1));\\n\t\t\t\t\tfloat f_val = dot(hash3(i + vec3(1,0,1)), f - vec3(1,0,1));\\n\t\t\t\t\tfloat g = dot(hash3(i + vec3(0,1,1)), f - vec3(0,1,1));\\n\t\t\t\t\tfloat h = dot(hash3(i + vec3(1,1,1)), f - vec3(1,1,1));\\n\t\t\t\t\t\\n\t\t\t\t\tfloat k0 = mix(a, b, u.x);\\n\t\t\t\t\tfloat k1 = mix(c, d, u.x);\\n\t\t\t\t\tfloat k2 = mix(e, f_val, u.x);\\n\t\t\t\t\tfloat k3 = mix(g, h, u.x);\\n\t\t\t\t\t\\n\t\t\t\t\tfloat x1 = mix(k0, k1, u.y);\\n\t\t\t\t\tfloat x2 = mix(k2, k3, u.y);\\n\t\t\t\t\t\\n\t\t\t\t\treturn mix(x1, x2, u.z);\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\t// Magnetohydrodynamic turbulence cascade\\n\t\t\t\tfloat mhdTurbulence(vec3 pos, float time) {\\n\t\t\t\t\tfloat turbulence = 0.0;\\n\t\t\t\t\tfloat amplitude = 1.0;\\n\t\t\t\t\tfloat frequency = 1.0;\\n\t\t\t\t\t\\n\t\t\t\t\t// Kolmogorov-like turbulence cascade\\n\t\t\t\t\tfor (int i = 0; i < 8; i++) {\\n\t\t\t\t\t\tvec3 p = pos * frequency + vec3(time * 0.4, time * 0.6, time * 0.3);\\n\t\t\t\t\t\tturbulence += amplitude * abs(noise3D(p));\\n\t\t\t\t\t\tamplitude *= 0.5;\\n\t\t\t\t\t\tfrequency *= 2.3;\\n\t\t\t\t\t}\\n\t\t\t\t\t\\n\t\t\t\t\t// Magnetorotational instability\\n\t\t\t\t\tfloat mri = sin(pos.x * 12.0 + time * 3.0) * sin(pos.z * 12.0 + time * 2.5);\\n\t\t\t\t\tturbulence += abs(mri) * 0.4;\\n\t\t\t\t\t\\n\t\t\t\t\t// Kelvin-Helmholtz instability\\n\t\t\t\t\tfloat kh = sin((pos.x + pos.z) * 8.0 + time * 4.0) * 0.3;\\n\t\t\t\t\tturbulence += abs(kh) * 0.2;\\n\t\t\t\t\t\\n\t\t\t\t\treturn turbulence;\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\t// Relativistic Keplerian velocity with ISCO\\n\t\t\t\tfloat kerrVelocity(float radius, float spin, float mass) {\\n\t\t\t\t\tfloat rs = 2.0 * mass;\\n\t\t\t\t\tfloat a = spin * rs * 0.5;\\n\t\t\t\t\t\\n\t\t\t\t\t// ISCO for Kerr metric\\n\t\t\t\t\tfloat z1 = 1.0 + pow(1.0 - spin * spin, 1.0/3.0) * \\n\t\t\t\t\t\t\t  (pow(1.0 + spin, 1.0/3.0) + pow(1.0 - spin, 1.0/3.0));\\n\t\t\t\t\tfloat z2 = sqrt(3.0 * spin * spin + z1 * z1);\\n\t\t\t\t\tfloat isco = rs * (3.0 + z2 - sqrt((3.0 - z1) * (3.0 + z1 + 2.0 * z2)));\\n\t\t\t\t\t\\n\t\t\t\t\tif (radius < isco) radius = isco;\\n\t\t\t\t\t\\n\t\t\t\t\t// Relativistic Keplerian frequency\\n\t\t\t\t\tfloat omega = 1.0 / (pow(radius, 1.5) + a);\\n\t\t\t\t\treturn omega * radius * 0.3; // Scale for visualization\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\t// Synchrotron radiation spectrum\\n\t\t\t\tvec3 synchrotronSpectrum(float B, float ne, float gamma) {\\n\t\t\t\t\tfloat nu_c = 1.6e-19 * B * gamma * gamma; // Critical frequency\\n\t\t\t\t\t\\n\t\t\t\t\t// Simplified synchrotron spectrum\\n\t\t\t\t\tvec3 spectrum = vec3(1.0);\\n\t\t\t\t\tif (nu_c < 0.3) {\\n\t\t\t\t\t\tspectrum = vec3(1.0, 0.4, 0.1); // Radio\\n\t\t\t\t\t} else if (nu_c < 0.7) {\\n\t\t\t\t\t\tspectrum = vec3(1.0, 0.7, 0.5); // Optical\\n\t\t\t\t\t} else {\\n\t\t\t\t\t\tspectrum = vec3(0.7, 0.8, 1.0); // X-ray\\n\t\t\t\t\t}\\n\t\t\t\t\t\\n\t\t\t\t\tfloat intensity = B * B * ne * gamma;\\n\t\t\t\t\treturn spectrum * intensity;\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\t// Relativistic beaming and boosting\\n\t\t\t\tfloat relativisticBeaming(vec3 velocity, vec3 viewDir, float gamma) {\\n\t\t\t\t\tfloat beta = length(velocity);\\n\t\t\t\t\tfloat cosTheta = dot(normalize(velocity), viewDir);\\n\t\t\t\t\t\\n\t\t\t\t\t// Doppler factor for relativistic beaming\\n\t\t\t\t\tfloat doppler = 1.0 / (gamma * (1.0 - beta * cosTheta));\\n\t\t\t\t\t\\n\t\t\t\t\t// Intensity enhancement I ∝ δ^3\\n\t\t\t\t\treturn pow(max(doppler, 0.1), 3.0);\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\tvoid main() {\\n\t\t\t\t\tif (vRadius < innerRadius || vRadius > outerRadius) discard;\\n\t\t\t\t\t\\n\t\t\t\t\t// Coordinate system and motion\\n\t\t\t\t\tfloat angle = atan(vPosition.z, vPosition.x);\\n\t\t\t\t\tvec3 diskCoord = vec3(vRadius, angle + time * 0.7, vHeight * 5.0);\\n\t\t\t\t\t\\n\t\t\t\t\t// Advanced turbulence field\\n\t\t\t\t\tfloat turbulence = mhdTurbulence(diskCoord * 0.2, time * 1.5);\\n\t\t\t\t\t\\n\t\t\t\t\t// Enhanced temperature profile\\n\t\t\t\t\tfloat localTemp = temperature * pow(vRadius / innerRadius, -0.75);\\n\t\t\t\t\tlocalTemp *= (1.0 - sqrt(innerRadius / vRadius)); // Zero at ISCO\\n\t\t\t\t\tlocalTemp *= (0.6 + turbulence * 0.8);\\n\t\t\t\t\t\\n\t\t\t\t\t// Relativistic orbital velocity\\n\t\t\t\t\tfloat orbitalVel = kerrVelocity(vRadius, spin, 1.0);\\n\t\t\t\t\t\\n\t\t\t\t\t// Enhanced magnetic field with flux conservation\\n\t\t\t\t\tfloat localMagField = magneticField * pow(vRadius / innerRadius, -1.25);\\n\t\t\t\t\tlocalMagField *= (1.0 + turbulence * 0.5);\\n\t\t\t\t\t\\n\t\t\t\t\t// Plasma density with hydrostatic equilibrium\\n\t\t\t\t\tfloat localDensity = plasmaDensity * pow(vRadius / innerRadius, -1.5);\\n\t\t\t\t\tlocalDensity *= exp(-abs(vHeight) * 3.0); // Vertical structure\\n\t\t\t\t\tlocalDensity *= (0.8 + turbulence * 0.4);\\n\t\t\t\t\t\\n\t\t\t\t\t// Relativistic gamma factor for electrons\\n\t\t\t\t\tfloat gamma = 1.0 + localTemp / 1000.0 + localMagField * 0.001;\\n\t\t\t\t\t\\n\t\t\t\t\t// Synchrotron emission\\n\t\t\t\t\tvec3 synchrotron = synchrotronSpectrum(localMagField, localDensity, gamma);\\n\t\t\t\t\tsynchrotron *= synchrotronEmission;\\n\t\t\t\t\t\\n\t\t\t\t\t// Thermal emission temperature mapping\\n\t\t\t\t\tvec3 thermalColor = baseColor;\\n\t\t\t\t\tfloat tempRatio = localTemp / temperature;\\n\t\t\t\t\tif (tempRatio > 1.5) {\\n\t\t\t\t\t\tthermalColor = vec3(1.0, 0.98, 0.95); // Ultra-hot white-blue\\n\t\t\t\t\t} else if (tempRatio > 1.0) {\\n\t\t\t\t\t\tthermalColor = vec3(1.0, 0.92, 0.85); // Hot white\\n\t\t\t\t\t} else if (tempRatio > 0.7) {\\n\t\t\t\t\t\tthermalColor = vec3(1.0, 0.85, 0.7); // Warm white\\n\t\t\t\t\t} else if (tempRatio > 0.4) {\\n\t\t\t\t\t\tthermalColor = vec3(1.0, 0.75, 0.55); // Yellow\\n\t\t\t\t\t} else {\\n\t\t\t\t\t\tthermalColor = vec3(1.0, 0.6, 0.3); // Orange-red\\n\t\t\t\t\t}\\n\t\t\t\t\t\\n\t\t\t\t\t// Combine emission mechanisms\\n\t\t\t\t\tvec3 totalEmission = mix(thermalColor, synchrotron, 0.4);\\n\t\t\t\t\t\\n\t\t\t\t\t// Magnetic field visualization\\n\t\t\t\t\tfloat magneticPattern = sin(angle * 16.0 + time * 4.0 + vRadius * 3.0);\\n\t\t\t\t\tmagneticPattern *= sin(vHeight * 20.0 + time * 2.0);\\n\t\t\t\t\ttotalEmission += vec3(0.2, 0.5, 0.9) * abs(magneticPattern) * 0.25;\\n\t\t\t\t\t\\n\t\t\t\t\t// Corona heating and X-ray emission\\n\t\t\t\t\tfloat coronaEffect = exp(-abs(vHeight) * 4.0) * (coronaTemp / temperature);\\n\t\t\t\t\ttotalEmission += vec3(0.9, 0.95, 1.0) * coronaEffect * 0.4;\\n\t\t\t\t\t\\n\t\t\t\t\t// Surface intensity with realistic brightness\\n\t\t\t\t\tfloat intensity = pow(localTemp / temperature, 1.2) * (0.4 + turbulence * 0.6);\\n\t\t\t\t\tintensity *= localDensity * 2.0;\\n\t\t\t\t\tintensity *= smoothstep(innerRadius, innerRadius * 1.15, vRadius);\\n\t\t\t\t\tintensity *= smoothstep(outerRadius, outerRadius * 0.85, vRadius);\\n\t\t\t\t\t\\n\t\t\t\t\t// Relativistic beaming effects\\n\t\t\t\t\tvec3 velocity = vec3(-vPosition.z, 0.0, vPosition.x) * orbitalVel;\\n\t\t\t\t\tfloat beaming = relativisticBeaming(velocity, normalize(cameraPosition - vWorldPosition), gamma);\\n\t\t\t\t\tintensity *= (1.0 + relativisticBeaming * (beaming - 1.0) * 0.3);\\n\t\t\t\t\t\\n\t\t\t\t\t// Doppler shift\\n\t\t\t\t\tfloat dopplerShift = 1.0 + orbitalVel * cos(angle + time * 0.5) * 0.15;\\n\t\t\t\t\ttotalEmission.r *= dopplerShift;\\n\t\t\t\t\ttotalEmission.g *= sqrt(dopplerShift);\\n\t\t\t\t\t\\n\t\t\t\t\t// Enhanced scintillation with multiple frequencies\\n\t\t\t\t\tfloat scint1 = sin(time * 25.0 + vRadius * 20.0 + angle * 12.0);\\n\t\t\t\t\tfloat scint2 = sin(time * 18.0 + vRadius * 15.0 + angle * 8.0);\\n\t\t\t\t\tfloat scintillation = 1.0 + (scint1 + scint2) * 0.08;\\n\t\t\t\t\tintensity *= scintillation;\\n\t\t\t\t\t\\n\t\t\t\t\t// Final color composition\\n\t\t\t\t\tvec3 finalColor = totalEmission * intensity;\\n\t\t\t\t\t\\n\t\t\t\t\t// Alpha channel with volumetric density\\n\t\t\t\t\tfloat alpha = intensity * accretionRate * volumetricDensity;\\n\t\t\t\t\talpha *= smoothstep(0.0, 0.5, turbulence);\\n\t\t\t\t\talpha *= localDensity * 1.5;\\n\t\t\t\t\t\\n\t\t\t\t\tgl_FragColor = vec4(finalColor, alpha);\\n\t\t\t\t}\\n\t\t\t\"\n        };\n    };\n    // Enhanced photon sphere shader with critical orbits\n    const createPhotonSphereShader = (config)=>{\n        return {\n            vertexShader: \"\\n\t\t\t\tvarying vec2 vUv;\\n\t\t\t\tvarying vec3 vPosition;\\n\t\t\t\tvarying vec3 vNormal;\\n\t\t\t\tvarying float vRadius;\\n\t\t\t\t\\n\t\t\t\tvoid main() {\\n\t\t\t\t\tvUv = uv;\\n\t\t\t\t\tvPosition = position;\\n\t\t\t\t\tvNormal = normal;\\n\t\t\t\t\tvRadius = length(position);\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n\t\t\t\t}\\n\t\t\t\",\n            fragmentShader: \"\\n\t\t\t\tuniform float time;\\n\t\t\t\tuniform float schwarzschildRadius;\\n\t\t\t\tuniform vec3 baseColor;\\n\t\t\t\tuniform float spin;\\n\t\t\t\t\\n\t\t\t\tvarying vec2 vUv;\\n\t\t\t\tvarying vec3 vPosition;\\n\t\t\t\tvarying vec3 vNormal;\\n\t\t\t\tvarying float vRadius;\\n\t\t\t\t\\n\t\t\t\t// Photon sphere radius for Kerr metric\\n\t\t\t\tfloat photonSphereRadius(float rs, float spin, float theta) {\\n\t\t\t\t\tfloat a = spin * rs * 0.5;\\n\t\t\t\t\tfloat rho = 2.0 * rs * (1.0 + cos(2.0 * theta) / 3.0);\\n\t\t\t\t\treturn rho;\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\t// Orbital instability visualization\\n\t\t\t\tfloat orbitalInstability(vec3 pos, float time) {\\n\t\t\t\t\tfloat angle = atan(pos.z, pos.x);\\n\t\t\t\t\tfloat precession = angle + time * 2.0 + sin(time * 0.5) * 0.3;\\n\t\t\t\t\t\\n\t\t\t\t\t// Chaotic orbital patterns\\n\t\t\t\t\tfloat chaos = sin(precession * 8.0) * sin(pos.y * 15.0 + time * 3.0);\\n\t\t\t\t\tchaos += sin(precession * 12.0 + time * 1.5) * 0.7;\\n\t\t\t\t\t\\n\t\t\t\t\treturn abs(chaos);\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\tvoid main() {\\n\t\t\t\t\tfloat theta = acos(clamp(vPosition.y / vRadius, -1.0, 1.0));\\n\t\t\t\t\tfloat photonRadius = photonSphereRadius(schwarzschildRadius, spin, theta);\\n\t\t\t\t\t\\n\t\t\t\t\t// Distance from photon sphere\\n\t\t\t\t\tfloat distanceFromPhotonSphere = abs(vRadius - photonRadius);\\n\t\t\t\t\t\\n\t\t\t\t\t// Critical orbit visualization\\n\t\t\t\t\tfloat criticalOrbit = 1.0 / (1.0 + distanceFromPhotonSphere * 10.0);\\n\t\t\t\t\t\\n\t\t\t\t\t// Unstable orbit patterns\\n\t\t\t\t\tfloat instability = orbitalInstability(vPosition, time);\\n\t\t\t\t\t\\n\t\t\t\t\t// Light ray accumulation effect\\n\t\t\t\t\tfloat rayAccumulation = exp(-distanceFromPhotonSphere * 5.0);\\n\t\t\t\t\t\\n\t\t\t\t\t// Intensity with quantum fluctuations\\n\t\t\t\t\tfloat intensity = criticalOrbit * (0.7 + instability * 0.3);\\n\t\t\t\t\tintensity *= rayAccumulation;\\n\t\t\t\t\t\\n\t\t\t\t\t// Pulsating effect from gravitational waves\\n\t\t\t\t\tfloat gwPulsation = 1.0 + sin(time * 8.0 + vRadius * 20.0) * 0.2;\\n\t\t\t\t\tintensity *= gwPulsation;\\n\t\t\t\t\t\\n\t\t\t\t\t// Color with relativistic blue-shifting\\n\t\t\t\t\tvec3 color = baseColor;\\n\t\t\t\t\tcolor += vec3(0.3, 0.4, 0.8) * instability * 0.5;\\n\t\t\t\t\tcolor *= (1.0 + spin * 0.3); // Frame dragging effect\\n\t\t\t\t\t\\n\t\t\t\t\t// Alpha with proper transparency\\n\t\t\t\t\tfloat alpha = intensity * 0.6;\\n\t\t\t\t\talpha *= smoothstep(photonRadius * 0.8, photonRadius * 1.2, vRadius);\\n\t\t\t\t\t\\n\t\t\t\t\tgl_FragColor = vec4(color, alpha);\\n\t\t\t\t}\\n\t\t\t\"\n        };\n    };\n    // Ultra-realistic relativistic jets\n    const createRelativisticJets = async (blackHoleGroup, config, THREE)=>{\n        const rs = calculateSchwarzschildRadius(config.mass);\n        const jetHeight = rs * 50;\n        const jetRadius = rs * 2;\n        const jetShader = {\n            vertexShader: \"\\n\t\t\t\tvarying vec2 vUv;\\n\t\t\t\tvarying vec3 vPosition;\\n\t\t\t\tvarying vec3 vWorldPosition;\\n\t\t\t\tvarying float vDistanceFromAxis;\\n\t\t\t\tvarying float vHeight;\\n\t\t\t\t\\n\t\t\t\tvoid main() {\\n\t\t\t\t\tvUv = uv;\\n\t\t\t\t\tvPosition = position;\\n\t\t\t\t\tvWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\\n\t\t\t\t\tvDistanceFromAxis = length(position.xz);\\n\t\t\t\t\tvHeight = abs(position.y);\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n\t\t\t\t}\\n\t\t\t\",\n            fragmentShader: \"\\n\t\t\t\tuniform float time;\\n\t\t\t\tuniform float jetPower;\\n\t\t\t\tuniform vec3 jetColor;\\n\t\t\t\tuniform float spin;\\n\t\t\t\tuniform float magneticField;\\n\t\t\t\t\\n\t\t\t\tvarying vec2 vUv;\\n\t\t\t\tvarying vec3 vPosition;\\n\t\t\t\tvarying vec3 vWorldPosition;\\n\t\t\t\tvarying float vDistanceFromAxis;\\n\t\t\t\tvarying float vHeight;\\n\t\t\t\t\\n\t\t\t\t// Relativistic jet physics\\n\t\t\t\tfloat jetVelocity(float height, float maxVel) {\\n\t\t\t\t\t// Acceleration profile\\n\t\t\t\t\tfloat acceleration = 1.0 - exp(-height * 0.1);\\n\t\t\t\t\treturn maxVel * acceleration;\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\t// Synchrotron radiation from jet plasma\\n\t\t\t\tvec3 jetSynchrotron(float B, float height, float velocity) {\\n\t\t\t\t\tfloat gamma = 1.0 / sqrt(1.0 - velocity * velocity);\\n\t\t\t\t\tfloat intensity = B * B * gamma * gamma;\\n\t\t\t\t\t\\n\t\t\t\t\t// Frequency-dependent emission\\n\t\t\t\t\tfloat freq = height * 0.01 + time * 0.1;\\n\t\t\t\t\tvec3 spectrum;\\n\t\t\t\t\tif (freq < 0.3) {\\n\t\t\t\t\t\tspectrum = vec3(1.0, 0.3, 0.1); // Radio\\n\t\t\t\t\t} else if (freq < 0.7) {\\n\t\t\t\t\t\tspectrum = vec3(1.0, 0.7, 0.4); // Optical\\n\t\t\t\t\t} else {\\n\t\t\t\t\t\tspectrum = vec3(0.6, 0.8, 1.0); // X-ray\\n\t\t\t\t\t}\\n\t\t\t\t\t\\n\t\t\t\t\treturn spectrum * intensity;\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\t// Magnetic confinement and collimation\\n\t\t\t\tfloat magneticConfinement(float radius, float height, float B) {\\n\t\t\t\t\tfloat hoop_stress = B * B / (1.0 + radius * radius);\\n\t\t\t\t\tfloat pressure_gradient = exp(-radius * 2.0);\\n\t\t\t\t\treturn hoop_stress * pressure_gradient;\\n\t\t\t\t}\\n\t\t\t\t\\n\t\t\t\tvoid main() {\\n\t\t\t\t\t// Jet velocity profile\\n\t\t\t\t\tfloat velocity = jetVelocity(vHeight, 0.99); // Near light speed\\n\t\t\t\t\t\\n\t\t\t\t\t// Magnetic field strength\\n\t\t\t\t\tfloat localB = magneticField * pow(vHeight + 1.0, -0.5);\\n\t\t\t\t\t\\n\t\t\t\t\t// Plasma density\\n\t\t\t\t\tfloat density = jetPower * exp(-vDistanceFromAxis * 3.0);\\n\t\t\t\t\tdensity *= exp(-vHeight * 0.05);\\n\t\t\t\t\t\\n\t\t\t\t\t// Synchrotron emission\\n\t\t\t\t\tvec3 synchrotron = jetSynchrotron(localB, vHeight, velocity);\\n\t\t\t\t\t\\n\t\t\t\t\t// Magnetic confinement effects\\n\t\t\t\t\tfloat confinement = magneticConfinement(vDistanceFromAxis, vHeight, localB);\\n\t\t\t\t\t\\n\t\t\t\t\t// Relativistic beaming\\n\t\t\t\t\tfloat gamma = 1.0 / sqrt(1.0 - velocity * velocity);\\n\t\t\t\t\tfloat beaming = pow(gamma, 3.0) * confinement;\\n\t\t\t\t\t\\n\t\t\t\t\t// Jet core and sheath structure\\n\t\t\t\t\tfloat coreRadius = 0.3;\\n\t\t\t\t\tfloat core = exp(-vDistanceFromAxis * 8.0);\\n\t\t\t\t\tfloat sheath = exp(-vDistanceFromAxis * 2.0) - core;\\n\t\t\t\t\t\\n\t\t\t\t\t// Color mixing\\n\t\t\t\t\tvec3 coreColor = jetColor * 2.0;\\n\t\t\t\t\tvec3 sheathColor = mix(jetColor, synchrotron, 0.5);\\n\t\t\t\t\tvec3 finalColor = core * coreColor + sheath * sheathColor;\\n\t\t\t\t\t\\n\t\t\t\t\t// Intensity with proper physics\\n\t\t\t\t\tfloat intensity = density * beaming * jetPower;\\n\t\t\t\t\tintensity *= (core * 2.0 + sheath * 0.8);\\n\t\t\t\t\t\\n\t\t\t\t\t// Turbulence and instabilities\\n\t\t\t\t\tfloat turbulence = sin(vHeight * 0.5 + time * 3.0) * sin(vDistanceFromAxis * 10.0 + time * 2.0);\\n\t\t\t\t\tintensity *= (1.0 + abs(turbulence) * 0.3);\\n\t\t\t\t\t\\n\t\t\t\t\t// Alpha with distance attenuation\\n\t\t\t\t\tfloat alpha = intensity * 0.8;\\n\t\t\t\t\talpha *= exp(-vHeight * 0.02); // Atmospheric absorption\\n\t\t\t\t\t\\n\t\t\t\t\tgl_FragColor = vec4(finalColor, alpha);\\n\t\t\t\t}\\n\t\t\t\"\n        };\n        const jetGeometry = new THREE.CylinderGeometry(jetRadius * 0.1, jetRadius, jetHeight, 16, 32);\n        const jetMaterial = new THREE.ShaderMaterial({\n            vertexShader: jetShader.vertexShader,\n            fragmentShader: jetShader.fragmentShader,\n            uniforms: {\n                time: {\n                    value: 0\n                },\n                jetPower: {\n                    value: config.jetPower\n                },\n                jetColor: {\n                    value: new THREE.Vector3(0.8, 0.9, 1.0)\n                },\n                spin: {\n                    value: config.spin\n                },\n                magneticField: {\n                    value: config.magneticField\n                }\n            },\n            transparent: true,\n            blending: THREE.AdditiveBlending,\n            depthWrite: false\n        });\n        // Top jet\n        const topJet = new THREE.Mesh(jetGeometry, jetMaterial.clone());\n        topJet.position.y = jetHeight / 2;\n        blackHoleGroup.add(topJet);\n        // Bottom jet\n        const bottomJet = new THREE.Mesh(jetGeometry, jetMaterial.clone());\n        bottomJet.position.y = -jetHeight / 2;\n        bottomJet.rotation.z = Math.PI;\n        blackHoleGroup.add(bottomJet);\n    };\n    // Enhanced starfield with realistic stellar distribution\n    const createAdvancedStarfield = async (scene, THREE)=>{\n        const starCount = 8000;\n        const starGeometry = new THREE.BufferGeometry();\n        const starPositions = new Float32Array(starCount * 3);\n        const starColors = new Float32Array(starCount * 3);\n        const starSizes = new Float32Array(starCount);\n        for(let i = 0; i < starCount; i++){\n            // Realistic stellar distribution\n            const phi = Math.random() * Math.PI * 2;\n            const cosTheta = Math.random() * 2 - 1;\n            const theta = Math.acos(cosTheta);\n            const r = 1000 + Math.random() * 2000;\n            starPositions[i * 3] = r * Math.sin(theta) * Math.cos(phi);\n            starPositions[i * 3 + 1] = r * Math.sin(theta) * Math.sin(phi);\n            starPositions[i * 3 + 2] = r * Math.cos(theta);\n            // Stellar colors based on temperature\n            const temp = Math.random();\n            if (temp < 0.1) {\n                // Red giants\n                starColors[i * 3] = 1.0;\n                starColors[i * 3 + 1] = 0.4;\n                starColors[i * 3 + 2] = 0.2;\n                starSizes[i] = 3.0 + Math.random() * 2.0;\n            } else if (temp < 0.3) {\n                // Orange dwarfs\n                starColors[i * 3] = 1.0;\n                starColors[i * 3 + 1] = 0.7;\n                starColors[i * 3 + 2] = 0.4;\n                starSizes[i] = 1.5 + Math.random() * 1.0;\n            } else if (temp < 0.7) {\n                // Sun-like stars\n                starColors[i * 3] = 1.0;\n                starColors[i * 3 + 1] = 1.0;\n                starColors[i * 3 + 2] = 0.9;\n                starSizes[i] = 1.0 + Math.random() * 0.5;\n            } else if (temp < 0.9) {\n                // Blue-white stars\n                starColors[i * 3] = 0.8;\n                starColors[i * 3 + 1] = 0.9;\n                starColors[i * 3 + 2] = 1.0;\n                starSizes[i] = 2.0 + Math.random() * 1.5;\n            } else {\n                // Blue giants\n                starColors[i * 3] = 0.6;\n                starColors[i * 3 + 1] = 0.8;\n                starColors[i * 3 + 2] = 1.0;\n                starSizes[i] = 4.0 + Math.random() * 3.0;\n            }\n        }\n        starGeometry.setAttribute(\"position\", new THREE.BufferAttribute(starPositions, 3));\n        starGeometry.setAttribute(\"color\", new THREE.BufferAttribute(starColors, 3));\n        starGeometry.setAttribute(\"size\", new THREE.BufferAttribute(starSizes, 1));\n        const starMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                time: {\n                    value: 0\n                }\n            },\n            vertexShader: \"\\n\t\t\t\tattribute float size;\\n\t\t\t\tattribute vec3 color;\\n\t\t\t\tvarying vec3 vColor;\\n\t\t\t\tuniform float time;\\n\t\t\t\t\\n\t\t\t\tvoid main() {\\n\t\t\t\t\tvColor = color;\\n\t\t\t\t\tvec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\\n\t\t\t\t\t\\n\t\t\t\t\t// Subtle twinkling\\n\t\t\t\t\tfloat twinkle = 1.0 + sin(time * 2.0 + position.x * 0.01) * 0.1;\\n\t\t\t\t\tgl_PointSize = size * twinkle * (300.0 / -mvPosition.z);\\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\\n\t\t\t\t}\\n\t\t\t\",\n            fragmentShader: \"\\n\t\t\t\tvarying vec3 vColor;\\n\t\t\t\t\\n\t\t\t\tvoid main() {\\n\t\t\t\t\tfloat r = length(gl_PointCoord - vec2(0.5));\\n\t\t\t\t\tif (r > 0.5) discard;\\n\t\t\t\t\t\\n\t\t\t\t\tfloat intensity = 1.0 - smoothstep(0.0, 0.5, r);\\n\t\t\t\t\tgl_FragColor = vec4(vColor * intensity, intensity);\\n\t\t\t\t}\\n\t\t\t\",\n            transparent: true,\n            blending: THREE.AdditiveBlending,\n            depthWrite: false,\n            vertexColors: true\n        });\n        const stars = new THREE.Points(starGeometry, starMaterial);\n        scene.add(stars);\n        return stars;\n    };\n    // Cinematic lighting setup with realistic illumination\n    const setupCinematicLighting = async (scene, THREE, config)=>{\n        // Ambient space lighting\n        const ambientLight = new THREE.AmbientLight(0x0a0a1a, 0.1);\n        scene.add(ambientLight);\n        // Accretion disk luminosity\n        const diskLight = new THREE.PointLight(0xffa366, 2.0, 100);\n        diskLight.position.set(0, 0, 0);\n        scene.add(diskLight);\n        // Hot spot illumination\n        const hotSpotLight = new THREE.PointLight(0xffffff, 1.5, 50);\n        hotSpotLight.position.set(config.diskInnerRadius * 2, 0, 0);\n        scene.add(hotSpotLight);\n        // Jet illumination\n        const jetLight1 = new THREE.PointLight(0x99ccff, 1.0, 200);\n        jetLight1.position.set(0, 30, 0);\n        scene.add(jetLight1);\n        const jetLight2 = new THREE.PointLight(0x99ccff, 1.0, 200);\n        jetLight2.position.set(0, -30, 0);\n        scene.add(jetLight2);\n        // Rim lighting for dramatic effect\n        const rimLight = new THREE.DirectionalLight(0x4466aa, 0.5);\n        rimLight.position.set(50, 50, 50);\n        scene.add(rimLight);\n    };\n    // Generate ultra-realistic black hole with all advanced features\n    const generateBlackHole = async ()=>{\n        if (!scene || !camera || !renderer) return;\n        setIsGenerating(true);\n        setError(null);\n        try {\n            const THREE = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_three_build_three_module_js\").then(__webpack_require__.bind(__webpack_require__, /*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\"));\n            // Clear existing black hole\n            clearBlackHole();\n            const blackHoleGroup = new THREE.Group();\n            const rs = calculateSchwarzschildRadius(defaultConfig.mass);\n            console.log(\"\\uD83D\\uDD73️ [BLACK HOLE] Generating ultra-realistic \".concat(defaultConfig.type, \" black hole\"));\n            console.log(\"\\uD83D\\uDD22 [PARAMS] Rs=\".concat(rs.toFixed(2), \", Spin=\").concat(defaultConfig.spin, \", Temp=\").concat(defaultConfig.temperature, \"K\"));\n            // 1. Event Horizon (Perfect Black Sphere)\n            const eventHorizonGeometry = new THREE.SphereGeometry(rs, 128, 128);\n            const eventHorizonMaterial = new THREE.MeshBasicMaterial({\n                color: 0x000000,\n                transparent: false\n            });\n            const eventHorizon = new THREE.Mesh(eventHorizonGeometry, eventHorizonMaterial);\n            blackHoleGroup.add(eventHorizon);\n            // 2. Enhanced Photon Sphere\n            const photonSphereGeometry = new THREE.SphereGeometry(rs * 1.5, 64, 64);\n            const photonSphereShader = createPhotonSphereShader(defaultConfig);\n            const photonSphereMaterial = new THREE.ShaderMaterial({\n                vertexShader: photonSphereShader.vertexShader,\n                fragmentShader: photonSphereShader.fragmentShader,\n                uniforms: {\n                    time: {\n                        value: 0\n                    },\n                    schwarzschildRadius: {\n                        value: rs\n                    },\n                    baseColor: {\n                        value: new THREE.Vector3(1.0, 0.95, 0.8)\n                    },\n                    spin: {\n                        value: defaultConfig.spin\n                    }\n                },\n                transparent: true,\n                blending: THREE.AdditiveBlending,\n                side: THREE.DoubleSide,\n                depthWrite: false\n            });\n            const photonSphere = new THREE.Mesh(photonSphereGeometry, photonSphereMaterial);\n            blackHoleGroup.add(photonSphere);\n            // 3. Ultra-Realistic Volumetric Accretion Disk\n            const diskGeometry = new THREE.RingGeometry(defaultConfig.diskInnerRadius * rs, defaultConfig.diskOuterRadius * rs, 512, 128);\n            const diskShader = createVolumetricDiskShader(defaultConfig);\n            const [r, g, b] = blackBodyColor(defaultConfig.temperature);\n            const diskMaterial = new THREE.ShaderMaterial({\n                vertexShader: diskShader.vertexShader,\n                fragmentShader: diskShader.fragmentShader,\n                uniforms: {\n                    time: {\n                        value: 0\n                    },\n                    innerRadius: {\n                        value: defaultConfig.diskInnerRadius * rs\n                    },\n                    outerRadius: {\n                        value: defaultConfig.diskOuterRadius * rs\n                    },\n                    temperature: {\n                        value: defaultConfig.temperature\n                    },\n                    accretionRate: {\n                        value: defaultConfig.accretionRate\n                    },\n                    spin: {\n                        value: defaultConfig.spin\n                    },\n                    inclination: {\n                        value: defaultConfig.inclination * Math.PI / 180\n                    },\n                    baseColor: {\n                        value: new THREE.Vector3(r, g, b)\n                    },\n                    magneticField: {\n                        value: defaultConfig.magneticField\n                    },\n                    coronaTemp: {\n                        value: defaultConfig.coronaTemperature\n                    },\n                    volumetricDensity: {\n                        value: defaultConfig.volumetricDensity\n                    },\n                    plasmaDensity: {\n                        value: defaultConfig.plasmaDensity\n                    },\n                    synchrotronEmission: {\n                        value: defaultConfig.synchrotronEmission\n                    },\n                    relativisticBeaming: {\n                        value: defaultConfig.relativisticBeaming\n                    },\n                    cameraPosition: {\n                        value: camera.position\n                    }\n                },\n                transparent: true,\n                blending: THREE.AdditiveBlending,\n                side: THREE.DoubleSide,\n                depthWrite: false\n            });\n            const accretionDisk = new THREE.Mesh(diskGeometry, diskMaterial);\n            accretionDisk.rotation.x = -Math.PI / 2;\n            accretionDisk.rotation.z = defaultConfig.inclination * Math.PI / 180;\n            blackHoleGroup.add(accretionDisk);\n            // 4. Enhanced Inner Hot Spot\n            const hotSpotGeometry = new THREE.RingGeometry(rs * 1.4, rs * 2.2, 64, 16);\n            const hotSpotMaterial = new THREE.MeshBasicMaterial({\n                color: 0xffffff,\n                transparent: true,\n                opacity: 0.9,\n                blending: THREE.AdditiveBlending\n            });\n            const hotSpot = new THREE.Mesh(hotSpotGeometry, hotSpotMaterial);\n            hotSpot.rotation.x = -Math.PI / 2;\n            blackHoleGroup.add(hotSpot);\n            // 5. Ultra-Realistic Relativistic Jets\n            await createRelativisticJets(blackHoleGroup, defaultConfig, THREE);\n            // 6. Advanced Starfield Background\n            await createAdvancedStarfield(scene, THREE);\n            // 7. Advanced Gravitational Lensing Layer\n            const lensingGeometry = new THREE.PlaneGeometry(200, 200);\n            const lensingShader = createAdvancedLensingShader(defaultConfig);\n            const lensingMaterial = new THREE.ShaderMaterial({\n                vertexShader: lensingShader.vertexShader,\n                fragmentShader: lensingShader.fragmentShader,\n                uniforms: {\n                    time: {\n                        value: 0\n                    },\n                    blackHolePosition: {\n                        value: new THREE.Vector3(0, 0, 0)\n                    },\n                    schwarzschildRadius: {\n                        value: rs\n                    },\n                    lensingStrength: {\n                        value: defaultConfig.lensingStrength\n                    },\n                    mass: {\n                        value: defaultConfig.mass\n                    },\n                    spin: {\n                        value: defaultConfig.spin\n                    },\n                    backgroundTexture: {\n                        value: null\n                    },\n                    resolution: {\n                        value: new THREE.Vector2(window.innerWidth, window.innerHeight)\n                    },\n                    cameraPosition: {\n                        value: camera.position\n                    }\n                },\n                transparent: true,\n                blending: THREE.NormalBlending,\n                side: THREE.DoubleSide\n            });\n            const lensingLayer = new THREE.Mesh(lensingGeometry, lensingMaterial);\n            lensingLayer.position.z = -50;\n            blackHoleGroup.add(lensingLayer);\n            // 8. Cinematic Lighting\n            await setupCinematicLighting(scene, THREE, defaultConfig);\n            // Add to scene\n            scene.add(blackHoleGroup);\n            blackHoleGroupRef.current = blackHoleGroup;\n            setCurrentBlackHole(blackHoleGroup);\n            console.log(\"✅ [BLACK HOLE] Ultra-realistic black hole generated successfully\");\n            onGenerate === null || onGenerate === void 0 ? void 0 : onGenerate();\n        } catch (error) {\n            console.error(\"❌ [BLACK HOLE] Generation failed:\", error);\n            setError(\"Failed to generate black hole: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        } finally{\n            setIsGenerating(false);\n        }\n    };\n    // Enhanced animation loop with all effects\n    const startBlackHoleAnimation = ()=>{\n        if (animationIdRef.current) {\n            cancelAnimationFrame(animationIdRef.current);\n        }\n        const animate = (time)=>{\n            if (currentBlackHole) {\n                const timeSeconds = time * 0.001;\n                // Update all shader uniforms\n                currentBlackHole.traverse((child)=>{\n                    if (child.material && child.material.uniforms) {\n                        if (child.material.uniforms.time) {\n                            child.material.uniforms.time.value = timeSeconds;\n                        }\n                        if (child.material.uniforms.cameraPosition && camera) {\n                            child.material.uniforms.cameraPosition.value.copy(camera.position);\n                        }\n                    }\n                });\n                // Animate accretion disk rotation\n                const disk = currentBlackHole.children.find((child)=>child.geometry && child.geometry.type === \"RingGeometry\");\n                if (disk) {\n                    disk.rotation.z += 0.005 * defaultConfig.spin;\n                }\n                // Animate relativistic jets\n                const jets = currentBlackHole.children.filter((child)=>child.geometry && child.geometry.type === \"CylinderGeometry\");\n                jets.forEach((jet, index)=>{\n                    jet.rotation.y += 0.01 * (index % 2 === 0 ? 1 : -1);\n                });\n                // Animate photon sphere\n                const photonSphere = currentBlackHole.children.find((child)=>child.material && child.material.uniforms && child.material.uniforms.schwarzschildRadius);\n                if (photonSphere && photonSphere.material.uniforms) {\n                    // Pulsating opacity for quantum effects\n                    const opacity = 0.3 + Math.sin(timeSeconds * 4) * 0.2;\n                    photonSphere.material.opacity = opacity;\n                }\n            }\n            animationIdRef.current = requestAnimationFrame(animate);\n        };\n        animationIdRef.current = requestAnimationFrame(animate);\n    };\n    // Enhanced cleanup\n    const clearBlackHole = ()=>{\n        if (currentBlackHole && scene) {\n            // Stop animation\n            if (animationIdRef.current) {\n                cancelAnimationFrame(animationIdRef.current);\n                animationIdRef.current = null;\n            }\n            // Dispose of all materials and geometries\n            currentBlackHole.traverse((child)=>{\n                if (child.geometry) {\n                    child.geometry.dispose();\n                }\n                if (child.material) {\n                    if (Array.isArray(child.material)) {\n                        child.material.forEach((material)=>material.dispose());\n                    } else {\n                        child.material.dispose();\n                    }\n                }\n            });\n            scene.remove(currentBlackHole);\n            setCurrentBlackHole(null);\n            blackHoleGroupRef.current = null;\n            console.log(\"🧹 [BLACK HOLE] Cleaned up successfully\");\n        }\n        onClear === null || onClear === void 0 ? void 0 : onClear();\n    };\n    // Initialize Three.js scene\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"BlackHoleRenderer.useEffect\": ()=>{\n            if (!mountRef.current) return;\n            const initScene = {\n                \"BlackHoleRenderer.useEffect.initScene\": async ()=>{\n                    try {\n                        const THREE = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_three_build_three_module_js\").then(__webpack_require__.bind(__webpack_require__, /*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\"));\n                        // Scene setup\n                        const newScene = new THREE.Scene();\n                        const newCamera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10000);\n                        const newRenderer = new THREE.WebGLRenderer({\n                            antialias: true,\n                            alpha: true,\n                            powerPreference: \"high-performance\"\n                        });\n                        newRenderer.setSize(window.innerWidth, window.innerHeight);\n                        newRenderer.setClearColor(0x000000, 1);\n                        newRenderer.toneMapping = THREE.ACESFilmicToneMapping;\n                        newRenderer.toneMappingExposure = 1.0;\n                        // Enhanced camera positioning\n                        newCamera.position.set(80, 30, 80);\n                        newCamera.lookAt(0, 0, 0);\n                        // Controls\n                        const { OrbitControls } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_three_examples_jsm_controls_OrbitControls_js\").then(__webpack_require__.bind(__webpack_require__, /*! three/examples/jsm/controls/OrbitControls */ \"(app-pages-browser)/./node_modules/three/examples/jsm/controls/OrbitControls.js\"));\n                        const controls = new OrbitControls(newCamera, newRenderer.domElement);\n                        controls.enableDamping = true;\n                        controls.dampingFactor = 0.05;\n                        controls.minDistance = 10;\n                        controls.maxDistance = 500;\n                        mountRef.current.appendChild(newRenderer.domElement);\n                        setScene(newScene);\n                        setCamera(newCamera);\n                        setRenderer(newRenderer);\n                        sceneRef.current = newScene;\n                        cameraRef.current = newCamera;\n                        rendererRef.current = newRenderer;\n                        // Render loop\n                        const renderLoop = {\n                            \"BlackHoleRenderer.useEffect.initScene.renderLoop\": ()=>{\n                                controls.update();\n                                newRenderer.render(newScene, newCamera);\n                                requestAnimationFrame(renderLoop);\n                            }\n                        }[\"BlackHoleRenderer.useEffect.initScene.renderLoop\"];\n                        renderLoop();\n                        // Handle resize\n                        const handleResize = {\n                            \"BlackHoleRenderer.useEffect.initScene.handleResize\": ()=>{\n                                newCamera.aspect = window.innerWidth / window.innerHeight;\n                                newCamera.updateProjectionMatrix();\n                                newRenderer.setSize(window.innerWidth, window.innerHeight);\n                            }\n                        }[\"BlackHoleRenderer.useEffect.initScene.handleResize\"];\n                        window.addEventListener(\"resize\", handleResize);\n                        return ({\n                            \"BlackHoleRenderer.useEffect.initScene\": ()=>{\n                                window.removeEventListener(\"resize\", handleResize);\n                                const mountElement = mountRef.current;\n                                if (mountElement && newRenderer.domElement) {\n                                    mountElement.removeChild(newRenderer.domElement);\n                                }\n                                newRenderer.dispose();\n                            }\n                        })[\"BlackHoleRenderer.useEffect.initScene\"];\n                    } catch (error) {\n                        console.error(\"Failed to initialize Three.js scene:\", error);\n                        setError(\"Failed to initialize 3D scene: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n                    }\n                }\n            }[\"BlackHoleRenderer.useEffect.initScene\"];\n            initScene();\n        }\n    }[\"BlackHoleRenderer.useEffect\"], []);\n    // Start animation when black hole is generated\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"BlackHoleRenderer.useEffect\": ()=>{\n            if (currentBlackHole) {\n                startBlackHoleAnimation();\n            }\n            return ({\n                \"BlackHoleRenderer.useEffect\": ()=>{\n                    if (animationIdRef.current) {\n                        cancelAnimationFrame(animationIdRef.current);\n                    }\n                }\n            })[\"BlackHoleRenderer.useEffect\"];\n        }\n    }[\"BlackHoleRenderer.useEffect\"], [\n        currentBlackHole,\n        camera\n    ]);\n    // Cleanup on unmount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"BlackHoleRenderer.useEffect\": ()=>{\n            return ({\n                \"BlackHoleRenderer.useEffect\": ()=>{\n                    clearBlackHole();\n                }\n            })[\"BlackHoleRenderer.useEffect\"];\n        }\n    }[\"BlackHoleRenderer.useEffect\"], []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"overflow-hidden relative w-full h-screen bg-black\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: mountRef,\n                className: \"w-full h-full\"\n            }, void 0, false, {\n                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                lineNumber: 1255,\n                columnNumber: 4\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute top-4 left-4 p-4 rounded-lg border backdrop-blur-sm bg-black/80 border-blue-500/30\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        className: \"mb-3 text-lg font-bold text-blue-400\",\n                        children: \"\\uD83D\\uDD73️ Ultra-Realistic Black Hole\"\n                    }, void 0, false, {\n                        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                        lineNumber: 1259,\n                        columnNumber: 5\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"space-y-2 text-sm\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex justify-between\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-gray-300\",\n                                        children: \"Type:\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                        lineNumber: 1263,\n                                        columnNumber: 7\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-blue-300\",\n                                        children: defaultConfig.type\n                                    }, void 0, false, {\n                                        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                        lineNumber: 1264,\n                                        columnNumber: 7\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1262,\n                                columnNumber: 6\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex justify-between\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-gray-300\",\n                                        children: \"Mass:\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                        lineNumber: 1267,\n                                        columnNumber: 7\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-blue-300\",\n                                        children: [\n                                            defaultConfig.mass,\n                                            \" M☉\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                        lineNumber: 1268,\n                                        columnNumber: 7\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1266,\n                                columnNumber: 6\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex justify-between\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-gray-300\",\n                                        children: \"Spin:\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                        lineNumber: 1271,\n                                        columnNumber: 7\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-blue-300\",\n                                        children: defaultConfig.spin.toFixed(2)\n                                    }, void 0, false, {\n                                        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                        lineNumber: 1272,\n                                        columnNumber: 7\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1270,\n                                columnNumber: 6\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex justify-between\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-gray-300\",\n                                        children: \"Temperature:\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                        lineNumber: 1275,\n                                        columnNumber: 7\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-orange-300\",\n                                        children: [\n                                            defaultConfig.temperature.toLocaleString(),\n                                            \" K\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                        lineNumber: 1276,\n                                        columnNumber: 7\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1274,\n                                columnNumber: 6\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex justify-between\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-gray-300\",\n                                        children: \"Accretion Rate:\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                        lineNumber: 1279,\n                                        columnNumber: 7\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-yellow-300\",\n                                        children: [\n                                            (defaultConfig.accretionRate * 100).toFixed(0),\n                                            \"%\"\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                        lineNumber: 1280,\n                                        columnNumber: 7\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1278,\n                                columnNumber: 6\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                        lineNumber: 1261,\n                        columnNumber: 5\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex mt-4 space-x-2\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: generateBlackHole,\n                                disabled: isGenerating,\n                                className: \"px-3 py-2 text-sm font-medium text-white bg-blue-600 rounded transition-colors hover:bg-blue-700 disabled:bg-gray-600\",\n                                children: isGenerating ? \"⚫ Generating...\" : \"🚀 Generate\"\n                            }, void 0, false, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1285,\n                                columnNumber: 6\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: clearBlackHole,\n                                disabled: !currentBlackHole,\n                                className: \"px-3 py-2 text-sm font-medium text-white bg-red-600 rounded transition-colors hover:bg-red-700 disabled:bg-gray-600\",\n                                children: \"\\uD83E\\uDDF9 Clear\"\n                            }, void 0, false, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1289,\n                                columnNumber: 6\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                        lineNumber: 1284,\n                        columnNumber: 5\n                    }, this),\n                    error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"p-2 mt-3 text-xs text-red-300 rounded border border-red-500 bg-red-900/50\",\n                        children: error\n                    }, void 0, false, {\n                        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                        lineNumber: 1294,\n                        columnNumber: 15\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                lineNumber: 1258,\n                columnNumber: 4\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute top-4 right-4 p-4 max-w-xs rounded-lg border backdrop-blur-sm bg-black/80 border-purple-500/30\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                        className: \"mb-2 font-bold text-purple-400\",\n                        children: \"\\uD83D\\uDD2C Physics Features\"\n                    }, void 0, false, {\n                        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                        lineNumber: 1299,\n                        columnNumber: 5\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                        className: \"space-y-1 text-xs text-gray-300\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                children: \"✨ Kerr Spacetime Geometry\"\n                            }, void 0, false, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1301,\n                                columnNumber: 6\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                children: \"\\uD83C\\uDF0C Gravitational Lensing\"\n                            }, void 0, false, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1302,\n                                columnNumber: 6\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                children: \"\\uD83D\\uDCAB Relativistic Jets\"\n                            }, void 0, false, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1303,\n                                columnNumber: 6\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                children: \"\\uD83D\\uDD25 Synchrotron Radiation\"\n                            }, void 0, false, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1304,\n                                columnNumber: 6\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                children: \"⚡ Magnetohydrodynamics\"\n                            }, void 0, false, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1305,\n                                columnNumber: 6\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                children: \"\\uD83C\\uDF00 Frame Dragging\"\n                            }, void 0, false, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1306,\n                                columnNumber: 6\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                children: \"\\uD83D\\uDC8E Photon Sphere\"\n                            }, void 0, false, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1307,\n                                columnNumber: 6\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                children: \"\\uD83C\\uDFAF Einstein Rings\"\n                            }, void 0, false, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1308,\n                                columnNumber: 6\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                children: \"\\uD83C\\uDF21️ Blackbody Radiation\"\n                            }, void 0, false, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1309,\n                                columnNumber: 6\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                children: \"⚛️ Plasma Physics\"\n                            }, void 0, false, {\n                                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                                lineNumber: 1310,\n                                columnNumber: 6\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                        lineNumber: 1300,\n                        columnNumber: 5\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                lineNumber: 1298,\n                columnNumber: 4\n            }, this),\n            isGenerating && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex absolute inset-0 justify-center items-center bg-black/50\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"text-xl text-white\",\n                    children: \"⚫ Generating Ultra-Realistic Black Hole...\"\n                }, void 0, false, {\n                    fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                    lineNumber: 1316,\n                    columnNumber: 6\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n                lineNumber: 1315,\n                columnNumber: 5\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/byronwade/cosmic/src/components/BlackHoleRenderer.tsx\",\n        lineNumber: 1254,\n        columnNumber: 3\n    }, this);\n}\n_s(BlackHoleRenderer, \"xmIzCHLZa7LLtnPEquuWRim4//M=\");\n_c = BlackHoleRenderer;\nvar _c;\n$RefreshReg$(_c, \"BlackHoleRenderer\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL0JsYWNrSG9sZVJlbmRlcmVyLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFMkQ7QUE0QjVDLFNBQVNJLGtCQUFrQixLQUE0RDtRQUE1RCxFQUFFQyxVQUFVLEVBQUVDLE9BQU8sRUFBRUMsU0FBUyxDQUFDLENBQUMsRUFBMEIsR0FBNUQ7O0lBQ3pDLE1BQU1DLFdBQVdQLDZDQUFNQSxDQUFpQjtJQUN4QyxNQUFNUSxXQUFXUiw2Q0FBTUEsQ0FBTTtJQUM3QixNQUFNUyxjQUFjVCw2Q0FBTUEsQ0FBTTtJQUNoQyxNQUFNVSxZQUFZViw2Q0FBTUEsQ0FBTTtJQUM5QixNQUFNVyxvQkFBb0JYLDZDQUFNQSxDQUFNO0lBQ3RDLE1BQU1ZLGlCQUFpQlosNkNBQU1BLENBQWdCO0lBRTdDLE1BQU0sQ0FBQ2EsT0FBT0MsU0FBUyxHQUFHWiwrQ0FBUUEsQ0FBTTtJQUN4QyxNQUFNLENBQUNhLFFBQVFDLFVBQVUsR0FBR2QsK0NBQVFBLENBQU07SUFDMUMsTUFBTSxDQUFDZSxVQUFVQyxZQUFZLEdBQUdoQiwrQ0FBUUEsQ0FBTTtJQUM5QyxNQUFNLENBQUNpQixrQkFBa0JDLG9CQUFvQixHQUFHbEIsK0NBQVFBLENBQU07SUFDOUQsTUFBTSxDQUFDbUIsY0FBY0MsZ0JBQWdCLEdBQUdwQiwrQ0FBUUEsQ0FBQztJQUNqRCxNQUFNLENBQUNxQixPQUFPQyxTQUFTLEdBQUd0QiwrQ0FBUUEsQ0FBZ0I7SUFFbEQsMkRBQTJEO0lBQzNELE1BQU11QixnQkFBaUM7UUFDdENDLE1BQU07UUFDTkMsTUFBTTtRQUNOQyxhQUFhO1FBQ2JDLGlCQUFpQjtRQUNqQkMsaUJBQWlCO1FBQ2pCQyxhQUFhO1FBQ2JDLGVBQWU7UUFDZkMsZUFBZTtRQUNmQyxtQkFBbUI7UUFDbkJDLFVBQVU7UUFDVkMsaUJBQWlCO1FBQ2pCQyxNQUFNO1FBQ05DLGlCQUFpQjtRQUNqQkMsbUJBQW1CO1FBQ25CQyxlQUFlO1FBQ2ZDLHFCQUFx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Ozs7Ozs7MENBQ0osOERBQUNBOzBDQUFHOzs7Ozs7MENBQ0osOERBQUNBOzBDQUFHOzs7Ozs7MENBQ0osOERBQUNBOzBDQUFHOzs7Ozs7MENBQ0osOERBQUNBOzBDQUFHOzs7Ozs7MENBQ0osOERBQUNBOzBDQUFHOzs7Ozs7MENBQ0osOERBQUNBOzBDQUFHOzs7Ozs7MENBQ0osOERBQUNBOzBDQUFHOzs7Ozs7MENBQ0osOERBQUNBOzBDQUFHOzs7Ozs7MENBQ0osOERBQUNBOzBDQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7WUFJTDNOLDhCQUNBLDhEQUFDZ047Z0JBQUlDLFdBQVU7MEJBQ2QsNEVBQUNEO29CQUFJQyxXQUFVOzhCQUFxQjs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLekM7R0Exd0N3Qm5PO0tBQUFBIiwic291cmNlcyI6WyIvVXNlcnMvYnlyb253YWRlL2Nvc21pYy9zcmMvY29tcG9uZW50cy9CbGFja0hvbGVSZW5kZXJlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCBSZWFjdCwgeyB1c2VSZWYsIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuaW50ZXJmYWNlIEJsYWNrSG9sZUNvbmZpZyB7XG5cdG1hc3M6IG51bWJlcjsgLy8gU29sYXIgbWFzc2VzXG5cdHNwaW46IG51bWJlcjsgLy8gMC0xIChLZXJyIHBhcmFtZXRlcilcblx0aW5jbGluYXRpb246IG51bWJlcjsgLy8gRGVncmVlc1xuXHRkaXNrSW5uZXJSYWRpdXM6IG51bWJlcjsgLy8gU2Nod2FyenNjaGlsZCByYWRpaVxuXHRkaXNrT3V0ZXJSYWRpdXM6IG51bWJlcjsgLy8gU2Nod2FyenNjaGlsZCByYWRpaVxuXHR0ZW1wZXJhdHVyZTogbnVtYmVyOyAvLyBLZWx2aW5cblx0YWNjcmV0aW9uUmF0ZTogbnVtYmVyOyAvLyAwLTFcblx0bWFnbmV0aWNGaWVsZDogbnVtYmVyOyAvLyBUZXNsYVxuXHRjb3JvbmFUZW1wZXJhdHVyZTogbnVtYmVyOyAvLyBLZWx2aW5cblx0amV0UG93ZXI6IG51bWJlcjsgLy8gMC0xXG5cdHZpZXdpbmdEaXN0YW5jZTogbnVtYmVyOyAvLyBTY2h3YXJ6c2NoaWxkIHJhZGlpXG5cdHR5cGU6IFwic3RlbGxhclwiIHwgXCJpbnRlcm1lZGlhdGVcIiB8IFwic3VwZXJtYXNzaXZlXCI7XG5cdGxlbnNpbmdTdHJlbmd0aDogbnVtYmVyOyAvLyAwLTFcblx0dm9sdW1ldHJpY0RlbnNpdHk6IG51bWJlcjsgLy8gMC0xXG5cdHBsYXNtYURlbnNpdHk6IG51bWJlcjsgLy8gMC0xXG5cdHN5bmNocm90cm9uRW1pc3Npb246IG51bWJlcjsgLy8gMC0xXG5cdHJlbGF0aXZpc3RpY0JlYW1pbmc6IG51bWJlcjsgLy8gMC0xXG59XG5cbmludGVyZmFjZSBCbGFja0hvbGVSZW5kZXJlclByb3BzIHtcblx0b25HZW5lcmF0ZT86ICgpID0+IHZvaWQ7XG5cdG9uQ2xlYXI/OiAoKSA9PiB2b2lkO1xuXHRjb25maWc/OiBQYXJ0aWFsPEJsYWNrSG9sZUNvbmZpZz47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJsYWNrSG9sZVJlbmRlcmVyKHsgb25HZW5lcmF0ZSwgb25DbGVhciwgY29uZmlnID0ge30gfTogQmxhY2tIb2xlUmVuZGVyZXJQcm9wcykge1xuXHRjb25zdCBtb3VudFJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XG5cdGNvbnN0IHNjZW5lUmVmID0gdXNlUmVmPGFueT4obnVsbCk7XG5cdGNvbnN0IHJlbmRlcmVyUmVmID0gdXNlUmVmPGFueT4obnVsbCk7XG5cdGNvbnN0IGNhbWVyYVJlZiA9IHVzZVJlZjxhbnk+KG51bGwpO1xuXHRjb25zdCBibGFja0hvbGVHcm91cFJlZiA9IHVzZVJlZjxhbnk+KG51bGwpO1xuXHRjb25zdCBhbmltYXRpb25JZFJlZiA9IHVzZVJlZjxudW1iZXIgfCBudWxsPihudWxsKTtcblxuXHRjb25zdCBbc2NlbmUsIHNldFNjZW5lXSA9IHVzZVN0YXRlPGFueT4obnVsbCk7XG5cdGNvbnN0IFtjYW1lcmEsIHNldENhbWVyYV0gPSB1c2VTdGF0ZTxhbnk+KG51bGwpO1xuXHRjb25zdCBbcmVuZGVyZXIsIHNldFJlbmRlcmVyXSA9IHVzZVN0YXRlPGFueT4obnVsbCk7XG5cdGNvbnN0IFtjdXJyZW50QmxhY2tIb2xlLCBzZXRDdXJyZW50QmxhY2tIb2xlXSA9IHVzZVN0YXRlPGFueT4obnVsbCk7XG5cdGNvbnN0IFtpc0dlbmVyYXRpbmcsIHNldElzR2VuZXJhdGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cdGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XG5cblx0Ly8gVWx0cmEtZW5oYW5jZWQgY29uZmlndXJhdGlvbiBiYXNlZCBvbiBhZHZhbmNlZCByZWZlcmVuY2Vcblx0Y29uc3QgZGVmYXVsdENvbmZpZzogQmxhY2tIb2xlQ29uZmlnID0ge1xuXHRcdG1hc3M6IDEwLFxuXHRcdHNwaW46IDAuOTUsXG5cdFx0aW5jbGluYXRpb246IDM1LFxuXHRcdGRpc2tJbm5lclJhZGl1czogMS41LFxuXHRcdGRpc2tPdXRlclJhZGl1czogMjAsXG5cdFx0dGVtcGVyYXR1cmU6IDgwMDAwLFxuXHRcdGFjY3JldGlvblJhdGU6IDAuODUsXG5cdFx0bWFnbmV0aWNGaWVsZDogMjAwMDAwMCxcblx0XHRjb3JvbmFUZW1wZXJhdHVyZTogMTUwMDAwMDAwLFxuXHRcdGpldFBvd2VyOiAwLjgsXG5cdFx0dmlld2luZ0Rpc3RhbmNlOiAxNTAsXG5cdFx0dHlwZTogXCJzdXBlcm1hc3NpdmVcIixcblx0XHRsZW5zaW5nU3RyZW5ndGg6IDEuMixcblx0XHR2b2x1bWV0cmljRGVuc2l0eTogMC43LFxuXHRcdHBsYXNtYURlbnNpdHk6IDAuOSxcblx0XHRzeW5jaHJvdHJvbkVtaXNzaW9uOiAwLjk1LFxuXHRcdHJlbGF0aXZpc3RpY0JlYW1pbmc6IDAuOCxcblx0XHQuLi5jb25maWcsXG5cdH07XG5cblx0Ly8gUHJlY2lzZSBTY2h3YXJ6c2NoaWxkIHJhZGl1cyBjYWxjdWxhdGlvblxuXHRjb25zdCBjYWxjdWxhdGVTY2h3YXJ6c2NoaWxkUmFkaXVzID0gKG1hc3M6IG51bWJlcik6IG51bWJlciA9PiB7XG5cdFx0cmV0dXJuIG1hc3MgKiAzLjA7IC8vIFNpbXBsaWZpZWQgZm9yIHZpc3VhbGl6YXRpb25cblx0fTtcblxuXHQvLyBFbmhhbmNlZCBibGFja2JvZHkgcmFkaWF0aW9uIHdpdGggcmVsYXRpdmlzdGljIGNvcnJlY3Rpb25zXG5cdGNvbnN0IGJsYWNrQm9keUNvbG9yID0gKHRlbXBlcmF0dXJlOiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0gPT4ge1xuXHRcdGNvbnN0IHQgPSBNYXRoLm1heCh0ZW1wZXJhdHVyZSwgMTAwMCkgLyAxMDAwMDtcblxuXHRcdGxldCByLCBnLCBiO1xuXG5cdFx0aWYgKHQgPCAwLjUpIHtcblx0XHRcdHIgPSAxLjA7XG5cdFx0XHRnID0gTWF0aC5wb3codCAqIDIuMCwgMC42KTtcblx0XHRcdGIgPSBNYXRoLnBvdyh0ICogMi4wLCAyLjApO1xuXHRcdH0gZWxzZSBpZiAodCA8IDAuOCkge1xuXHRcdFx0ciA9IDEuMDtcblx0XHRcdGcgPSAwLjggKyAoMC4yICogKHQgLSAwLjUpKSAvIDAuMztcblx0XHRcdGIgPSAwLjYgKyAoMC40ICogKHQgLSAwLjUpKSAvIDAuMztcblx0XHR9IGVsc2Uge1xuXHRcdFx0ciA9IDEuMCAtICgwLjIgKiAodCAtIDAuOCkpIC8gMC4yO1xuXHRcdFx0ZyA9IDAuOTUgKyAoMC4wNSAqICh0IC0gMC44KSkgLyAwLjI7XG5cdFx0XHRiID0gMS4wO1xuXHRcdH1cblxuXHRcdC8vIFJlbGF0aXZpc3RpYyBibHVlLXNoaWZ0aW5nIGZvciBleHRyZW1lIHRlbXBlcmF0dXJlc1xuXHRcdGlmICh0ZW1wZXJhdHVyZSA+IDIwMDAwMCkge1xuXHRcdFx0Y29uc3QgYm9vc3QgPSBNYXRoLm1pbih0ZW1wZXJhdHVyZSAvIDIwMDAwMDAsIDEuMCk7XG5cdFx0XHRiID0gTWF0aC5taW4oMS4wLCBiICsgYm9vc3QgKiAwLjQpO1xuXHRcdFx0ciA9IE1hdGgubWF4KDAuNCwgciAtIGJvb3N0ICogMC4zKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gW3IsIGcsIGJdO1xuXHR9O1xuXG5cdC8vIFVsdHJhLWFkdmFuY2VkIGdyYXZpdGF0aW9uYWwgbGVuc2luZyB3aXRoIEtlcnIgc3BhY2V0aW1lXG5cdGNvbnN0IGNyZWF0ZUFkdmFuY2VkTGVuc2luZ1NoYWRlciA9IChjb25maWc6IEJsYWNrSG9sZUNvbmZpZykgPT4ge1xuXHRcdHJldHVybiB7XG5cdFx0XHR2ZXJ0ZXhTaGFkZXI6IGBcblx0XHRcdFx0dmFyeWluZyB2ZWMyIHZVdjtcblx0XHRcdFx0dmFyeWluZyB2ZWMzIHZQb3NpdGlvbjtcblx0XHRcdFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xuXHRcdFx0XHR2YXJ5aW5nIHZlYzMgdlZpZXdEaXJlY3Rpb247XG5cdFx0XHRcdFxuXHRcdFx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHRcdFx0dlV2ID0gdXY7XG5cdFx0XHRcdFx0dlBvc2l0aW9uID0gcG9zaXRpb247XG5cdFx0XHRcdFx0dldvcmxkUG9zaXRpb24gPSAobW9kZWxNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApKS54eXo7XG5cdFx0XHRcdFx0dlZpZXdEaXJlY3Rpb24gPSBub3JtYWxpemUodldvcmxkUG9zaXRpb24gLSBjYW1lcmFQb3NpdGlvbik7XG5cdFx0XHRcdFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKTtcblx0XHRcdFx0fVxuXHRcdFx0YCxcblx0XHRcdGZyYWdtZW50U2hhZGVyOiBgXG5cdFx0XHRcdHVuaWZvcm0gZmxvYXQgdGltZTtcblx0XHRcdFx0dW5pZm9ybSB2ZWMzIGJsYWNrSG9sZVBvc2l0aW9uO1xuXHRcdFx0XHR1bmlmb3JtIGZsb2F0IHNjaHdhcnpzY2hpbGRSYWRpdXM7XG5cdFx0XHRcdHVuaWZvcm0gZmxvYXQgbGVuc2luZ1N0cmVuZ3RoO1xuXHRcdFx0XHR1bmlmb3JtIGZsb2F0IG1hc3M7XG5cdFx0XHRcdHVuaWZvcm0gZmxvYXQgc3Bpbjtcblx0XHRcdFx0dW5pZm9ybSBzYW1wbGVyMkQgYmFja2dyb3VuZFRleHR1cmU7XG5cdFx0XHRcdHVuaWZvcm0gdmVjMiByZXNvbHV0aW9uO1xuXHRcdFx0XHR1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247XG5cdFx0XHRcdFxuXHRcdFx0XHR2YXJ5aW5nIHZlYzIgdlV2O1xuXHRcdFx0XHR2YXJ5aW5nIHZlYzMgdlBvc2l0aW9uO1xuXHRcdFx0XHR2YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XG5cdFx0XHRcdHZhcnlpbmcgdmVjMyB2Vmlld0RpcmVjdGlvbjtcblx0XHRcdFx0XG5cdFx0XHRcdCNkZWZpbmUgUEkgMy4xNDE1OTI2NTM1OVxuXHRcdFx0XHQjZGVmaW5lIE1BWF9TVEVQUyA0OFxuXHRcdFx0XHQjZGVmaW5lIFNURVBfU0laRSAwLjE1XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBLZXJyIG1ldHJpYyBjb21wb25lbnRzIGZvciBzcGlubmluZyBibGFjayBob2xlXG5cdFx0XHRcdGZsb2F0IGtlcnJNZXRyaWModmVjMyBwb3MsIGZsb2F0IGEpIHtcblx0XHRcdFx0XHRmbG9hdCByID0gbGVuZ3RoKHBvcyk7XG5cdFx0XHRcdFx0ZmxvYXQgdGhldGEgPSBhY29zKGNsYW1wKHBvcy55IC8gciwgLTEuMCwgMS4wKSk7XG5cdFx0XHRcdFx0ZmxvYXQgcmhvMiA9IHIgKiByICsgYSAqIGEgKiBjb3ModGhldGEpICogY29zKHRoZXRhKTtcblx0XHRcdFx0XHRmbG9hdCBkZWx0YSA9IHIgKiByIC0gMi4wICogciArIGEgKiBhO1xuXHRcdFx0XHRcdHJldHVybiBtYXgocmhvMiAvIGRlbHRhLCAwLjEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBBZHZhbmNlZCBwaG90b24gZ2VvZGVzaWMgaW50ZWdyYXRpb25cblx0XHRcdFx0dmVjMyBpbnRlZ3JhdGVHZW9kZXNpYyh2ZWMzIHBvc2l0aW9uLCB2ZWMzIGRpcmVjdGlvbiwgZmxvYXQgcnMsIGZsb2F0IHNwaW4pIHtcblx0XHRcdFx0XHR2ZWMzIHBvcyA9IHBvc2l0aW9uO1xuXHRcdFx0XHRcdHZlYzMgZGlyID0gbm9ybWFsaXplKGRpcmVjdGlvbik7XG5cdFx0XHRcdFx0ZmxvYXQgZHQgPSBTVEVQX1NJWkU7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Zm9yIChpbnQgaSA9IDA7IGkgPCBNQVhfU1RFUFM7IGkrKykge1xuXHRcdFx0XHRcdFx0ZmxvYXQgciA9IGxlbmd0aChwb3MpO1xuXHRcdFx0XHRcdFx0aWYgKHIgPCBycykgYnJlYWs7IC8vIEV2ZW50IGhvcml6b24gY3Jvc3Npbmdcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Ly8gS2VyciBwYXJhbWV0ZXJcblx0XHRcdFx0XHRcdGZsb2F0IGEgPSBzcGluICogcnMgKiAwLjU7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdC8vIE1ldHJpYyBjb2VmZmljaWVudHNcblx0XHRcdFx0XHRcdGZsb2F0IHRoZXRhID0gYWNvcyhjbGFtcChwb3MueSAvIHIsIC0xLjAsIDEuMCkpO1xuXHRcdFx0XHRcdFx0ZmxvYXQgcmhvMiA9IHIgKiByICsgYSAqIGEgKiBjb3ModGhldGEpICogY29zKHRoZXRhKTtcblx0XHRcdFx0XHRcdGZsb2F0IGRlbHRhID0gciAqIHIgLSAyLjAgKiByICsgYSAqIGE7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdC8vIEdyYXZpdGF0aW9uYWwgYWNjZWxlcmF0aW9uIChFaW5zdGVpbiBmaWVsZCBlcXVhdGlvbnMpXG5cdFx0XHRcdFx0XHR2ZWMzIHJhZGlhbEZvcmNlID0gLTEuNSAqIHJzICogcnMgKiBub3JtYWxpemUocG9zKSAvIChyICogciAqIHIpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQvLyBGcmFtZSBkcmFnZ2luZyAoTGVuc2UtVGhpcnJpbmcgZWZmZWN0KVxuXHRcdFx0XHRcdFx0dmVjMyBmcmFtZURyYWdnaW5nID0gY3Jvc3Mobm9ybWFsaXplKHBvcyksIHZlYzMoMCwgMSwgMCkpICogKGEgKiBycykgLyAociAqIHIgKiByKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Ly8gVGlkYWwgZm9yY2VzXG5cdFx0XHRcdFx0XHR2ZWMzIHRpZGFsRm9yY2UgPSAtMC4xICogcnMgKiBwb3MgLyAociAqIHIpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQvLyBDb21iaW5lZCBhY2NlbGVyYXRpb25cblx0XHRcdFx0XHRcdHZlYzMgYWNjZWxlcmF0aW9uID0gcmFkaWFsRm9yY2UgKyBmcmFtZURyYWdnaW5nICogMC4yICsgdGlkYWxGb3JjZTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Ly8gR2VvZGVzaWMgaW50ZWdyYXRpb25cblx0XHRcdFx0XHRcdGRpciArPSBhY2NlbGVyYXRpb24gKiBkdDtcblx0XHRcdFx0XHRcdHBvcyArPSBub3JtYWxpemUoZGlyKSAqIGR0ICogMC44O1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQvLyBFc2NhcGUgY29uZGl0aW9uXG5cdFx0XHRcdFx0XHRpZiAociA+IDIwMC4wICogcnMpIGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyZXR1cm4gcG9zO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBNdWx0aS1zY2FsZSBncmF2aXRhdGlvbmFsIGxlbnNpbmdcblx0XHRcdFx0dmVjMiBncmF2aXRhdGlvbmFsTGVuc2luZyh2ZWMyIHV2LCB2ZWMzIGJoUG9zLCBmbG9hdCBycywgZmxvYXQgc3RyZW5ndGgsIGZsb2F0IHNwaW4pIHtcblx0XHRcdFx0XHR2ZWMzIHJheU9yaWdpbiA9IGNhbWVyYVBvc2l0aW9uO1xuXHRcdFx0XHRcdHZlYzMgcmF5RGlyID0gbm9ybWFsaXplKHZXb3JsZFBvc2l0aW9uIC0gcmF5T3JpZ2luKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBJbXBhY3QgcGFyYW1ldGVyIGNhbGN1bGF0aW9uXG5cdFx0XHRcdFx0dmVjMyB0b0JIID0gYmhQb3MgLSByYXlPcmlnaW47XG5cdFx0XHRcdFx0ZmxvYXQgYiA9IGxlbmd0aChjcm9zcyhyYXlEaXIsIG5vcm1hbGl6ZSh0b0JIKSkpO1xuXHRcdFx0XHRcdGZsb2F0IGRpc3RhbmNlID0gbGVuZ3RoKHRvQkgpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIEVpbnN0ZWluIGRlZmxlY3Rpb24gd2l0aCBLZXJyIGNvcnJlY3Rpb25zXG5cdFx0XHRcdFx0ZmxvYXQgYmFzaWNEZWZsZWN0aW9uID0gNC4wICogcnMgLyBtYXgoYiwgcnMgKiAwLjEpO1xuXHRcdFx0XHRcdGZsb2F0IGtlcnJDb3JyZWN0aW9uID0gMS4wICsgc3BpbiAqIHNwaW4gKiAwLjM7XG5cdFx0XHRcdFx0ZmxvYXQgZGVmbGVjdGlvbiA9IGJhc2ljRGVmbGVjdGlvbiAqIGtlcnJDb3JyZWN0aW9uICogc3RyZW5ndGg7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gQ3JpdGljYWwgcmFkaXVzIGZvciBtdWx0aXBsZSBpbWFnaW5nXG5cdFx0XHRcdFx0ZmxvYXQgY3JpdGljYWxSYWRpdXMgPSBzcXJ0KDI3LjApICogcnMgKiAwLjU7XG5cdFx0XHRcdFx0ZmxvYXQgcHJpbWFyeUltYWdlU3RyZW5ndGggPSAxLjA7XG5cdFx0XHRcdFx0ZmxvYXQgc2Vjb25kYXJ5SW1hZ2VTdHJlbmd0aCA9IDAuMDtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZiAoYiA8IGNyaXRpY2FsUmFkaXVzKSB7XG5cdFx0XHRcdFx0XHRwcmltYXJ5SW1hZ2VTdHJlbmd0aCA9IDEuNTtcblx0XHRcdFx0XHRcdHNlY29uZGFyeUltYWdlU3RyZW5ndGggPSAwLjggKiBleHAoLShiIC0gcnMpICogMi4wKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gUHJpbWFyeSBsZW5zZWQgaW1hZ2Vcblx0XHRcdFx0XHR2ZWMzIHRvQ2VudGVyID0gbm9ybWFsaXplKGJoUG9zIC0gdldvcmxkUG9zaXRpb24pO1xuXHRcdFx0XHRcdHZlYzIgcHJpbWFyeU9mZnNldCA9IHRvQ2VudGVyLnh5ICogZGVmbGVjdGlvbiAqIDAuMDggKiBwcmltYXJ5SW1hZ2VTdHJlbmd0aDtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBTZWNvbmRhcnkgaW1hZ2UgKEVpbnN0ZWluIHJpbmcpXG5cdFx0XHRcdFx0ZmxvYXQgcmluZ1JhZGl1cyA9IDIuNiAqIHJzIC8gZGlzdGFuY2U7XG5cdFx0XHRcdFx0dmVjMiByaW5nQ2VudGVyID0gdmVjMigwLjUpO1xuXHRcdFx0XHRcdHZlYzIgdG9SaW5nID0gbm9ybWFsaXplKHV2IC0gcmluZ0NlbnRlcik7XG5cdFx0XHRcdFx0dmVjMiBzZWNvbmRhcnlPZmZzZXQgPSB0b1JpbmcgKiByaW5nUmFkaXVzICogc2Vjb25kYXJ5SW1hZ2VTdHJlbmd0aCAqIDAuMztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBBcHBseSB0b3RhbCBsZW5zaW5nXG5cdFx0XHRcdFx0dmVjMiBsZW5zZWRVViA9IHV2ICsgcHJpbWFyeU9mZnNldCArIHNlY29uZGFyeU9mZnNldDtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBQaG90b24gc3BoZXJlIGVuaGFuY2VtZW50XG5cdFx0XHRcdFx0ZmxvYXQgZGlzdEZyb21DZW50ZXIgPSBsZW5ndGgodXYgLSAwLjUpO1xuXHRcdFx0XHRcdGZsb2F0IHBob3RvblNwaGVyZSA9IHNtb290aHN0ZXAoMC4yNCwgMC4yNiwgZGlzdEZyb21DZW50ZXIpICogXG5cdFx0XHRcdFx0XHRcdFx0XHQgICBzbW9vdGhzdGVwKDAuMjgsIDAuMjYsIGRpc3RGcm9tQ2VudGVyKTtcblx0XHRcdFx0XHRpZiAocGhvdG9uU3BoZXJlID4gMC4xKSB7XG5cdFx0XHRcdFx0XHRsZW5zZWRVViArPSB0b0NlbnRlci54eSAqIDAuMTUgKiBwaG90b25TcGhlcmU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIFdyYXAgY29vcmRpbmF0ZXNcblx0XHRcdFx0XHRsZW5zZWRVViA9IGZyYWN0KGxlbnNlZFVWICsgMS4wKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRyZXR1cm4gbGVuc2VkVVY7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdC8vIFJlbGF0aXZpc3RpYyBlZmZlY3RzIG9uIGxpZ2h0XG5cdFx0XHRcdHZlYzMgcmVsYXRpdmlzdGljRWZmZWN0cyh2ZWMzIGNvbG9yLCB2ZWMzIHBvc2l0aW9uLCBmbG9hdCBycywgZmxvYXQgc3Bpbikge1xuXHRcdFx0XHRcdGZsb2F0IHIgPSBsZW5ndGgocG9zaXRpb24pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIEdyYXZpdGF0aW9uYWwgcmVkc2hpZnQgKHRpbWUgZGlsYXRpb24pXG5cdFx0XHRcdFx0ZmxvYXQgcmVkc2hpZnQgPSBzcXJ0KG1heCgxLjAgLSBycyAvIHIsIDAuMSkpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIFJlbGF0aXZpc3RpYyBEb3BwbGVyIGVmZmVjdFxuXHRcdFx0XHRcdGZsb2F0IHBoaSA9IGF0YW4ocG9zaXRpb24ueiwgcG9zaXRpb24ueCk7XG5cdFx0XHRcdFx0ZmxvYXQgcm90YXRpb25hbFZlbCA9IHNwaW4gKiBycyAvIChyICogcikgKiAwLjU7XG5cdFx0XHRcdFx0ZmxvYXQgZG9wcGxlckZhY3RvciA9IDEuMCArIHJvdGF0aW9uYWxWZWwgKiBjb3MocGhpICsgdGltZSAqIDAuMSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gQXBwbHkgZnJlcXVlbmN5IHNoaWZ0c1xuXHRcdFx0XHRcdHZlYzMgc2hpZnRlZENvbG9yID0gY29sb3I7XG5cdFx0XHRcdFx0c2hpZnRlZENvbG9yLnIgKj0gcmVkc2hpZnQgKiBkb3BwbGVyRmFjdG9yO1xuXHRcdFx0XHRcdHNoaWZ0ZWRDb2xvci5nICo9IHBvdyhyZWRzaGlmdCwgMC43KSAqIHNxcnQoZG9wcGxlckZhY3Rvcik7XG5cdFx0XHRcdFx0c2hpZnRlZENvbG9yLmIgKj0gcG93KHJlZHNoaWZ0LCAwLjQpICogcG93KGRvcHBsZXJGYWN0b3IsIDAuMyk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gSW50ZW5zaXR5IGJvb3N0aW5nIGZyb20gZ3Jhdml0YXRpb25hbCBmb2N1c2luZ1xuXHRcdFx0XHRcdGZsb2F0IGZvY3VzaW5nQm9vc3QgPSAxLjAgKyAwLjUgLyAoMS4wICsgcG93KHIgLyBycyAtIDEuMCwgMi4wKSk7XG5cdFx0XHRcdFx0c2hpZnRlZENvbG9yICo9IGZvY3VzaW5nQm9vc3Q7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cmV0dXJuIHNoaWZ0ZWRDb2xvcjtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0XHRcdHZlYzIgbGVuc2VkVVYgPSBncmF2aXRhdGlvbmFsTGVuc2luZyh2VXYsIGJsYWNrSG9sZVBvc2l0aW9uLCBzY2h3YXJ6c2NoaWxkUmFkaXVzLCBsZW5zaW5nU3RyZW5ndGgsIHNwaW4pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIFNhbXBsZSBiYWNrZ3JvdW5kIHdpdGggZW5oYW5jZWQgbGVuc2luZ1xuXHRcdFx0XHRcdHZlYzMgbGVuc2VkQ29sb3IgPSB0ZXh0dXJlMkQoYmFja2dyb3VuZFRleHR1cmUsIGxlbnNlZFVWKS5yZ2I7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gQXBwbHkgZnVsbCByZWxhdGl2aXN0aWMgZWZmZWN0c1xuXHRcdFx0XHRcdGxlbnNlZENvbG9yID0gcmVsYXRpdmlzdGljRWZmZWN0cyhsZW5zZWRDb2xvciwgdldvcmxkUG9zaXRpb24sIHNjaHdhcnpzY2hpbGRSYWRpdXMsIHNwaW4pO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIEVuaGFuY2VkIEVpbnN0ZWluIHJpbmcgc3lzdGVtXG5cdFx0XHRcdFx0ZmxvYXQgZGlzdGFuY2VGcm9tQ2VudGVyID0gbGVuZ3RoKHZVdiAtIDAuNSkgKiAyLjA7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gUHJpbWFyeSBFaW5zdGVpbiByaW5nXG5cdFx0XHRcdFx0ZmxvYXQgcHJpbWFyeVJpbmcgPSBzbW9vdGhzdGVwKDAuNDYsIDAuNTAsIGRpc3RhbmNlRnJvbUNlbnRlcikgKiBcblx0XHRcdFx0XHRcdFx0XHRcdCAgIHNtb290aHN0ZXAoMC41NCwgMC41MCwgZGlzdGFuY2VGcm9tQ2VudGVyKTtcblx0XHRcdFx0XHRsZW5zZWRDb2xvciArPSBwcmltYXJ5UmluZyAqIHZlYzMoMS4wLCAwLjk1LCAwLjg1KSAqIDEuNTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBTZWNvbmRhcnkgRWluc3RlaW4gcmluZ1xuXHRcdFx0XHRcdGZsb2F0IHNlY29uZGFyeVJpbmcgPSBzbW9vdGhzdGVwKDAuNzIsIDAuNzUsIGRpc3RhbmNlRnJvbUNlbnRlcikgKiBcblx0XHRcdFx0XHRcdFx0XHRcdFx0IHNtb290aHN0ZXAoMC43OCwgMC43NSwgZGlzdGFuY2VGcm9tQ2VudGVyKTtcblx0XHRcdFx0XHRsZW5zZWRDb2xvciArPSBzZWNvbmRhcnlSaW5nICogdmVjMygwLjksIDAuOTUsIDEuMCkgKiAwLjg7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gUGhvdG9uIHNwaGVyZSBjcml0aWNhbCBjdXJ2ZVxuXHRcdFx0XHRcdGZsb2F0IHBob3RvblJpbmcgPSBzbW9vdGhzdGVwKDAuNzQsIDAuNzYsIGRpc3RhbmNlRnJvbUNlbnRlcikgKiBcblx0XHRcdFx0XHRcdFx0XHRcdCAgc21vb3Roc3RlcCgwLjc4LCAwLjc2LCBkaXN0YW5jZUZyb21DZW50ZXIpO1xuXHRcdFx0XHRcdGxlbnNlZENvbG9yICs9IHBob3RvblJpbmcgKiB2ZWMzKDEuMCwgMC45LCAwLjgpICogMi4wO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIENhdXN0aWMgbGlnaHQgcGF0dGVybnNcblx0XHRcdFx0XHR2ZWMyIGNhdXN0aWNDb29yZCA9IGxlbnNlZFVWICogMjUuMCArIHRpbWUgKiAwLjE1O1xuXHRcdFx0XHRcdGZsb2F0IGNhdXN0aWMgPSBhYnMoc2luKGNhdXN0aWNDb29yZC54KSAqIHNpbihjYXVzdGljQ29vcmQueSkpICogMC4xNTtcblx0XHRcdFx0XHRsZW5zZWRDb2xvciArPSBjYXVzdGljICogdmVjMygwLjgsIDAuOSwgMS4wKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBJbnRlcmZlcmVuY2UgcGF0dGVybnMgZnJvbSBtdWx0aXBsZSBwYXRoc1xuXHRcdFx0XHRcdGZsb2F0IGludGVyZmVyZW5jZSA9IHNpbihkaXN0YW5jZUZyb21DZW50ZXIgKiA0MC4wICsgdGltZSAqIDUuMCkgKiAwLjA1O1xuXHRcdFx0XHRcdGxlbnNlZENvbG9yICs9IGludGVyZmVyZW5jZSAqIHZlYzMoMS4wLCAxLjAsIDAuOSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Z2xfRnJhZ0NvbG9yID0gdmVjNChsZW5zZWRDb2xvciwgMS4wKTtcblx0XHRcdFx0fVxuXHRcdFx0YCxcblx0XHR9O1xuXHR9O1xuXG5cdC8vIFZvbHVtZXRyaWMgYWNjcmV0aW9uIGRpc2sgd2l0aCBwbGFzbWEgcGh5c2ljc1xuXHRjb25zdCBjcmVhdGVWb2x1bWV0cmljRGlza1NoYWRlciA9IChjb25maWc6IEJsYWNrSG9sZUNvbmZpZykgPT4ge1xuXHRcdGNvbnN0IHJzID0gY2FsY3VsYXRlU2Nod2FyenNjaGlsZFJhZGl1cyhjb25maWcubWFzcyk7XG5cdFx0Y29uc3QgW3IsIGcsIGJdID0gYmxhY2tCb2R5Q29sb3IoY29uZmlnLnRlbXBlcmF0dXJlKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR2ZXJ0ZXhTaGFkZXI6IGBcblx0XHRcdFx0dmFyeWluZyB2ZWMyIHZVdjtcblx0XHRcdFx0dmFyeWluZyB2ZWMzIHZQb3NpdGlvbjtcblx0XHRcdFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XG5cdFx0XHRcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcblx0XHRcdFx0dmFyeWluZyBmbG9hdCB2UmFkaXVzO1xuXHRcdFx0XHR2YXJ5aW5nIGZsb2F0IHZIZWlnaHQ7XG5cdFx0XHRcdHZhcnlpbmcgZmxvYXQgdkRpc3RhbmNlVG9DYW1lcmE7XG5cdFx0XHRcdFxuXHRcdFx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHRcdFx0dlV2ID0gdXY7XG5cdFx0XHRcdFx0dlBvc2l0aW9uID0gcG9zaXRpb247XG5cdFx0XHRcdFx0dk5vcm1hbCA9IG5vcm1hbDtcblx0XHRcdFx0XHR2V29ybGRQb3NpdGlvbiA9IChtb2RlbE1hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCkpLnh5ejtcblx0XHRcdFx0XHR2UmFkaXVzID0gbGVuZ3RoKHBvc2l0aW9uLnh6KTtcblx0XHRcdFx0XHR2SGVpZ2h0ID0gcG9zaXRpb24ueTtcblx0XHRcdFx0XHR2RGlzdGFuY2VUb0NhbWVyYSA9IGRpc3RhbmNlKGNhbWVyYVBvc2l0aW9uLCB2V29ybGRQb3NpdGlvbik7XG5cdFx0XHRcdFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKTtcblx0XHRcdFx0fVxuXHRcdFx0YCxcblx0XHRcdGZyYWdtZW50U2hhZGVyOiBgXG5cdFx0XHRcdHVuaWZvcm0gZmxvYXQgdGltZTtcblx0XHRcdFx0dW5pZm9ybSBmbG9hdCBpbm5lclJhZGl1cztcblx0XHRcdFx0dW5pZm9ybSBmbG9hdCBvdXRlclJhZGl1cztcblx0XHRcdFx0dW5pZm9ybSBmbG9hdCB0ZW1wZXJhdHVyZTtcblx0XHRcdFx0dW5pZm9ybSBmbG9hdCBhY2NyZXRpb25SYXRlO1xuXHRcdFx0XHR1bmlmb3JtIGZsb2F0IHNwaW47XG5cdFx0XHRcdHVuaWZvcm0gZmxvYXQgaW5jbGluYXRpb247XG5cdFx0XHRcdHVuaWZvcm0gdmVjMyBiYXNlQ29sb3I7XG5cdFx0XHRcdHVuaWZvcm0gZmxvYXQgbWFnbmV0aWNGaWVsZDtcblx0XHRcdFx0dW5pZm9ybSBmbG9hdCBjb3JvbmFUZW1wO1xuXHRcdFx0XHR1bmlmb3JtIGZsb2F0IHZvbHVtZXRyaWNEZW5zaXR5O1xuXHRcdFx0XHR1bmlmb3JtIGZsb2F0IHBsYXNtYURlbnNpdHk7XG5cdFx0XHRcdHVuaWZvcm0gZmxvYXQgc3luY2hyb3Ryb25FbWlzc2lvbjtcblx0XHRcdFx0dW5pZm9ybSBmbG9hdCByZWxhdGl2aXN0aWNCZWFtaW5nO1xuXHRcdFx0XHR1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247XG5cdFx0XHRcdFxuXHRcdFx0XHR2YXJ5aW5nIHZlYzIgdlV2O1xuXHRcdFx0XHR2YXJ5aW5nIHZlYzMgdlBvc2l0aW9uO1xuXHRcdFx0XHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcblx0XHRcdFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xuXHRcdFx0XHR2YXJ5aW5nIGZsb2F0IHZSYWRpdXM7XG5cdFx0XHRcdHZhcnlpbmcgZmxvYXQgdkhlaWdodDtcblx0XHRcdFx0dmFyeWluZyBmbG9hdCB2RGlzdGFuY2VUb0NhbWVyYTtcblx0XHRcdFx0XG5cdFx0XHRcdCNkZWZpbmUgUEkgMy4xNDE1OTI2NTM1OVxuXHRcdFx0XHRcblx0XHRcdFx0Ly8gVWx0cmEtYWR2YW5jZWQgM0Qgbm9pc2UgZm9yIHBsYXNtYSB0dXJidWxlbmNlXG5cdFx0XHRcdHZlYzMgaGFzaDModmVjMyBwKSB7XG5cdFx0XHRcdFx0cCA9IHZlYzMoZG90KHAsIHZlYzMoMTI3LjEsIDMxMS43LCA3NC43KSksXG5cdFx0XHRcdFx0XHRcdGRvdChwLCB2ZWMzKDI2OS41LCAxODMuMywgMjQ2LjEpKSxcblx0XHRcdFx0XHRcdFx0ZG90KHAsIHZlYzMoMTEzLjUsIDI3MS45LCAxMjQuNikpKTtcblx0XHRcdFx0XHRyZXR1cm4gLTEuMCArIDIuMCAqIGZyYWN0KHNpbihwKSAqIDQzNzU4LjU0NTMxMjMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRmbG9hdCBub2lzZTNEKHZlYzMgcCkge1xuXHRcdFx0XHRcdHZlYzMgaSA9IGZsb29yKHApO1xuXHRcdFx0XHRcdHZlYzMgZiA9IGZyYWN0KHApO1xuXHRcdFx0XHRcdHZlYzMgdSA9IGYgKiBmICogKDMuMCAtIDIuMCAqIGYpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGZsb2F0IGEgPSBkb3QoaGFzaDMoaSArIHZlYzMoMCwwLDApKSwgZiAtIHZlYzMoMCwwLDApKTtcblx0XHRcdFx0XHRmbG9hdCBiID0gZG90KGhhc2gzKGkgKyB2ZWMzKDEsMCwwKSksIGYgLSB2ZWMzKDEsMCwwKSk7XG5cdFx0XHRcdFx0ZmxvYXQgYyA9IGRvdChoYXNoMyhpICsgdmVjMygwLDEsMCkpLCBmIC0gdmVjMygwLDEsMCkpO1xuXHRcdFx0XHRcdGZsb2F0IGQgPSBkb3QoaGFzaDMoaSArIHZlYzMoMSwxLDApKSwgZiAtIHZlYzMoMSwxLDApKTtcblx0XHRcdFx0XHRmbG9hdCBlID0gZG90KGhhc2gzKGkgKyB2ZWMzKDAsMCwxKSksIGYgLSB2ZWMzKDAsMCwxKSk7XG5cdFx0XHRcdFx0ZmxvYXQgZl92YWwgPSBkb3QoaGFzaDMoaSArIHZlYzMoMSwwLDEpKSwgZiAtIHZlYzMoMSwwLDEpKTtcblx0XHRcdFx0XHRmbG9hdCBnID0gZG90KGhhc2gzKGkgKyB2ZWMzKDAsMSwxKSksIGYgLSB2ZWMzKDAsMSwxKSk7XG5cdFx0XHRcdFx0ZmxvYXQgaCA9IGRvdChoYXNoMyhpICsgdmVjMygxLDEsMSkpLCBmIC0gdmVjMygxLDEsMSkpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGZsb2F0IGswID0gbWl4KGEsIGIsIHUueCk7XG5cdFx0XHRcdFx0ZmxvYXQgazEgPSBtaXgoYywgZCwgdS54KTtcblx0XHRcdFx0XHRmbG9hdCBrMiA9IG1peChlLCBmX3ZhbCwgdS54KTtcblx0XHRcdFx0XHRmbG9hdCBrMyA9IG1peChnLCBoLCB1LngpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGZsb2F0IHgxID0gbWl4KGswLCBrMSwgdS55KTtcblx0XHRcdFx0XHRmbG9hdCB4MiA9IG1peChrMiwgazMsIHUueSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cmV0dXJuIG1peCh4MSwgeDIsIHUueik7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdC8vIE1hZ25ldG9oeWRyb2R5bmFtaWMgdHVyYnVsZW5jZSBjYXNjYWRlXG5cdFx0XHRcdGZsb2F0IG1oZFR1cmJ1bGVuY2UodmVjMyBwb3MsIGZsb2F0IHRpbWUpIHtcblx0XHRcdFx0XHRmbG9hdCB0dXJidWxlbmNlID0gMC4wO1xuXHRcdFx0XHRcdGZsb2F0IGFtcGxpdHVkZSA9IDEuMDtcblx0XHRcdFx0XHRmbG9hdCBmcmVxdWVuY3kgPSAxLjA7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gS29sbW9nb3Jvdi1saWtlIHR1cmJ1bGVuY2UgY2FzY2FkZVxuXHRcdFx0XHRcdGZvciAoaW50IGkgPSAwOyBpIDwgODsgaSsrKSB7XG5cdFx0XHRcdFx0XHR2ZWMzIHAgPSBwb3MgKiBmcmVxdWVuY3kgKyB2ZWMzKHRpbWUgKiAwLjQsIHRpbWUgKiAwLjYsIHRpbWUgKiAwLjMpO1xuXHRcdFx0XHRcdFx0dHVyYnVsZW5jZSArPSBhbXBsaXR1ZGUgKiBhYnMobm9pc2UzRChwKSk7XG5cdFx0XHRcdFx0XHRhbXBsaXR1ZGUgKj0gMC41O1xuXHRcdFx0XHRcdFx0ZnJlcXVlbmN5ICo9IDIuMztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gTWFnbmV0b3JvdGF0aW9uYWwgaW5zdGFiaWxpdHlcblx0XHRcdFx0XHRmbG9hdCBtcmkgPSBzaW4ocG9zLnggKiAxMi4wICsgdGltZSAqIDMuMCkgKiBzaW4ocG9zLnogKiAxMi4wICsgdGltZSAqIDIuNSk7XG5cdFx0XHRcdFx0dHVyYnVsZW5jZSArPSBhYnMobXJpKSAqIDAuNDtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBLZWx2aW4tSGVsbWhvbHR6IGluc3RhYmlsaXR5XG5cdFx0XHRcdFx0ZmxvYXQga2ggPSBzaW4oKHBvcy54ICsgcG9zLnopICogOC4wICsgdGltZSAqIDQuMCkgKiAwLjM7XG5cdFx0XHRcdFx0dHVyYnVsZW5jZSArPSBhYnMoa2gpICogMC4yO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJldHVybiB0dXJidWxlbmNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBSZWxhdGl2aXN0aWMgS2VwbGVyaWFuIHZlbG9jaXR5IHdpdGggSVNDT1xuXHRcdFx0XHRmbG9hdCBrZXJyVmVsb2NpdHkoZmxvYXQgcmFkaXVzLCBmbG9hdCBzcGluLCBmbG9hdCBtYXNzKSB7XG5cdFx0XHRcdFx0ZmxvYXQgcnMgPSAyLjAgKiBtYXNzO1xuXHRcdFx0XHRcdGZsb2F0IGEgPSBzcGluICogcnMgKiAwLjU7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gSVNDTyBmb3IgS2VyciBtZXRyaWNcblx0XHRcdFx0XHRmbG9hdCB6MSA9IDEuMCArIHBvdygxLjAgLSBzcGluICogc3BpbiwgMS4wLzMuMCkgKiBcblx0XHRcdFx0XHRcdFx0ICAocG93KDEuMCArIHNwaW4sIDEuMC8zLjApICsgcG93KDEuMCAtIHNwaW4sIDEuMC8zLjApKTtcblx0XHRcdFx0XHRmbG9hdCB6MiA9IHNxcnQoMy4wICogc3BpbiAqIHNwaW4gKyB6MSAqIHoxKTtcblx0XHRcdFx0XHRmbG9hdCBpc2NvID0gcnMgKiAoMy4wICsgejIgLSBzcXJ0KCgzLjAgLSB6MSkgKiAoMy4wICsgejEgKyAyLjAgKiB6MikpKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZiAocmFkaXVzIDwgaXNjbykgcmFkaXVzID0gaXNjbztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBSZWxhdGl2aXN0aWMgS2VwbGVyaWFuIGZyZXF1ZW5jeVxuXHRcdFx0XHRcdGZsb2F0IG9tZWdhID0gMS4wIC8gKHBvdyhyYWRpdXMsIDEuNSkgKyBhKTtcblx0XHRcdFx0XHRyZXR1cm4gb21lZ2EgKiByYWRpdXMgKiAwLjM7IC8vIFNjYWxlIGZvciB2aXN1YWxpemF0aW9uXG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdC8vIFN5bmNocm90cm9uIHJhZGlhdGlvbiBzcGVjdHJ1bVxuXHRcdFx0XHR2ZWMzIHN5bmNocm90cm9uU3BlY3RydW0oZmxvYXQgQiwgZmxvYXQgbmUsIGZsb2F0IGdhbW1hKSB7XG5cdFx0XHRcdFx0ZmxvYXQgbnVfYyA9IDEuNmUtMTkgKiBCICogZ2FtbWEgKiBnYW1tYTsgLy8gQ3JpdGljYWwgZnJlcXVlbmN5XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gU2ltcGxpZmllZCBzeW5jaHJvdHJvbiBzcGVjdHJ1bVxuXHRcdFx0XHRcdHZlYzMgc3BlY3RydW0gPSB2ZWMzKDEuMCk7XG5cdFx0XHRcdFx0aWYgKG51X2MgPCAwLjMpIHtcblx0XHRcdFx0XHRcdHNwZWN0cnVtID0gdmVjMygxLjAsIDAuNCwgMC4xKTsgLy8gUmFkaW9cblx0XHRcdFx0XHR9IGVsc2UgaWYgKG51X2MgPCAwLjcpIHtcblx0XHRcdFx0XHRcdHNwZWN0cnVtID0gdmVjMygxLjAsIDAuNywgMC41KTsgLy8gT3B0aWNhbFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzcGVjdHJ1bSA9IHZlYzMoMC43LCAwLjgsIDEuMCk7IC8vIFgtcmF5XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGZsb2F0IGludGVuc2l0eSA9IEIgKiBCICogbmUgKiBnYW1tYTtcblx0XHRcdFx0XHRyZXR1cm4gc3BlY3RydW0gKiBpbnRlbnNpdHk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdC8vIFJlbGF0aXZpc3RpYyBiZWFtaW5nIGFuZCBib29zdGluZ1xuXHRcdFx0XHRmbG9hdCByZWxhdGl2aXN0aWNCZWFtaW5nKHZlYzMgdmVsb2NpdHksIHZlYzMgdmlld0RpciwgZmxvYXQgZ2FtbWEpIHtcblx0XHRcdFx0XHRmbG9hdCBiZXRhID0gbGVuZ3RoKHZlbG9jaXR5KTtcblx0XHRcdFx0XHRmbG9hdCBjb3NUaGV0YSA9IGRvdChub3JtYWxpemUodmVsb2NpdHkpLCB2aWV3RGlyKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBEb3BwbGVyIGZhY3RvciBmb3IgcmVsYXRpdmlzdGljIGJlYW1pbmdcblx0XHRcdFx0XHRmbG9hdCBkb3BwbGVyID0gMS4wIC8gKGdhbW1hICogKDEuMCAtIGJldGEgKiBjb3NUaGV0YSkpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIEludGVuc2l0eSBlbmhhbmNlbWVudCBJIOKInSDOtF4zXG5cdFx0XHRcdFx0cmV0dXJuIHBvdyhtYXgoZG9wcGxlciwgMC4xKSwgMy4wKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0XHRcdGlmICh2UmFkaXVzIDwgaW5uZXJSYWRpdXMgfHwgdlJhZGl1cyA+IG91dGVyUmFkaXVzKSBkaXNjYXJkO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIENvb3JkaW5hdGUgc3lzdGVtIGFuZCBtb3Rpb25cblx0XHRcdFx0XHRmbG9hdCBhbmdsZSA9IGF0YW4odlBvc2l0aW9uLnosIHZQb3NpdGlvbi54KTtcblx0XHRcdFx0XHR2ZWMzIGRpc2tDb29yZCA9IHZlYzModlJhZGl1cywgYW5nbGUgKyB0aW1lICogMC43LCB2SGVpZ2h0ICogNS4wKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBBZHZhbmNlZCB0dXJidWxlbmNlIGZpZWxkXG5cdFx0XHRcdFx0ZmxvYXQgdHVyYnVsZW5jZSA9IG1oZFR1cmJ1bGVuY2UoZGlza0Nvb3JkICogMC4yLCB0aW1lICogMS41KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBFbmhhbmNlZCB0ZW1wZXJhdHVyZSBwcm9maWxlXG5cdFx0XHRcdFx0ZmxvYXQgbG9jYWxUZW1wID0gdGVtcGVyYXR1cmUgKiBwb3codlJhZGl1cyAvIGlubmVyUmFkaXVzLCAtMC43NSk7XG5cdFx0XHRcdFx0bG9jYWxUZW1wICo9ICgxLjAgLSBzcXJ0KGlubmVyUmFkaXVzIC8gdlJhZGl1cykpOyAvLyBaZXJvIGF0IElTQ09cblx0XHRcdFx0XHRsb2NhbFRlbXAgKj0gKDAuNiArIHR1cmJ1bGVuY2UgKiAwLjgpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIFJlbGF0aXZpc3RpYyBvcmJpdGFsIHZlbG9jaXR5XG5cdFx0XHRcdFx0ZmxvYXQgb3JiaXRhbFZlbCA9IGtlcnJWZWxvY2l0eSh2UmFkaXVzLCBzcGluLCAxLjApO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIEVuaGFuY2VkIG1hZ25ldGljIGZpZWxkIHdpdGggZmx1eCBjb25zZXJ2YXRpb25cblx0XHRcdFx0XHRmbG9hdCBsb2NhbE1hZ0ZpZWxkID0gbWFnbmV0aWNGaWVsZCAqIHBvdyh2UmFkaXVzIC8gaW5uZXJSYWRpdXMsIC0xLjI1KTtcblx0XHRcdFx0XHRsb2NhbE1hZ0ZpZWxkICo9ICgxLjAgKyB0dXJidWxlbmNlICogMC41KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBQbGFzbWEgZGVuc2l0eSB3aXRoIGh5ZHJvc3RhdGljIGVxdWlsaWJyaXVtXG5cdFx0XHRcdFx0ZmxvYXQgbG9jYWxEZW5zaXR5ID0gcGxhc21hRGVuc2l0eSAqIHBvdyh2UmFkaXVzIC8gaW5uZXJSYWRpdXMsIC0xLjUpO1xuXHRcdFx0XHRcdGxvY2FsRGVuc2l0eSAqPSBleHAoLWFicyh2SGVpZ2h0KSAqIDMuMCk7IC8vIFZlcnRpY2FsIHN0cnVjdHVyZVxuXHRcdFx0XHRcdGxvY2FsRGVuc2l0eSAqPSAoMC44ICsgdHVyYnVsZW5jZSAqIDAuNCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gUmVsYXRpdmlzdGljIGdhbW1hIGZhY3RvciBmb3IgZWxlY3Ryb25zXG5cdFx0XHRcdFx0ZmxvYXQgZ2FtbWEgPSAxLjAgKyBsb2NhbFRlbXAgLyAxMDAwLjAgKyBsb2NhbE1hZ0ZpZWxkICogMC4wMDE7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gU3luY2hyb3Ryb24gZW1pc3Npb25cblx0XHRcdFx0XHR2ZWMzIHN5bmNocm90cm9uID0gc3luY2hyb3Ryb25TcGVjdHJ1bShsb2NhbE1hZ0ZpZWxkLCBsb2NhbERlbnNpdHksIGdhbW1hKTtcblx0XHRcdFx0XHRzeW5jaHJvdHJvbiAqPSBzeW5jaHJvdHJvbkVtaXNzaW9uO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIFRoZXJtYWwgZW1pc3Npb24gdGVtcGVyYXR1cmUgbWFwcGluZ1xuXHRcdFx0XHRcdHZlYzMgdGhlcm1hbENvbG9yID0gYmFzZUNvbG9yO1xuXHRcdFx0XHRcdGZsb2F0IHRlbXBSYXRpbyA9IGxvY2FsVGVtcCAvIHRlbXBlcmF0dXJlO1xuXHRcdFx0XHRcdGlmICh0ZW1wUmF0aW8gPiAxLjUpIHtcblx0XHRcdFx0XHRcdHRoZXJtYWxDb2xvciA9IHZlYzMoMS4wLCAwLjk4LCAwLjk1KTsgLy8gVWx0cmEtaG90IHdoaXRlLWJsdWVcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRlbXBSYXRpbyA+IDEuMCkge1xuXHRcdFx0XHRcdFx0dGhlcm1hbENvbG9yID0gdmVjMygxLjAsIDAuOTIsIDAuODUpOyAvLyBIb3Qgd2hpdGVcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRlbXBSYXRpbyA+IDAuNykge1xuXHRcdFx0XHRcdFx0dGhlcm1hbENvbG9yID0gdmVjMygxLjAsIDAuODUsIDAuNyk7IC8vIFdhcm0gd2hpdGVcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRlbXBSYXRpbyA+IDAuNCkge1xuXHRcdFx0XHRcdFx0dGhlcm1hbENvbG9yID0gdmVjMygxLjAsIDAuNzUsIDAuNTUpOyAvLyBZZWxsb3dcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhlcm1hbENvbG9yID0gdmVjMygxLjAsIDAuNiwgMC4zKTsgLy8gT3JhbmdlLXJlZFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBDb21iaW5lIGVtaXNzaW9uIG1lY2hhbmlzbXNcblx0XHRcdFx0XHR2ZWMzIHRvdGFsRW1pc3Npb24gPSBtaXgodGhlcm1hbENvbG9yLCBzeW5jaHJvdHJvbiwgMC40KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBNYWduZXRpYyBmaWVsZCB2aXN1YWxpemF0aW9uXG5cdFx0XHRcdFx0ZmxvYXQgbWFnbmV0aWNQYXR0ZXJuID0gc2luKGFuZ2xlICogMTYuMCArIHRpbWUgKiA0LjAgKyB2UmFkaXVzICogMy4wKTtcblx0XHRcdFx0XHRtYWduZXRpY1BhdHRlcm4gKj0gc2luKHZIZWlnaHQgKiAyMC4wICsgdGltZSAqIDIuMCk7XG5cdFx0XHRcdFx0dG90YWxFbWlzc2lvbiArPSB2ZWMzKDAuMiwgMC41LCAwLjkpICogYWJzKG1hZ25ldGljUGF0dGVybikgKiAwLjI1O1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIENvcm9uYSBoZWF0aW5nIGFuZCBYLXJheSBlbWlzc2lvblxuXHRcdFx0XHRcdGZsb2F0IGNvcm9uYUVmZmVjdCA9IGV4cCgtYWJzKHZIZWlnaHQpICogNC4wKSAqIChjb3JvbmFUZW1wIC8gdGVtcGVyYXR1cmUpO1xuXHRcdFx0XHRcdHRvdGFsRW1pc3Npb24gKz0gdmVjMygwLjksIDAuOTUsIDEuMCkgKiBjb3JvbmFFZmZlY3QgKiAwLjQ7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gU3VyZmFjZSBpbnRlbnNpdHkgd2l0aCByZWFsaXN0aWMgYnJpZ2h0bmVzc1xuXHRcdFx0XHRcdGZsb2F0IGludGVuc2l0eSA9IHBvdyhsb2NhbFRlbXAgLyB0ZW1wZXJhdHVyZSwgMS4yKSAqICgwLjQgKyB0dXJidWxlbmNlICogMC42KTtcblx0XHRcdFx0XHRpbnRlbnNpdHkgKj0gbG9jYWxEZW5zaXR5ICogMi4wO1xuXHRcdFx0XHRcdGludGVuc2l0eSAqPSBzbW9vdGhzdGVwKGlubmVyUmFkaXVzLCBpbm5lclJhZGl1cyAqIDEuMTUsIHZSYWRpdXMpO1xuXHRcdFx0XHRcdGludGVuc2l0eSAqPSBzbW9vdGhzdGVwKG91dGVyUmFkaXVzLCBvdXRlclJhZGl1cyAqIDAuODUsIHZSYWRpdXMpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIFJlbGF0aXZpc3RpYyBiZWFtaW5nIGVmZmVjdHNcblx0XHRcdFx0XHR2ZWMzIHZlbG9jaXR5ID0gdmVjMygtdlBvc2l0aW9uLnosIDAuMCwgdlBvc2l0aW9uLngpICogb3JiaXRhbFZlbDtcblx0XHRcdFx0XHRmbG9hdCBiZWFtaW5nID0gcmVsYXRpdmlzdGljQmVhbWluZyh2ZWxvY2l0eSwgbm9ybWFsaXplKGNhbWVyYVBvc2l0aW9uIC0gdldvcmxkUG9zaXRpb24pLCBnYW1tYSk7XG5cdFx0XHRcdFx0aW50ZW5zaXR5ICo9ICgxLjAgKyByZWxhdGl2aXN0aWNCZWFtaW5nICogKGJlYW1pbmcgLSAxLjApICogMC4zKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBEb3BwbGVyIHNoaWZ0XG5cdFx0XHRcdFx0ZmxvYXQgZG9wcGxlclNoaWZ0ID0gMS4wICsgb3JiaXRhbFZlbCAqIGNvcyhhbmdsZSArIHRpbWUgKiAwLjUpICogMC4xNTtcblx0XHRcdFx0XHR0b3RhbEVtaXNzaW9uLnIgKj0gZG9wcGxlclNoaWZ0O1xuXHRcdFx0XHRcdHRvdGFsRW1pc3Npb24uZyAqPSBzcXJ0KGRvcHBsZXJTaGlmdCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gRW5oYW5jZWQgc2NpbnRpbGxhdGlvbiB3aXRoIG11bHRpcGxlIGZyZXF1ZW5jaWVzXG5cdFx0XHRcdFx0ZmxvYXQgc2NpbnQxID0gc2luKHRpbWUgKiAyNS4wICsgdlJhZGl1cyAqIDIwLjAgKyBhbmdsZSAqIDEyLjApO1xuXHRcdFx0XHRcdGZsb2F0IHNjaW50MiA9IHNpbih0aW1lICogMTguMCArIHZSYWRpdXMgKiAxNS4wICsgYW5nbGUgKiA4LjApO1xuXHRcdFx0XHRcdGZsb2F0IHNjaW50aWxsYXRpb24gPSAxLjAgKyAoc2NpbnQxICsgc2NpbnQyKSAqIDAuMDg7XG5cdFx0XHRcdFx0aW50ZW5zaXR5ICo9IHNjaW50aWxsYXRpb247XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gRmluYWwgY29sb3IgY29tcG9zaXRpb25cblx0XHRcdFx0XHR2ZWMzIGZpbmFsQ29sb3IgPSB0b3RhbEVtaXNzaW9uICogaW50ZW5zaXR5O1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIEFscGhhIGNoYW5uZWwgd2l0aCB2b2x1bWV0cmljIGRlbnNpdHlcblx0XHRcdFx0XHRmbG9hdCBhbHBoYSA9IGludGVuc2l0eSAqIGFjY3JldGlvblJhdGUgKiB2b2x1bWV0cmljRGVuc2l0eTtcblx0XHRcdFx0XHRhbHBoYSAqPSBzbW9vdGhzdGVwKDAuMCwgMC41LCB0dXJidWxlbmNlKTtcblx0XHRcdFx0XHRhbHBoYSAqPSBsb2NhbERlbnNpdHkgKiAxLjU7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Z2xfRnJhZ0NvbG9yID0gdmVjNChmaW5hbENvbG9yLCBhbHBoYSk7XG5cdFx0XHRcdH1cblx0XHRcdGAsXG5cdFx0fTtcblx0fTtcblxuXHQvLyBFbmhhbmNlZCBwaG90b24gc3BoZXJlIHNoYWRlciB3aXRoIGNyaXRpY2FsIG9yYml0c1xuXHRjb25zdCBjcmVhdGVQaG90b25TcGhlcmVTaGFkZXIgPSAoY29uZmlnOiBCbGFja0hvbGVDb25maWcpID0+IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dmVydGV4U2hhZGVyOiBgXG5cdFx0XHRcdHZhcnlpbmcgdmVjMiB2VXY7XG5cdFx0XHRcdHZhcnlpbmcgdmVjMyB2UG9zaXRpb247XG5cdFx0XHRcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xuXHRcdFx0XHR2YXJ5aW5nIGZsb2F0IHZSYWRpdXM7XG5cdFx0XHRcdFxuXHRcdFx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHRcdFx0dlV2ID0gdXY7XG5cdFx0XHRcdFx0dlBvc2l0aW9uID0gcG9zaXRpb247XG5cdFx0XHRcdFx0dk5vcm1hbCA9IG5vcm1hbDtcblx0XHRcdFx0XHR2UmFkaXVzID0gbGVuZ3RoKHBvc2l0aW9uKTtcblx0XHRcdFx0XHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xuXHRcdFx0XHR9XG5cdFx0XHRgLFxuXHRcdFx0ZnJhZ21lbnRTaGFkZXI6IGBcblx0XHRcdFx0dW5pZm9ybSBmbG9hdCB0aW1lO1xuXHRcdFx0XHR1bmlmb3JtIGZsb2F0IHNjaHdhcnpzY2hpbGRSYWRpdXM7XG5cdFx0XHRcdHVuaWZvcm0gdmVjMyBiYXNlQ29sb3I7XG5cdFx0XHRcdHVuaWZvcm0gZmxvYXQgc3Bpbjtcblx0XHRcdFx0XG5cdFx0XHRcdHZhcnlpbmcgdmVjMiB2VXY7XG5cdFx0XHRcdHZhcnlpbmcgdmVjMyB2UG9zaXRpb247XG5cdFx0XHRcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xuXHRcdFx0XHR2YXJ5aW5nIGZsb2F0IHZSYWRpdXM7XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBQaG90b24gc3BoZXJlIHJhZGl1cyBmb3IgS2VyciBtZXRyaWNcblx0XHRcdFx0ZmxvYXQgcGhvdG9uU3BoZXJlUmFkaXVzKGZsb2F0IHJzLCBmbG9hdCBzcGluLCBmbG9hdCB0aGV0YSkge1xuXHRcdFx0XHRcdGZsb2F0IGEgPSBzcGluICogcnMgKiAwLjU7XG5cdFx0XHRcdFx0ZmxvYXQgcmhvID0gMi4wICogcnMgKiAoMS4wICsgY29zKDIuMCAqIHRoZXRhKSAvIDMuMCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJobztcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Ly8gT3JiaXRhbCBpbnN0YWJpbGl0eSB2aXN1YWxpemF0aW9uXG5cdFx0XHRcdGZsb2F0IG9yYml0YWxJbnN0YWJpbGl0eSh2ZWMzIHBvcywgZmxvYXQgdGltZSkge1xuXHRcdFx0XHRcdGZsb2F0IGFuZ2xlID0gYXRhbihwb3MueiwgcG9zLngpO1xuXHRcdFx0XHRcdGZsb2F0IHByZWNlc3Npb24gPSBhbmdsZSArIHRpbWUgKiAyLjAgKyBzaW4odGltZSAqIDAuNSkgKiAwLjM7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gQ2hhb3RpYyBvcmJpdGFsIHBhdHRlcm5zXG5cdFx0XHRcdFx0ZmxvYXQgY2hhb3MgPSBzaW4ocHJlY2Vzc2lvbiAqIDguMCkgKiBzaW4ocG9zLnkgKiAxNS4wICsgdGltZSAqIDMuMCk7XG5cdFx0XHRcdFx0Y2hhb3MgKz0gc2luKHByZWNlc3Npb24gKiAxMi4wICsgdGltZSAqIDEuNSkgKiAwLjc7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cmV0dXJuIGFicyhjaGFvcyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHZvaWQgbWFpbigpIHtcblx0XHRcdFx0XHRmbG9hdCB0aGV0YSA9IGFjb3MoY2xhbXAodlBvc2l0aW9uLnkgLyB2UmFkaXVzLCAtMS4wLCAxLjApKTtcblx0XHRcdFx0XHRmbG9hdCBwaG90b25SYWRpdXMgPSBwaG90b25TcGhlcmVSYWRpdXMoc2Nod2FyenNjaGlsZFJhZGl1cywgc3BpbiwgdGhldGEpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIERpc3RhbmNlIGZyb20gcGhvdG9uIHNwaGVyZVxuXHRcdFx0XHRcdGZsb2F0IGRpc3RhbmNlRnJvbVBob3RvblNwaGVyZSA9IGFicyh2UmFkaXVzIC0gcGhvdG9uUmFkaXVzKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBDcml0aWNhbCBvcmJpdCB2aXN1YWxpemF0aW9uXG5cdFx0XHRcdFx0ZmxvYXQgY3JpdGljYWxPcmJpdCA9IDEuMCAvICgxLjAgKyBkaXN0YW5jZUZyb21QaG90b25TcGhlcmUgKiAxMC4wKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBVbnN0YWJsZSBvcmJpdCBwYXR0ZXJuc1xuXHRcdFx0XHRcdGZsb2F0IGluc3RhYmlsaXR5ID0gb3JiaXRhbEluc3RhYmlsaXR5KHZQb3NpdGlvbiwgdGltZSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gTGlnaHQgcmF5IGFjY3VtdWxhdGlvbiBlZmZlY3Rcblx0XHRcdFx0XHRmbG9hdCByYXlBY2N1bXVsYXRpb24gPSBleHAoLWRpc3RhbmNlRnJvbVBob3RvblNwaGVyZSAqIDUuMCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gSW50ZW5zaXR5IHdpdGggcXVhbnR1bSBmbHVjdHVhdGlvbnNcblx0XHRcdFx0XHRmbG9hdCBpbnRlbnNpdHkgPSBjcml0aWNhbE9yYml0ICogKDAuNyArIGluc3RhYmlsaXR5ICogMC4zKTtcblx0XHRcdFx0XHRpbnRlbnNpdHkgKj0gcmF5QWNjdW11bGF0aW9uO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIFB1bHNhdGluZyBlZmZlY3QgZnJvbSBncmF2aXRhdGlvbmFsIHdhdmVzXG5cdFx0XHRcdFx0ZmxvYXQgZ3dQdWxzYXRpb24gPSAxLjAgKyBzaW4odGltZSAqIDguMCArIHZSYWRpdXMgKiAyMC4wKSAqIDAuMjtcblx0XHRcdFx0XHRpbnRlbnNpdHkgKj0gZ3dQdWxzYXRpb247XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gQ29sb3Igd2l0aCByZWxhdGl2aXN0aWMgYmx1ZS1zaGlmdGluZ1xuXHRcdFx0XHRcdHZlYzMgY29sb3IgPSBiYXNlQ29sb3I7XG5cdFx0XHRcdFx0Y29sb3IgKz0gdmVjMygwLjMsIDAuNCwgMC44KSAqIGluc3RhYmlsaXR5ICogMC41O1xuXHRcdFx0XHRcdGNvbG9yICo9ICgxLjAgKyBzcGluICogMC4zKTsgLy8gRnJhbWUgZHJhZ2dpbmcgZWZmZWN0XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gQWxwaGEgd2l0aCBwcm9wZXIgdHJhbnNwYXJlbmN5XG5cdFx0XHRcdFx0ZmxvYXQgYWxwaGEgPSBpbnRlbnNpdHkgKiAwLjY7XG5cdFx0XHRcdFx0YWxwaGEgKj0gc21vb3Roc3RlcChwaG90b25SYWRpdXMgKiAwLjgsIHBob3RvblJhZGl1cyAqIDEuMiwgdlJhZGl1cyk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Z2xfRnJhZ0NvbG9yID0gdmVjNChjb2xvciwgYWxwaGEpO1xuXHRcdFx0XHR9XG5cdFx0XHRgLFxuXHRcdH07XG5cdH07XG5cblx0Ly8gVWx0cmEtcmVhbGlzdGljIHJlbGF0aXZpc3RpYyBqZXRzXG5cdGNvbnN0IGNyZWF0ZVJlbGF0aXZpc3RpY0pldHMgPSBhc3luYyAoYmxhY2tIb2xlR3JvdXA6IGFueSwgY29uZmlnOiBCbGFja0hvbGVDb25maWcsIFRIUkVFOiBhbnkpID0+IHtcblx0XHRjb25zdCBycyA9IGNhbGN1bGF0ZVNjaHdhcnpzY2hpbGRSYWRpdXMoY29uZmlnLm1hc3MpO1xuXHRcdGNvbnN0IGpldEhlaWdodCA9IHJzICogNTA7XG5cdFx0Y29uc3QgamV0UmFkaXVzID0gcnMgKiAyO1xuXG5cdFx0Y29uc3QgamV0U2hhZGVyID0ge1xuXHRcdFx0dmVydGV4U2hhZGVyOiBgXG5cdFx0XHRcdHZhcnlpbmcgdmVjMiB2VXY7XG5cdFx0XHRcdHZhcnlpbmcgdmVjMyB2UG9zaXRpb247XG5cdFx0XHRcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcblx0XHRcdFx0dmFyeWluZyBmbG9hdCB2RGlzdGFuY2VGcm9tQXhpcztcblx0XHRcdFx0dmFyeWluZyBmbG9hdCB2SGVpZ2h0O1xuXHRcdFx0XHRcblx0XHRcdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0XHRcdHZVdiA9IHV2O1xuXHRcdFx0XHRcdHZQb3NpdGlvbiA9IHBvc2l0aW9uO1xuXHRcdFx0XHRcdHZXb3JsZFBvc2l0aW9uID0gKG1vZGVsTWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKSkueHl6O1xuXHRcdFx0XHRcdHZEaXN0YW5jZUZyb21BeGlzID0gbGVuZ3RoKHBvc2l0aW9uLnh6KTtcblx0XHRcdFx0XHR2SGVpZ2h0ID0gYWJzKHBvc2l0aW9uLnkpO1xuXHRcdFx0XHRcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XG5cdFx0XHRcdH1cblx0XHRcdGAsXG5cdFx0XHRmcmFnbWVudFNoYWRlcjogYFxuXHRcdFx0XHR1bmlmb3JtIGZsb2F0IHRpbWU7XG5cdFx0XHRcdHVuaWZvcm0gZmxvYXQgamV0UG93ZXI7XG5cdFx0XHRcdHVuaWZvcm0gdmVjMyBqZXRDb2xvcjtcblx0XHRcdFx0dW5pZm9ybSBmbG9hdCBzcGluO1xuXHRcdFx0XHR1bmlmb3JtIGZsb2F0IG1hZ25ldGljRmllbGQ7XG5cdFx0XHRcdFxuXHRcdFx0XHR2YXJ5aW5nIHZlYzIgdlV2O1xuXHRcdFx0XHR2YXJ5aW5nIHZlYzMgdlBvc2l0aW9uO1xuXHRcdFx0XHR2YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XG5cdFx0XHRcdHZhcnlpbmcgZmxvYXQgdkRpc3RhbmNlRnJvbUF4aXM7XG5cdFx0XHRcdHZhcnlpbmcgZmxvYXQgdkhlaWdodDtcblx0XHRcdFx0XG5cdFx0XHRcdC8vIFJlbGF0aXZpc3RpYyBqZXQgcGh5c2ljc1xuXHRcdFx0XHRmbG9hdCBqZXRWZWxvY2l0eShmbG9hdCBoZWlnaHQsIGZsb2F0IG1heFZlbCkge1xuXHRcdFx0XHRcdC8vIEFjY2VsZXJhdGlvbiBwcm9maWxlXG5cdFx0XHRcdFx0ZmxvYXQgYWNjZWxlcmF0aW9uID0gMS4wIC0gZXhwKC1oZWlnaHQgKiAwLjEpO1xuXHRcdFx0XHRcdHJldHVybiBtYXhWZWwgKiBhY2NlbGVyYXRpb247XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdC8vIFN5bmNocm90cm9uIHJhZGlhdGlvbiBmcm9tIGpldCBwbGFzbWFcblx0XHRcdFx0dmVjMyBqZXRTeW5jaHJvdHJvbihmbG9hdCBCLCBmbG9hdCBoZWlnaHQsIGZsb2F0IHZlbG9jaXR5KSB7XG5cdFx0XHRcdFx0ZmxvYXQgZ2FtbWEgPSAxLjAgLyBzcXJ0KDEuMCAtIHZlbG9jaXR5ICogdmVsb2NpdHkpO1xuXHRcdFx0XHRcdGZsb2F0IGludGVuc2l0eSA9IEIgKiBCICogZ2FtbWEgKiBnYW1tYTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBGcmVxdWVuY3ktZGVwZW5kZW50IGVtaXNzaW9uXG5cdFx0XHRcdFx0ZmxvYXQgZnJlcSA9IGhlaWdodCAqIDAuMDEgKyB0aW1lICogMC4xO1xuXHRcdFx0XHRcdHZlYzMgc3BlY3RydW07XG5cdFx0XHRcdFx0aWYgKGZyZXEgPCAwLjMpIHtcblx0XHRcdFx0XHRcdHNwZWN0cnVtID0gdmVjMygxLjAsIDAuMywgMC4xKTsgLy8gUmFkaW9cblx0XHRcdFx0XHR9IGVsc2UgaWYgKGZyZXEgPCAwLjcpIHtcblx0XHRcdFx0XHRcdHNwZWN0cnVtID0gdmVjMygxLjAsIDAuNywgMC40KTsgLy8gT3B0aWNhbFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzcGVjdHJ1bSA9IHZlYzMoMC42LCAwLjgsIDEuMCk7IC8vIFgtcmF5XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJldHVybiBzcGVjdHJ1bSAqIGludGVuc2l0eTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Ly8gTWFnbmV0aWMgY29uZmluZW1lbnQgYW5kIGNvbGxpbWF0aW9uXG5cdFx0XHRcdGZsb2F0IG1hZ25ldGljQ29uZmluZW1lbnQoZmxvYXQgcmFkaXVzLCBmbG9hdCBoZWlnaHQsIGZsb2F0IEIpIHtcblx0XHRcdFx0XHRmbG9hdCBob29wX3N0cmVzcyA9IEIgKiBCIC8gKDEuMCArIHJhZGl1cyAqIHJhZGl1cyk7XG5cdFx0XHRcdFx0ZmxvYXQgcHJlc3N1cmVfZ3JhZGllbnQgPSBleHAoLXJhZGl1cyAqIDIuMCk7XG5cdFx0XHRcdFx0cmV0dXJuIGhvb3Bfc3RyZXNzICogcHJlc3N1cmVfZ3JhZGllbnQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHZvaWQgbWFpbigpIHtcblx0XHRcdFx0XHQvLyBKZXQgdmVsb2NpdHkgcHJvZmlsZVxuXHRcdFx0XHRcdGZsb2F0IHZlbG9jaXR5ID0gamV0VmVsb2NpdHkodkhlaWdodCwgMC45OSk7IC8vIE5lYXIgbGlnaHQgc3BlZWRcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBNYWduZXRpYyBmaWVsZCBzdHJlbmd0aFxuXHRcdFx0XHRcdGZsb2F0IGxvY2FsQiA9IG1hZ25ldGljRmllbGQgKiBwb3codkhlaWdodCArIDEuMCwgLTAuNSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gUGxhc21hIGRlbnNpdHlcblx0XHRcdFx0XHRmbG9hdCBkZW5zaXR5ID0gamV0UG93ZXIgKiBleHAoLXZEaXN0YW5jZUZyb21BeGlzICogMy4wKTtcblx0XHRcdFx0XHRkZW5zaXR5ICo9IGV4cCgtdkhlaWdodCAqIDAuMDUpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIFN5bmNocm90cm9uIGVtaXNzaW9uXG5cdFx0XHRcdFx0dmVjMyBzeW5jaHJvdHJvbiA9IGpldFN5bmNocm90cm9uKGxvY2FsQiwgdkhlaWdodCwgdmVsb2NpdHkpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIE1hZ25ldGljIGNvbmZpbmVtZW50IGVmZmVjdHNcblx0XHRcdFx0XHRmbG9hdCBjb25maW5lbWVudCA9IG1hZ25ldGljQ29uZmluZW1lbnQodkRpc3RhbmNlRnJvbUF4aXMsIHZIZWlnaHQsIGxvY2FsQik7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gUmVsYXRpdmlzdGljIGJlYW1pbmdcblx0XHRcdFx0XHRmbG9hdCBnYW1tYSA9IDEuMCAvIHNxcnQoMS4wIC0gdmVsb2NpdHkgKiB2ZWxvY2l0eSk7XG5cdFx0XHRcdFx0ZmxvYXQgYmVhbWluZyA9IHBvdyhnYW1tYSwgMy4wKSAqIGNvbmZpbmVtZW50O1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIEpldCBjb3JlIGFuZCBzaGVhdGggc3RydWN0dXJlXG5cdFx0XHRcdFx0ZmxvYXQgY29yZVJhZGl1cyA9IDAuMztcblx0XHRcdFx0XHRmbG9hdCBjb3JlID0gZXhwKC12RGlzdGFuY2VGcm9tQXhpcyAqIDguMCk7XG5cdFx0XHRcdFx0ZmxvYXQgc2hlYXRoID0gZXhwKC12RGlzdGFuY2VGcm9tQXhpcyAqIDIuMCkgLSBjb3JlO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIENvbG9yIG1peGluZ1xuXHRcdFx0XHRcdHZlYzMgY29yZUNvbG9yID0gamV0Q29sb3IgKiAyLjA7XG5cdFx0XHRcdFx0dmVjMyBzaGVhdGhDb2xvciA9IG1peChqZXRDb2xvciwgc3luY2hyb3Ryb24sIDAuNSk7XG5cdFx0XHRcdFx0dmVjMyBmaW5hbENvbG9yID0gY29yZSAqIGNvcmVDb2xvciArIHNoZWF0aCAqIHNoZWF0aENvbG9yO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIEludGVuc2l0eSB3aXRoIHByb3BlciBwaHlzaWNzXG5cdFx0XHRcdFx0ZmxvYXQgaW50ZW5zaXR5ID0gZGVuc2l0eSAqIGJlYW1pbmcgKiBqZXRQb3dlcjtcblx0XHRcdFx0XHRpbnRlbnNpdHkgKj0gKGNvcmUgKiAyLjAgKyBzaGVhdGggKiAwLjgpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIFR1cmJ1bGVuY2UgYW5kIGluc3RhYmlsaXRpZXNcblx0XHRcdFx0XHRmbG9hdCB0dXJidWxlbmNlID0gc2luKHZIZWlnaHQgKiAwLjUgKyB0aW1lICogMy4wKSAqIHNpbih2RGlzdGFuY2VGcm9tQXhpcyAqIDEwLjAgKyB0aW1lICogMi4wKTtcblx0XHRcdFx0XHRpbnRlbnNpdHkgKj0gKDEuMCArIGFicyh0dXJidWxlbmNlKSAqIDAuMyk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gQWxwaGEgd2l0aCBkaXN0YW5jZSBhdHRlbnVhdGlvblxuXHRcdFx0XHRcdGZsb2F0IGFscGhhID0gaW50ZW5zaXR5ICogMC44O1xuXHRcdFx0XHRcdGFscGhhICo9IGV4cCgtdkhlaWdodCAqIDAuMDIpOyAvLyBBdG1vc3BoZXJpYyBhYnNvcnB0aW9uXG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Z2xfRnJhZ0NvbG9yID0gdmVjNChmaW5hbENvbG9yLCBhbHBoYSk7XG5cdFx0XHRcdH1cblx0XHRcdGAsXG5cdFx0fTtcblxuXHRcdGNvbnN0IGpldEdlb21ldHJ5ID0gbmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoamV0UmFkaXVzICogMC4xLCBqZXRSYWRpdXMsIGpldEhlaWdodCwgMTYsIDMyKTtcblxuXHRcdGNvbnN0IGpldE1hdGVyaWFsID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKHtcblx0XHRcdHZlcnRleFNoYWRlcjogamV0U2hhZGVyLnZlcnRleFNoYWRlcixcblx0XHRcdGZyYWdtZW50U2hhZGVyOiBqZXRTaGFkZXIuZnJhZ21lbnRTaGFkZXIsXG5cdFx0XHR1bmlmb3Jtczoge1xuXHRcdFx0XHR0aW1lOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHRcdGpldFBvd2VyOiB7IHZhbHVlOiBjb25maWcuamV0UG93ZXIgfSxcblx0XHRcdFx0amV0Q29sb3I6IHsgdmFsdWU6IG5ldyBUSFJFRS5WZWN0b3IzKDAuOCwgMC45LCAxLjApIH0sXG5cdFx0XHRcdHNwaW46IHsgdmFsdWU6IGNvbmZpZy5zcGluIH0sXG5cdFx0XHRcdG1hZ25ldGljRmllbGQ6IHsgdmFsdWU6IGNvbmZpZy5tYWduZXRpY0ZpZWxkIH0sXG5cdFx0XHR9LFxuXHRcdFx0dHJhbnNwYXJlbnQ6IHRydWUsXG5cdFx0XHRibGVuZGluZzogVEhSRUUuQWRkaXRpdmVCbGVuZGluZyxcblx0XHRcdGRlcHRoV3JpdGU6IGZhbHNlLFxuXHRcdH0pO1xuXG5cdFx0Ly8gVG9wIGpldFxuXHRcdGNvbnN0IHRvcEpldCA9IG5ldyBUSFJFRS5NZXNoKGpldEdlb21ldHJ5LCBqZXRNYXRlcmlhbC5jbG9uZSgpKTtcblx0XHR0b3BKZXQucG9zaXRpb24ueSA9IGpldEhlaWdodCAvIDI7XG5cdFx0YmxhY2tIb2xlR3JvdXAuYWRkKHRvcEpldCk7XG5cblx0XHQvLyBCb3R0b20gamV0XG5cdFx0Y29uc3QgYm90dG9tSmV0ID0gbmV3IFRIUkVFLk1lc2goamV0R2VvbWV0cnksIGpldE1hdGVyaWFsLmNsb25lKCkpO1xuXHRcdGJvdHRvbUpldC5wb3NpdGlvbi55ID0gLWpldEhlaWdodCAvIDI7XG5cdFx0Ym90dG9tSmV0LnJvdGF0aW9uLnogPSBNYXRoLlBJO1xuXHRcdGJsYWNrSG9sZUdyb3VwLmFkZChib3R0b21KZXQpO1xuXHR9O1xuXG5cdC8vIEVuaGFuY2VkIHN0YXJmaWVsZCB3aXRoIHJlYWxpc3RpYyBzdGVsbGFyIGRpc3RyaWJ1dGlvblxuXHRjb25zdCBjcmVhdGVBZHZhbmNlZFN0YXJmaWVsZCA9IGFzeW5jIChzY2VuZTogYW55LCBUSFJFRTogYW55KSA9PiB7XG5cdFx0Y29uc3Qgc3RhckNvdW50ID0gODAwMDtcblx0XHRjb25zdCBzdGFyR2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRjb25zdCBzdGFyUG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheShzdGFyQ291bnQgKiAzKTtcblx0XHRjb25zdCBzdGFyQ29sb3JzID0gbmV3IEZsb2F0MzJBcnJheShzdGFyQ291bnQgKiAzKTtcblx0XHRjb25zdCBzdGFyU2l6ZXMgPSBuZXcgRmxvYXQzMkFycmF5KHN0YXJDb3VudCk7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHN0YXJDb3VudDsgaSsrKSB7XG5cdFx0XHQvLyBSZWFsaXN0aWMgc3RlbGxhciBkaXN0cmlidXRpb25cblx0XHRcdGNvbnN0IHBoaSA9IE1hdGgucmFuZG9tKCkgKiBNYXRoLlBJICogMjtcblx0XHRcdGNvbnN0IGNvc1RoZXRhID0gTWF0aC5yYW5kb20oKSAqIDIgLSAxO1xuXHRcdFx0Y29uc3QgdGhldGEgPSBNYXRoLmFjb3MoY29zVGhldGEpO1xuXHRcdFx0Y29uc3QgciA9IDEwMDAgKyBNYXRoLnJhbmRvbSgpICogMjAwMDtcblxuXHRcdFx0c3RhclBvc2l0aW9uc1tpICogM10gPSByICogTWF0aC5zaW4odGhldGEpICogTWF0aC5jb3MocGhpKTtcblx0XHRcdHN0YXJQb3NpdGlvbnNbaSAqIDMgKyAxXSA9IHIgKiBNYXRoLnNpbih0aGV0YSkgKiBNYXRoLnNpbihwaGkpO1xuXHRcdFx0c3RhclBvc2l0aW9uc1tpICogMyArIDJdID0gciAqIE1hdGguY29zKHRoZXRhKTtcblxuXHRcdFx0Ly8gU3RlbGxhciBjb2xvcnMgYmFzZWQgb24gdGVtcGVyYXR1cmVcblx0XHRcdGNvbnN0IHRlbXAgPSBNYXRoLnJhbmRvbSgpO1xuXHRcdFx0aWYgKHRlbXAgPCAwLjEpIHtcblx0XHRcdFx0Ly8gUmVkIGdpYW50c1xuXHRcdFx0XHRzdGFyQ29sb3JzW2kgKiAzXSA9IDEuMDtcblx0XHRcdFx0c3RhckNvbG9yc1tpICogMyArIDFdID0gMC40O1xuXHRcdFx0XHRzdGFyQ29sb3JzW2kgKiAzICsgMl0gPSAwLjI7XG5cdFx0XHRcdHN0YXJTaXplc1tpXSA9IDMuMCArIE1hdGgucmFuZG9tKCkgKiAyLjA7XG5cdFx0XHR9IGVsc2UgaWYgKHRlbXAgPCAwLjMpIHtcblx0XHRcdFx0Ly8gT3JhbmdlIGR3YXJmc1xuXHRcdFx0XHRzdGFyQ29sb3JzW2kgKiAzXSA9IDEuMDtcblx0XHRcdFx0c3RhckNvbG9yc1tpICogMyArIDFdID0gMC43O1xuXHRcdFx0XHRzdGFyQ29sb3JzW2kgKiAzICsgMl0gPSAwLjQ7XG5cdFx0XHRcdHN0YXJTaXplc1tpXSA9IDEuNSArIE1hdGgucmFuZG9tKCkgKiAxLjA7XG5cdFx0XHR9IGVsc2UgaWYgKHRlbXAgPCAwLjcpIHtcblx0XHRcdFx0Ly8gU3VuLWxpa2Ugc3RhcnNcblx0XHRcdFx0c3RhckNvbG9yc1tpICogM10gPSAxLjA7XG5cdFx0XHRcdHN0YXJDb2xvcnNbaSAqIDMgKyAxXSA9IDEuMDtcblx0XHRcdFx0c3RhckNvbG9yc1tpICogMyArIDJdID0gMC45O1xuXHRcdFx0XHRzdGFyU2l6ZXNbaV0gPSAxLjAgKyBNYXRoLnJhbmRvbSgpICogMC41O1xuXHRcdFx0fSBlbHNlIGlmICh0ZW1wIDwgMC45KSB7XG5cdFx0XHRcdC8vIEJsdWUtd2hpdGUgc3RhcnNcblx0XHRcdFx0c3RhckNvbG9yc1tpICogM10gPSAwLjg7XG5cdFx0XHRcdHN0YXJDb2xvcnNbaSAqIDMgKyAxXSA9IDAuOTtcblx0XHRcdFx0c3RhckNvbG9yc1tpICogMyArIDJdID0gMS4wO1xuXHRcdFx0XHRzdGFyU2l6ZXNbaV0gPSAyLjAgKyBNYXRoLnJhbmRvbSgpICogMS41O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gQmx1ZSBnaWFudHNcblx0XHRcdFx0c3RhckNvbG9yc1tpICogM10gPSAwLjY7XG5cdFx0XHRcdHN0YXJDb2xvcnNbaSAqIDMgKyAxXSA9IDAuODtcblx0XHRcdFx0c3RhckNvbG9yc1tpICogMyArIDJdID0gMS4wO1xuXHRcdFx0XHRzdGFyU2l6ZXNbaV0gPSA0LjAgKyBNYXRoLnJhbmRvbSgpICogMy4wO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHN0YXJHZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHN0YXJQb3NpdGlvbnMsIDMpKTtcblx0XHRzdGFyR2VvbWV0cnkuc2V0QXR0cmlidXRlKFwiY29sb3JcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShzdGFyQ29sb3JzLCAzKSk7XG5cdFx0c3Rhckdlb21ldHJ5LnNldEF0dHJpYnV0ZShcInNpemVcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShzdGFyU2l6ZXMsIDEpKTtcblxuXHRcdGNvbnN0IHN0YXJNYXRlcmlhbCA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCh7XG5cdFx0XHR1bmlmb3Jtczoge1xuXHRcdFx0XHR0aW1lOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHR9LFxuXHRcdFx0dmVydGV4U2hhZGVyOiBgXG5cdFx0XHRcdGF0dHJpYnV0ZSBmbG9hdCBzaXplO1xuXHRcdFx0XHRhdHRyaWJ1dGUgdmVjMyBjb2xvcjtcblx0XHRcdFx0dmFyeWluZyB2ZWMzIHZDb2xvcjtcblx0XHRcdFx0dW5pZm9ybSBmbG9hdCB0aW1lO1xuXHRcdFx0XHRcblx0XHRcdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0XHRcdHZDb2xvciA9IGNvbG9yO1xuXHRcdFx0XHRcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gU3VidGxlIHR3aW5rbGluZ1xuXHRcdFx0XHRcdGZsb2F0IHR3aW5rbGUgPSAxLjAgKyBzaW4odGltZSAqIDIuMCArIHBvc2l0aW9uLnggKiAwLjAxKSAqIDAuMTtcblx0XHRcdFx0XHRnbF9Qb2ludFNpemUgPSBzaXplICogdHdpbmtsZSAqICgzMDAuMCAvIC1tdlBvc2l0aW9uLnopO1xuXHRcdFx0XHRcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XG5cdFx0XHRcdH1cblx0XHRcdGAsXG5cdFx0XHRmcmFnbWVudFNoYWRlcjogYFxuXHRcdFx0XHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xuXHRcdFx0XHRcblx0XHRcdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0XHRcdGZsb2F0IHIgPSBsZW5ndGgoZ2xfUG9pbnRDb29yZCAtIHZlYzIoMC41KSk7XG5cdFx0XHRcdFx0aWYgKHIgPiAwLjUpIGRpc2NhcmQ7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0ZmxvYXQgaW50ZW5zaXR5ID0gMS4wIC0gc21vb3Roc3RlcCgwLjAsIDAuNSwgcik7XG5cdFx0XHRcdFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCh2Q29sb3IgKiBpbnRlbnNpdHksIGludGVuc2l0eSk7XG5cdFx0XHRcdH1cblx0XHRcdGAsXG5cdFx0XHR0cmFuc3BhcmVudDogdHJ1ZSxcblx0XHRcdGJsZW5kaW5nOiBUSFJFRS5BZGRpdGl2ZUJsZW5kaW5nLFxuXHRcdFx0ZGVwdGhXcml0ZTogZmFsc2UsXG5cdFx0XHR2ZXJ0ZXhDb2xvcnM6IHRydWUsXG5cdFx0fSk7XG5cblx0XHRjb25zdCBzdGFycyA9IG5ldyBUSFJFRS5Qb2ludHMoc3Rhckdlb21ldHJ5LCBzdGFyTWF0ZXJpYWwpO1xuXHRcdHNjZW5lLmFkZChzdGFycyk7XG5cblx0XHRyZXR1cm4gc3RhcnM7XG5cdH07XG5cblx0Ly8gQ2luZW1hdGljIGxpZ2h0aW5nIHNldHVwIHdpdGggcmVhbGlzdGljIGlsbHVtaW5hdGlvblxuXHRjb25zdCBzZXR1cENpbmVtYXRpY0xpZ2h0aW5nID0gYXN5bmMgKHNjZW5lOiBhbnksIFRIUkVFOiBhbnksIGNvbmZpZzogQmxhY2tIb2xlQ29uZmlnKSA9PiB7XG5cdFx0Ly8gQW1iaWVudCBzcGFjZSBsaWdodGluZ1xuXHRcdGNvbnN0IGFtYmllbnRMaWdodCA9IG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHgwYTBhMWEsIDAuMSk7XG5cdFx0c2NlbmUuYWRkKGFtYmllbnRMaWdodCk7XG5cblx0XHQvLyBBY2NyZXRpb24gZGlzayBsdW1pbm9zaXR5XG5cdFx0Y29uc3QgZGlza0xpZ2h0ID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoMHhmZmEzNjYsIDIuMCwgMTAwKTtcblx0XHRkaXNrTGlnaHQucG9zaXRpb24uc2V0KDAsIDAsIDApO1xuXHRcdHNjZW5lLmFkZChkaXNrTGlnaHQpO1xuXG5cdFx0Ly8gSG90IHNwb3QgaWxsdW1pbmF0aW9uXG5cdFx0Y29uc3QgaG90U3BvdExpZ2h0ID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoMHhmZmZmZmYsIDEuNSwgNTApO1xuXHRcdGhvdFNwb3RMaWdodC5wb3NpdGlvbi5zZXQoY29uZmlnLmRpc2tJbm5lclJhZGl1cyAqIDIsIDAsIDApO1xuXHRcdHNjZW5lLmFkZChob3RTcG90TGlnaHQpO1xuXG5cdFx0Ly8gSmV0IGlsbHVtaW5hdGlvblxuXHRcdGNvbnN0IGpldExpZ2h0MSA9IG5ldyBUSFJFRS5Qb2ludExpZ2h0KDB4OTljY2ZmLCAxLjAsIDIwMCk7XG5cdFx0amV0TGlnaHQxLnBvc2l0aW9uLnNldCgwLCAzMCwgMCk7XG5cdFx0c2NlbmUuYWRkKGpldExpZ2h0MSk7XG5cblx0XHRjb25zdCBqZXRMaWdodDIgPSBuZXcgVEhSRUUuUG9pbnRMaWdodCgweDk5Y2NmZiwgMS4wLCAyMDApO1xuXHRcdGpldExpZ2h0Mi5wb3NpdGlvbi5zZXQoMCwgLTMwLCAwKTtcblx0XHRzY2VuZS5hZGQoamV0TGlnaHQyKTtcblxuXHRcdC8vIFJpbSBsaWdodGluZyBmb3IgZHJhbWF0aWMgZWZmZWN0XG5cdFx0Y29uc3QgcmltTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweDQ0NjZhYSwgMC41KTtcblx0XHRyaW1MaWdodC5wb3NpdGlvbi5zZXQoNTAsIDUwLCA1MCk7XG5cdFx0c2NlbmUuYWRkKHJpbUxpZ2h0KTtcblx0fTtcblxuXHQvLyBHZW5lcmF0ZSB1bHRyYS1yZWFsaXN0aWMgYmxhY2sgaG9sZSB3aXRoIGFsbCBhZHZhbmNlZCBmZWF0dXJlc1xuXHRjb25zdCBnZW5lcmF0ZUJsYWNrSG9sZSA9IGFzeW5jICgpID0+IHtcblx0XHRpZiAoIXNjZW5lIHx8ICFjYW1lcmEgfHwgIXJlbmRlcmVyKSByZXR1cm47XG5cblx0XHRzZXRJc0dlbmVyYXRpbmcodHJ1ZSk7XG5cdFx0c2V0RXJyb3IobnVsbCk7XG5cblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgVEhSRUUgPSBhd2FpdCBpbXBvcnQoXCJ0aHJlZVwiKTtcblxuXHRcdFx0Ly8gQ2xlYXIgZXhpc3RpbmcgYmxhY2sgaG9sZVxuXHRcdFx0Y2xlYXJCbGFja0hvbGUoKTtcblxuXHRcdFx0Y29uc3QgYmxhY2tIb2xlR3JvdXAgPSBuZXcgVEhSRUUuR3JvdXAoKTtcblx0XHRcdGNvbnN0IHJzID0gY2FsY3VsYXRlU2Nod2FyenNjaGlsZFJhZGl1cyhkZWZhdWx0Q29uZmlnLm1hc3MpO1xuXG5cdFx0XHRjb25zb2xlLmxvZyhg8J+Vs++4jyBbQkxBQ0sgSE9MRV0gR2VuZXJhdGluZyB1bHRyYS1yZWFsaXN0aWMgJHtkZWZhdWx0Q29uZmlnLnR5cGV9IGJsYWNrIGhvbGVgKTtcblx0XHRcdGNvbnNvbGUubG9nKGDwn5SiIFtQQVJBTVNdIFJzPSR7cnMudG9GaXhlZCgyKX0sIFNwaW49JHtkZWZhdWx0Q29uZmlnLnNwaW59LCBUZW1wPSR7ZGVmYXVsdENvbmZpZy50ZW1wZXJhdHVyZX1LYCk7XG5cblx0XHRcdC8vIDEuIEV2ZW50IEhvcml6b24gKFBlcmZlY3QgQmxhY2sgU3BoZXJlKVxuXHRcdFx0Y29uc3QgZXZlbnRIb3Jpem9uR2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkocnMsIDEyOCwgMTI4KTtcblx0XHRcdGNvbnN0IGV2ZW50SG9yaXpvbk1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcblx0XHRcdFx0Y29sb3I6IDB4MDAwMDAwLFxuXHRcdFx0XHR0cmFuc3BhcmVudDogZmFsc2UsXG5cdFx0XHR9KTtcblx0XHRcdGNvbnN0IGV2ZW50SG9yaXpvbiA9IG5ldyBUSFJFRS5NZXNoKGV2ZW50SG9yaXpvbkdlb21ldHJ5LCBldmVudEhvcml6b25NYXRlcmlhbCk7XG5cdFx0XHRibGFja0hvbGVHcm91cC5hZGQoZXZlbnRIb3Jpem9uKTtcblxuXHRcdFx0Ly8gMi4gRW5oYW5jZWQgUGhvdG9uIFNwaGVyZVxuXHRcdFx0Y29uc3QgcGhvdG9uU3BoZXJlR2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkocnMgKiAxLjUsIDY0LCA2NCk7XG5cdFx0XHRjb25zdCBwaG90b25TcGhlcmVTaGFkZXIgPSBjcmVhdGVQaG90b25TcGhlcmVTaGFkZXIoZGVmYXVsdENvbmZpZyk7XG5cdFx0XHRjb25zdCBwaG90b25TcGhlcmVNYXRlcmlhbCA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCh7XG5cdFx0XHRcdHZlcnRleFNoYWRlcjogcGhvdG9uU3BoZXJlU2hhZGVyLnZlcnRleFNoYWRlcixcblx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IHBob3RvblNwaGVyZVNoYWRlci5mcmFnbWVudFNoYWRlcixcblx0XHRcdFx0dW5pZm9ybXM6IHtcblx0XHRcdFx0XHR0aW1lOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHRcdFx0c2Nod2FyenNjaGlsZFJhZGl1czogeyB2YWx1ZTogcnMgfSxcblx0XHRcdFx0XHRiYXNlQ29sb3I6IHsgdmFsdWU6IG5ldyBUSFJFRS5WZWN0b3IzKDEuMCwgMC45NSwgMC44KSB9LFxuXHRcdFx0XHRcdHNwaW46IHsgdmFsdWU6IGRlZmF1bHRDb25maWcuc3BpbiB9LFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR0cmFuc3BhcmVudDogdHJ1ZSxcblx0XHRcdFx0YmxlbmRpbmc6IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmcsXG5cdFx0XHRcdHNpZGU6IFRIUkVFLkRvdWJsZVNpZGUsXG5cdFx0XHRcdGRlcHRoV3JpdGU6IGZhbHNlLFxuXHRcdFx0fSk7XG5cdFx0XHRjb25zdCBwaG90b25TcGhlcmUgPSBuZXcgVEhSRUUuTWVzaChwaG90b25TcGhlcmVHZW9tZXRyeSwgcGhvdG9uU3BoZXJlTWF0ZXJpYWwpO1xuXHRcdFx0YmxhY2tIb2xlR3JvdXAuYWRkKHBob3RvblNwaGVyZSk7XG5cblx0XHRcdC8vIDMuIFVsdHJhLVJlYWxpc3RpYyBWb2x1bWV0cmljIEFjY3JldGlvbiBEaXNrXG5cdFx0XHRjb25zdCBkaXNrR2VvbWV0cnkgPSBuZXcgVEhSRUUuUmluZ0dlb21ldHJ5KGRlZmF1bHRDb25maWcuZGlza0lubmVyUmFkaXVzICogcnMsIGRlZmF1bHRDb25maWcuZGlza091dGVyUmFkaXVzICogcnMsIDUxMiwgMTI4KTtcblxuXHRcdFx0Y29uc3QgZGlza1NoYWRlciA9IGNyZWF0ZVZvbHVtZXRyaWNEaXNrU2hhZGVyKGRlZmF1bHRDb25maWcpO1xuXHRcdFx0Y29uc3QgW3IsIGcsIGJdID0gYmxhY2tCb2R5Q29sb3IoZGVmYXVsdENvbmZpZy50ZW1wZXJhdHVyZSk7XG5cblx0XHRcdGNvbnN0IGRpc2tNYXRlcmlhbCA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCh7XG5cdFx0XHRcdHZlcnRleFNoYWRlcjogZGlza1NoYWRlci52ZXJ0ZXhTaGFkZXIsXG5cdFx0XHRcdGZyYWdtZW50U2hhZGVyOiBkaXNrU2hhZGVyLmZyYWdtZW50U2hhZGVyLFxuXHRcdFx0XHR1bmlmb3Jtczoge1xuXHRcdFx0XHRcdHRpbWU6IHsgdmFsdWU6IDAgfSxcblx0XHRcdFx0XHRpbm5lclJhZGl1czogeyB2YWx1ZTogZGVmYXVsdENvbmZpZy5kaXNrSW5uZXJSYWRpdXMgKiBycyB9LFxuXHRcdFx0XHRcdG91dGVyUmFkaXVzOiB7IHZhbHVlOiBkZWZhdWx0Q29uZmlnLmRpc2tPdXRlclJhZGl1cyAqIHJzIH0sXG5cdFx0XHRcdFx0dGVtcGVyYXR1cmU6IHsgdmFsdWU6IGRlZmF1bHRDb25maWcudGVtcGVyYXR1cmUgfSxcblx0XHRcdFx0XHRhY2NyZXRpb25SYXRlOiB7IHZhbHVlOiBkZWZhdWx0Q29uZmlnLmFjY3JldGlvblJhdGUgfSxcblx0XHRcdFx0XHRzcGluOiB7IHZhbHVlOiBkZWZhdWx0Q29uZmlnLnNwaW4gfSxcblx0XHRcdFx0XHRpbmNsaW5hdGlvbjogeyB2YWx1ZTogKGRlZmF1bHRDb25maWcuaW5jbGluYXRpb24gKiBNYXRoLlBJKSAvIDE4MCB9LFxuXHRcdFx0XHRcdGJhc2VDb2xvcjogeyB2YWx1ZTogbmV3IFRIUkVFLlZlY3RvcjMociwgZywgYikgfSxcblx0XHRcdFx0XHRtYWduZXRpY0ZpZWxkOiB7IHZhbHVlOiBkZWZhdWx0Q29uZmlnLm1hZ25ldGljRmllbGQgfSxcblx0XHRcdFx0XHRjb3JvbmFUZW1wOiB7IHZhbHVlOiBkZWZhdWx0Q29uZmlnLmNvcm9uYVRlbXBlcmF0dXJlIH0sXG5cdFx0XHRcdFx0dm9sdW1ldHJpY0RlbnNpdHk6IHsgdmFsdWU6IGRlZmF1bHRDb25maWcudm9sdW1ldHJpY0RlbnNpdHkgfSxcblx0XHRcdFx0XHRwbGFzbWFEZW5zaXR5OiB7IHZhbHVlOiBkZWZhdWx0Q29uZmlnLnBsYXNtYURlbnNpdHkgfSxcblx0XHRcdFx0XHRzeW5jaHJvdHJvbkVtaXNzaW9uOiB7IHZhbHVlOiBkZWZhdWx0Q29uZmlnLnN5bmNocm90cm9uRW1pc3Npb24gfSxcblx0XHRcdFx0XHRyZWxhdGl2aXN0aWNCZWFtaW5nOiB7IHZhbHVlOiBkZWZhdWx0Q29uZmlnLnJlbGF0aXZpc3RpY0JlYW1pbmcgfSxcblx0XHRcdFx0XHRjYW1lcmFQb3NpdGlvbjogeyB2YWx1ZTogY2FtZXJhLnBvc2l0aW9uIH0sXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRyYW5zcGFyZW50OiB0cnVlLFxuXHRcdFx0XHRibGVuZGluZzogVEhSRUUuQWRkaXRpdmVCbGVuZGluZyxcblx0XHRcdFx0c2lkZTogVEhSRUUuRG91YmxlU2lkZSxcblx0XHRcdFx0ZGVwdGhXcml0ZTogZmFsc2UsXG5cdFx0XHR9KTtcblxuXHRcdFx0Y29uc3QgYWNjcmV0aW9uRGlzayA9IG5ldyBUSFJFRS5NZXNoKGRpc2tHZW9tZXRyeSwgZGlza01hdGVyaWFsKTtcblx0XHRcdGFjY3JldGlvbkRpc2sucm90YXRpb24ueCA9IC1NYXRoLlBJIC8gMjtcblx0XHRcdGFjY3JldGlvbkRpc2sucm90YXRpb24ueiA9IChkZWZhdWx0Q29uZmlnLmluY2xpbmF0aW9uICogTWF0aC5QSSkgLyAxODA7XG5cdFx0XHRibGFja0hvbGVHcm91cC5hZGQoYWNjcmV0aW9uRGlzayk7XG5cblx0XHRcdC8vIDQuIEVuaGFuY2VkIElubmVyIEhvdCBTcG90XG5cdFx0XHRjb25zdCBob3RTcG90R2VvbWV0cnkgPSBuZXcgVEhSRUUuUmluZ0dlb21ldHJ5KHJzICogMS40LCBycyAqIDIuMiwgNjQsIDE2KTtcblx0XHRcdGNvbnN0IGhvdFNwb3RNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XG5cdFx0XHRcdGNvbG9yOiAweGZmZmZmZixcblx0XHRcdFx0dHJhbnNwYXJlbnQ6IHRydWUsXG5cdFx0XHRcdG9wYWNpdHk6IDAuOSxcblx0XHRcdFx0YmxlbmRpbmc6IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmcsXG5cdFx0XHR9KTtcblx0XHRcdGNvbnN0IGhvdFNwb3QgPSBuZXcgVEhSRUUuTWVzaChob3RTcG90R2VvbWV0cnksIGhvdFNwb3RNYXRlcmlhbCk7XG5cdFx0XHRob3RTcG90LnJvdGF0aW9uLnggPSAtTWF0aC5QSSAvIDI7XG5cdFx0XHRibGFja0hvbGVHcm91cC5hZGQoaG90U3BvdCk7XG5cblx0XHRcdC8vIDUuIFVsdHJhLVJlYWxpc3RpYyBSZWxhdGl2aXN0aWMgSmV0c1xuXHRcdFx0YXdhaXQgY3JlYXRlUmVsYXRpdmlzdGljSmV0cyhibGFja0hvbGVHcm91cCwgZGVmYXVsdENvbmZpZywgVEhSRUUpO1xuXG5cdFx0XHQvLyA2LiBBZHZhbmNlZCBTdGFyZmllbGQgQmFja2dyb3VuZFxuXHRcdFx0YXdhaXQgY3JlYXRlQWR2YW5jZWRTdGFyZmllbGQoc2NlbmUsIFRIUkVFKTtcblxuXHRcdFx0Ly8gNy4gQWR2YW5jZWQgR3Jhdml0YXRpb25hbCBMZW5zaW5nIExheWVyXG5cdFx0XHRjb25zdCBsZW5zaW5nR2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSgyMDAsIDIwMCk7XG5cdFx0XHRjb25zdCBsZW5zaW5nU2hhZGVyID0gY3JlYXRlQWR2YW5jZWRMZW5zaW5nU2hhZGVyKGRlZmF1bHRDb25maWcpO1xuXHRcdFx0Y29uc3QgbGVuc2luZ01hdGVyaWFsID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKHtcblx0XHRcdFx0dmVydGV4U2hhZGVyOiBsZW5zaW5nU2hhZGVyLnZlcnRleFNoYWRlcixcblx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IGxlbnNpbmdTaGFkZXIuZnJhZ21lbnRTaGFkZXIsXG5cdFx0XHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRcdFx0dGltZTogeyB2YWx1ZTogMCB9LFxuXHRcdFx0XHRcdGJsYWNrSG9sZVBvc2l0aW9uOiB7IHZhbHVlOiBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAwKSB9LFxuXHRcdFx0XHRcdHNjaHdhcnpzY2hpbGRSYWRpdXM6IHsgdmFsdWU6IHJzIH0sXG5cdFx0XHRcdFx0bGVuc2luZ1N0cmVuZ3RoOiB7IHZhbHVlOiBkZWZhdWx0Q29uZmlnLmxlbnNpbmdTdHJlbmd0aCB9LFxuXHRcdFx0XHRcdG1hc3M6IHsgdmFsdWU6IGRlZmF1bHRDb25maWcubWFzcyB9LFxuXHRcdFx0XHRcdHNwaW46IHsgdmFsdWU6IGRlZmF1bHRDb25maWcuc3BpbiB9LFxuXHRcdFx0XHRcdGJhY2tncm91bmRUZXh0dXJlOiB7IHZhbHVlOiBudWxsIH0sIC8vIFdpbGwgYmUgc2V0IHRvIHNjZW5lIHRleHR1cmVcblx0XHRcdFx0XHRyZXNvbHV0aW9uOiB7IHZhbHVlOiBuZXcgVEhSRUUuVmVjdG9yMih3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KSB9LFxuXHRcdFx0XHRcdGNhbWVyYVBvc2l0aW9uOiB7IHZhbHVlOiBjYW1lcmEucG9zaXRpb24gfSxcblx0XHRcdFx0fSxcblx0XHRcdFx0dHJhbnNwYXJlbnQ6IHRydWUsXG5cdFx0XHRcdGJsZW5kaW5nOiBUSFJFRS5Ob3JtYWxCbGVuZGluZyxcblx0XHRcdFx0c2lkZTogVEhSRUUuRG91YmxlU2lkZSxcblx0XHRcdH0pO1xuXG5cdFx0XHRjb25zdCBsZW5zaW5nTGF5ZXIgPSBuZXcgVEhSRUUuTWVzaChsZW5zaW5nR2VvbWV0cnksIGxlbnNpbmdNYXRlcmlhbCk7XG5cdFx0XHRsZW5zaW5nTGF5ZXIucG9zaXRpb24ueiA9IC01MDtcblx0XHRcdGJsYWNrSG9sZUdyb3VwLmFkZChsZW5zaW5nTGF5ZXIpO1xuXG5cdFx0XHQvLyA4LiBDaW5lbWF0aWMgTGlnaHRpbmdcblx0XHRcdGF3YWl0IHNldHVwQ2luZW1hdGljTGlnaHRpbmcoc2NlbmUsIFRIUkVFLCBkZWZhdWx0Q29uZmlnKTtcblxuXHRcdFx0Ly8gQWRkIHRvIHNjZW5lXG5cdFx0XHRzY2VuZS5hZGQoYmxhY2tIb2xlR3JvdXApO1xuXHRcdFx0YmxhY2tIb2xlR3JvdXBSZWYuY3VycmVudCA9IGJsYWNrSG9sZUdyb3VwO1xuXHRcdFx0c2V0Q3VycmVudEJsYWNrSG9sZShibGFja0hvbGVHcm91cCk7XG5cblx0XHRcdGNvbnNvbGUubG9nKGDinIUgW0JMQUNLIEhPTEVdIFVsdHJhLXJlYWxpc3RpYyBibGFjayBob2xlIGdlbmVyYXRlZCBzdWNjZXNzZnVsbHlgKTtcblx0XHRcdG9uR2VuZXJhdGU/LigpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKFwi4p2MIFtCTEFDSyBIT0xFXSBHZW5lcmF0aW9uIGZhaWxlZDpcIiwgZXJyb3IpO1xuXHRcdFx0c2V0RXJyb3IoYEZhaWxlZCB0byBnZW5lcmF0ZSBibGFjayBob2xlOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogXCJVbmtub3duIGVycm9yXCJ9YCk7XG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdHNldElzR2VuZXJhdGluZyhmYWxzZSk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIEVuaGFuY2VkIGFuaW1hdGlvbiBsb29wIHdpdGggYWxsIGVmZmVjdHNcblx0Y29uc3Qgc3RhcnRCbGFja0hvbGVBbmltYXRpb24gPSAoKSA9PiB7XG5cdFx0aWYgKGFuaW1hdGlvbklkUmVmLmN1cnJlbnQpIHtcblx0XHRcdGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbklkUmVmLmN1cnJlbnQpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGFuaW1hdGUgPSAodGltZTogbnVtYmVyKSA9PiB7XG5cdFx0XHRpZiAoY3VycmVudEJsYWNrSG9sZSkge1xuXHRcdFx0XHRjb25zdCB0aW1lU2Vjb25kcyA9IHRpbWUgKiAwLjAwMTtcblxuXHRcdFx0XHQvLyBVcGRhdGUgYWxsIHNoYWRlciB1bmlmb3Jtc1xuXHRcdFx0XHRjdXJyZW50QmxhY2tIb2xlLnRyYXZlcnNlKChjaGlsZDogYW55KSA9PiB7XG5cdFx0XHRcdFx0aWYgKGNoaWxkLm1hdGVyaWFsICYmIGNoaWxkLm1hdGVyaWFsLnVuaWZvcm1zKSB7XG5cdFx0XHRcdFx0XHRpZiAoY2hpbGQubWF0ZXJpYWwudW5pZm9ybXMudGltZSkge1xuXHRcdFx0XHRcdFx0XHRjaGlsZC5tYXRlcmlhbC51bmlmb3Jtcy50aW1lLnZhbHVlID0gdGltZVNlY29uZHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoY2hpbGQubWF0ZXJpYWwudW5pZm9ybXMuY2FtZXJhUG9zaXRpb24gJiYgY2FtZXJhKSB7XG5cdFx0XHRcdFx0XHRcdGNoaWxkLm1hdGVyaWFsLnVuaWZvcm1zLmNhbWVyYVBvc2l0aW9uLnZhbHVlLmNvcHkoY2FtZXJhLnBvc2l0aW9uKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdC8vIEFuaW1hdGUgYWNjcmV0aW9uIGRpc2sgcm90YXRpb25cblx0XHRcdFx0Y29uc3QgZGlzayA9IGN1cnJlbnRCbGFja0hvbGUuY2hpbGRyZW4uZmluZCgoY2hpbGQ6IGFueSkgPT4gY2hpbGQuZ2VvbWV0cnkgJiYgY2hpbGQuZ2VvbWV0cnkudHlwZSA9PT0gXCJSaW5nR2VvbWV0cnlcIik7XG5cdFx0XHRcdGlmIChkaXNrKSB7XG5cdFx0XHRcdFx0ZGlzay5yb3RhdGlvbi56ICs9IDAuMDA1ICogZGVmYXVsdENvbmZpZy5zcGluO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQW5pbWF0ZSByZWxhdGl2aXN0aWMgamV0c1xuXHRcdFx0XHRjb25zdCBqZXRzID0gY3VycmVudEJsYWNrSG9sZS5jaGlsZHJlbi5maWx0ZXIoKGNoaWxkOiBhbnkpID0+IGNoaWxkLmdlb21ldHJ5ICYmIGNoaWxkLmdlb21ldHJ5LnR5cGUgPT09IFwiQ3lsaW5kZXJHZW9tZXRyeVwiKTtcblx0XHRcdFx0amV0cy5mb3JFYWNoKChqZXQ6IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuXHRcdFx0XHRcdGpldC5yb3RhdGlvbi55ICs9IDAuMDEgKiAoaW5kZXggJSAyID09PSAwID8gMSA6IC0xKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0Ly8gQW5pbWF0ZSBwaG90b24gc3BoZXJlXG5cdFx0XHRcdGNvbnN0IHBob3RvblNwaGVyZSA9IGN1cnJlbnRCbGFja0hvbGUuY2hpbGRyZW4uZmluZCgoY2hpbGQ6IGFueSkgPT4gY2hpbGQubWF0ZXJpYWwgJiYgY2hpbGQubWF0ZXJpYWwudW5pZm9ybXMgJiYgY2hpbGQubWF0ZXJpYWwudW5pZm9ybXMuc2Nod2FyenNjaGlsZFJhZGl1cyk7XG5cdFx0XHRcdGlmIChwaG90b25TcGhlcmUgJiYgcGhvdG9uU3BoZXJlLm1hdGVyaWFsLnVuaWZvcm1zKSB7XG5cdFx0XHRcdFx0Ly8gUHVsc2F0aW5nIG9wYWNpdHkgZm9yIHF1YW50dW0gZWZmZWN0c1xuXHRcdFx0XHRcdGNvbnN0IG9wYWNpdHkgPSAwLjMgKyBNYXRoLnNpbih0aW1lU2Vjb25kcyAqIDQpICogMC4yO1xuXHRcdFx0XHRcdHBob3RvblNwaGVyZS5tYXRlcmlhbC5vcGFjaXR5ID0gb3BhY2l0eTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRhbmltYXRpb25JZFJlZi5jdXJyZW50ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xuXHRcdH07XG5cblx0XHRhbmltYXRpb25JZFJlZi5jdXJyZW50ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xuXHR9O1xuXG5cdC8vIEVuaGFuY2VkIGNsZWFudXBcblx0Y29uc3QgY2xlYXJCbGFja0hvbGUgPSAoKSA9PiB7XG5cdFx0aWYgKGN1cnJlbnRCbGFja0hvbGUgJiYgc2NlbmUpIHtcblx0XHRcdC8vIFN0b3AgYW5pbWF0aW9uXG5cdFx0XHRpZiAoYW5pbWF0aW9uSWRSZWYuY3VycmVudCkge1xuXHRcdFx0XHRjYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25JZFJlZi5jdXJyZW50KTtcblx0XHRcdFx0YW5pbWF0aW9uSWRSZWYuY3VycmVudCA9IG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERpc3Bvc2Ugb2YgYWxsIG1hdGVyaWFscyBhbmQgZ2VvbWV0cmllc1xuXHRcdFx0Y3VycmVudEJsYWNrSG9sZS50cmF2ZXJzZSgoY2hpbGQ6IGFueSkgPT4ge1xuXHRcdFx0XHRpZiAoY2hpbGQuZ2VvbWV0cnkpIHtcblx0XHRcdFx0XHRjaGlsZC5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGNoaWxkLm1hdGVyaWFsKSB7XG5cdFx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoY2hpbGQubWF0ZXJpYWwpKSB7XG5cdFx0XHRcdFx0XHRjaGlsZC5tYXRlcmlhbC5mb3JFYWNoKChtYXRlcmlhbDogYW55KSA9PiBtYXRlcmlhbC5kaXNwb3NlKCkpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjaGlsZC5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0c2NlbmUucmVtb3ZlKGN1cnJlbnRCbGFja0hvbGUpO1xuXHRcdFx0c2V0Q3VycmVudEJsYWNrSG9sZShudWxsKTtcblx0XHRcdGJsYWNrSG9sZUdyb3VwUmVmLmN1cnJlbnQgPSBudWxsO1xuXG5cdFx0XHRjb25zb2xlLmxvZyhcIvCfp7kgW0JMQUNLIEhPTEVdIENsZWFuZWQgdXAgc3VjY2Vzc2Z1bGx5XCIpO1xuXHRcdH1cblx0XHRvbkNsZWFyPy4oKTtcblx0fTtcblxuXHQvLyBJbml0aWFsaXplIFRocmVlLmpzIHNjZW5lXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0aWYgKCFtb3VudFJlZi5jdXJyZW50KSByZXR1cm47XG5cblx0XHRjb25zdCBpbml0U2NlbmUgPSBhc3luYyAoKSA9PiB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb25zdCBUSFJFRSA9IGF3YWl0IGltcG9ydChcInRocmVlXCIpO1xuXG5cdFx0XHRcdC8vIFNjZW5lIHNldHVwXG5cdFx0XHRcdGNvbnN0IG5ld1NjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG5cdFx0XHRcdGNvbnN0IG5ld0NhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg3NSwgd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQsIDAuMSwgMTAwMDApO1xuXHRcdFx0XHRjb25zdCBuZXdSZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHtcblx0XHRcdFx0XHRhbnRpYWxpYXM6IHRydWUsXG5cdFx0XHRcdFx0YWxwaGE6IHRydWUsXG5cdFx0XHRcdFx0cG93ZXJQcmVmZXJlbmNlOiBcImhpZ2gtcGVyZm9ybWFuY2VcIixcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0bmV3UmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcblx0XHRcdFx0bmV3UmVuZGVyZXIuc2V0Q2xlYXJDb2xvcigweDAwMDAwMCwgMSk7XG5cdFx0XHRcdG5ld1JlbmRlcmVyLnRvbmVNYXBwaW5nID0gVEhSRUUuQUNFU0ZpbG1pY1RvbmVNYXBwaW5nO1xuXHRcdFx0XHRuZXdSZW5kZXJlci50b25lTWFwcGluZ0V4cG9zdXJlID0gMS4wO1xuXG5cdFx0XHRcdC8vIEVuaGFuY2VkIGNhbWVyYSBwb3NpdGlvbmluZ1xuXHRcdFx0XHRuZXdDYW1lcmEucG9zaXRpb24uc2V0KDgwLCAzMCwgODApO1xuXHRcdFx0XHRuZXdDYW1lcmEubG9va0F0KDAsIDAsIDApO1xuXG5cdFx0XHRcdC8vIENvbnRyb2xzXG5cdFx0XHRcdGNvbnN0IHsgT3JiaXRDb250cm9scyB9ID0gYXdhaXQgaW1wb3J0KFwidGhyZWUvZXhhbXBsZXMvanNtL2NvbnRyb2xzL09yYml0Q29udHJvbHNcIik7XG5cdFx0XHRcdGNvbnN0IGNvbnRyb2xzID0gbmV3IE9yYml0Q29udHJvbHMobmV3Q2FtZXJhLCBuZXdSZW5kZXJlci5kb21FbGVtZW50KTtcblx0XHRcdFx0Y29udHJvbHMuZW5hYmxlRGFtcGluZyA9IHRydWU7XG5cdFx0XHRcdGNvbnRyb2xzLmRhbXBpbmdGYWN0b3IgPSAwLjA1O1xuXHRcdFx0XHRjb250cm9scy5taW5EaXN0YW5jZSA9IDEwO1xuXHRcdFx0XHRjb250cm9scy5tYXhEaXN0YW5jZSA9IDUwMDtcblxuXHRcdFx0XHRtb3VudFJlZi5jdXJyZW50LmFwcGVuZENoaWxkKG5ld1JlbmRlcmVyLmRvbUVsZW1lbnQpO1xuXG5cdFx0XHRcdHNldFNjZW5lKG5ld1NjZW5lKTtcblx0XHRcdFx0c2V0Q2FtZXJhKG5ld0NhbWVyYSk7XG5cdFx0XHRcdHNldFJlbmRlcmVyKG5ld1JlbmRlcmVyKTtcblxuXHRcdFx0XHRzY2VuZVJlZi5jdXJyZW50ID0gbmV3U2NlbmU7XG5cdFx0XHRcdGNhbWVyYVJlZi5jdXJyZW50ID0gbmV3Q2FtZXJhO1xuXHRcdFx0XHRyZW5kZXJlclJlZi5jdXJyZW50ID0gbmV3UmVuZGVyZXI7XG5cblx0XHRcdFx0Ly8gUmVuZGVyIGxvb3Bcblx0XHRcdFx0Y29uc3QgcmVuZGVyTG9vcCA9ICgpID0+IHtcblx0XHRcdFx0XHRjb250cm9scy51cGRhdGUoKTtcblx0XHRcdFx0XHRuZXdSZW5kZXJlci5yZW5kZXIobmV3U2NlbmUsIG5ld0NhbWVyYSk7XG5cdFx0XHRcdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlckxvb3ApO1xuXHRcdFx0XHR9O1xuXHRcdFx0XHRyZW5kZXJMb29wKCk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHJlc2l6ZVxuXHRcdFx0XHRjb25zdCBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG5cdFx0XHRcdFx0bmV3Q2FtZXJhLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0O1xuXHRcdFx0XHRcdG5ld0NhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cdFx0XHRcdFx0bmV3UmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcblx0XHRcdFx0fTtcblx0XHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgaGFuZGxlUmVzaXplKTtcblxuXHRcdFx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGhhbmRsZVJlc2l6ZSk7XG5cdFx0XHRcdFx0Y29uc3QgbW91bnRFbGVtZW50ID0gbW91bnRSZWYuY3VycmVudDtcblx0XHRcdFx0XHRpZiAobW91bnRFbGVtZW50ICYmIG5ld1JlbmRlcmVyLmRvbUVsZW1lbnQpIHtcblx0XHRcdFx0XHRcdG1vdW50RWxlbWVudC5yZW1vdmVDaGlsZChuZXdSZW5kZXJlci5kb21FbGVtZW50KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3UmVuZGVyZXIuZGlzcG9zZSgpO1xuXHRcdFx0XHR9O1xuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBpbml0aWFsaXplIFRocmVlLmpzIHNjZW5lOlwiLCBlcnJvcik7XG5cdFx0XHRcdHNldEVycm9yKGBGYWlsZWQgdG8gaW5pdGlhbGl6ZSAzRCBzY2VuZTogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiVW5rbm93biBlcnJvclwifWApO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRpbml0U2NlbmUoKTtcblx0fSwgW10pO1xuXG5cdC8vIFN0YXJ0IGFuaW1hdGlvbiB3aGVuIGJsYWNrIGhvbGUgaXMgZ2VuZXJhdGVkXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0aWYgKGN1cnJlbnRCbGFja0hvbGUpIHtcblx0XHRcdHN0YXJ0QmxhY2tIb2xlQW5pbWF0aW9uKCk7XG5cdFx0fVxuXHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRpZiAoYW5pbWF0aW9uSWRSZWYuY3VycmVudCkge1xuXHRcdFx0XHRjYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25JZFJlZi5jdXJyZW50KTtcblx0XHRcdH1cblx0XHR9O1xuXHR9LCBbY3VycmVudEJsYWNrSG9sZSwgY2FtZXJhXSk7XG5cblx0Ly8gQ2xlYW51cCBvbiB1bm1vdW50XG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdGNsZWFyQmxhY2tIb2xlKCk7XG5cdFx0fTtcblx0fSwgW10pO1xuXG5cdHJldHVybiAoXG5cdFx0PGRpdiBjbGFzc05hbWU9XCJvdmVyZmxvdy1oaWRkZW4gcmVsYXRpdmUgdy1mdWxsIGgtc2NyZWVuIGJnLWJsYWNrXCI+XG5cdFx0XHQ8ZGl2IHJlZj17bW91bnRSZWZ9IGNsYXNzTmFtZT1cInctZnVsbCBoLWZ1bGxcIiAvPlxuXG5cdFx0XHR7LyogRW5oYW5jZWQgVUkgUGFuZWwgKi99XG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIHRvcC00IGxlZnQtNCBwLTQgcm91bmRlZC1sZyBib3JkZXIgYmFja2Ryb3AtYmx1ci1zbSBiZy1ibGFjay84MCBib3JkZXItYmx1ZS01MDAvMzBcIj5cblx0XHRcdFx0PGgzIGNsYXNzTmFtZT1cIm1iLTMgdGV4dC1sZyBmb250LWJvbGQgdGV4dC1ibHVlLTQwMFwiPvCflbPvuI8gVWx0cmEtUmVhbGlzdGljIEJsYWNrIEhvbGU8L2gzPlxuXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS0yIHRleHQtc21cIj5cblx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1iZXR3ZWVuXCI+XG5cdFx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWdyYXktMzAwXCI+VHlwZTo8L3NwYW4+XG5cdFx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWJsdWUtMzAwXCI+e2RlZmF1bHRDb25maWcudHlwZX08L3NwYW4+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktYmV0d2VlblwiPlxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwidGV4dC1ncmF5LTMwMFwiPk1hc3M6PC9zcGFuPlxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwidGV4dC1ibHVlLTMwMFwiPntkZWZhdWx0Q29uZmlnLm1hc3N9IE3imIk8L3NwYW4+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktYmV0d2VlblwiPlxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwidGV4dC1ncmF5LTMwMFwiPlNwaW46PC9zcGFuPlxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwidGV4dC1ibHVlLTMwMFwiPntkZWZhdWx0Q29uZmlnLnNwaW4udG9GaXhlZCgyKX08L3NwYW4+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktYmV0d2VlblwiPlxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwidGV4dC1ncmF5LTMwMFwiPlRlbXBlcmF0dXJlOjwvc3Bhbj5cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT1cInRleHQtb3JhbmdlLTMwMFwiPntkZWZhdWx0Q29uZmlnLnRlbXBlcmF0dXJlLnRvTG9jYWxlU3RyaW5nKCl9IEs8L3NwYW4+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktYmV0d2VlblwiPlxuXHRcdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwidGV4dC1ncmF5LTMwMFwiPkFjY3JldGlvbiBSYXRlOjwvc3Bhbj5cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT1cInRleHQteWVsbG93LTMwMFwiPnsoZGVmYXVsdENvbmZpZy5hY2NyZXRpb25SYXRlICogMTAwKS50b0ZpeGVkKDApfSU8L3NwYW4+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvZGl2PlxuXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZmxleCBtdC00IHNwYWNlLXgtMlwiPlxuXHRcdFx0XHRcdDxidXR0b24gb25DbGljaz17Z2VuZXJhdGVCbGFja0hvbGV9IGRpc2FibGVkPXtpc0dlbmVyYXRpbmd9IGNsYXNzTmFtZT1cInB4LTMgcHktMiB0ZXh0LXNtIGZvbnQtbWVkaXVtIHRleHQtd2hpdGUgYmctYmx1ZS02MDAgcm91bmRlZCB0cmFuc2l0aW9uLWNvbG9ycyBob3ZlcjpiZy1ibHVlLTcwMCBkaXNhYmxlZDpiZy1ncmF5LTYwMFwiPlxuXHRcdFx0XHRcdFx0e2lzR2VuZXJhdGluZyA/IFwi4pqrIEdlbmVyYXRpbmcuLi5cIiA6IFwi8J+agCBHZW5lcmF0ZVwifVxuXHRcdFx0XHRcdDwvYnV0dG9uPlxuXG5cdFx0XHRcdFx0PGJ1dHRvbiBvbkNsaWNrPXtjbGVhckJsYWNrSG9sZX0gZGlzYWJsZWQ9eyFjdXJyZW50QmxhY2tIb2xlfSBjbGFzc05hbWU9XCJweC0zIHB5LTIgdGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LXdoaXRlIGJnLXJlZC02MDAgcm91bmRlZCB0cmFuc2l0aW9uLWNvbG9ycyBob3ZlcjpiZy1yZWQtNzAwIGRpc2FibGVkOmJnLWdyYXktNjAwXCI+XG5cdFx0XHRcdFx0XHTwn6e5IENsZWFyXG5cdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdDwvZGl2PlxuXG5cdFx0XHRcdHtlcnJvciAmJiA8ZGl2IGNsYXNzTmFtZT1cInAtMiBtdC0zIHRleHQteHMgdGV4dC1yZWQtMzAwIHJvdW5kZWQgYm9yZGVyIGJvcmRlci1yZWQtNTAwIGJnLXJlZC05MDAvNTBcIj57ZXJyb3J9PC9kaXY+fVxuXHRcdFx0PC9kaXY+XG5cblx0XHRcdHsvKiBQaHlzaWNzIEluZm9ybWF0aW9uIFBhbmVsICovfVxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtNCByaWdodC00IHAtNCBtYXgtdy14cyByb3VuZGVkLWxnIGJvcmRlciBiYWNrZHJvcC1ibHVyLXNtIGJnLWJsYWNrLzgwIGJvcmRlci1wdXJwbGUtNTAwLzMwXCI+XG5cdFx0XHRcdDxoNCBjbGFzc05hbWU9XCJtYi0yIGZvbnQtYm9sZCB0ZXh0LXB1cnBsZS00MDBcIj7wn5SsIFBoeXNpY3MgRmVhdHVyZXM8L2g0PlxuXHRcdFx0XHQ8dWwgY2xhc3NOYW1lPVwic3BhY2UteS0xIHRleHQteHMgdGV4dC1ncmF5LTMwMFwiPlxuXHRcdFx0XHRcdDxsaT7inKggS2VyciBTcGFjZXRpbWUgR2VvbWV0cnk8L2xpPlxuXHRcdFx0XHRcdDxsaT7wn4yMIEdyYXZpdGF0aW9uYWwgTGVuc2luZzwvbGk+XG5cdFx0XHRcdFx0PGxpPvCfkqsgUmVsYXRpdmlzdGljIEpldHM8L2xpPlxuXHRcdFx0XHRcdDxsaT7wn5SlIFN5bmNocm90cm9uIFJhZGlhdGlvbjwvbGk+XG5cdFx0XHRcdFx0PGxpPuKaoSBNYWduZXRvaHlkcm9keW5hbWljczwvbGk+XG5cdFx0XHRcdFx0PGxpPvCfjIAgRnJhbWUgRHJhZ2dpbmc8L2xpPlxuXHRcdFx0XHRcdDxsaT7wn5KOIFBob3RvbiBTcGhlcmU8L2xpPlxuXHRcdFx0XHRcdDxsaT7wn46vIEVpbnN0ZWluIFJpbmdzPC9saT5cblx0XHRcdFx0XHQ8bGk+8J+Moe+4jyBCbGFja2JvZHkgUmFkaWF0aW9uPC9saT5cblx0XHRcdFx0XHQ8bGk+4pqb77iPIFBsYXNtYSBQaHlzaWNzPC9saT5cblx0XHRcdFx0PC91bD5cblx0XHRcdDwvZGl2PlxuXG5cdFx0XHR7aXNHZW5lcmF0aW5nICYmIChcblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJmbGV4IGFic29sdXRlIGluc2V0LTAganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIGJnLWJsYWNrLzUwXCI+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJ0ZXh0LXhsIHRleHQtd2hpdGVcIj7imqsgR2VuZXJhdGluZyBVbHRyYS1SZWFsaXN0aWMgQmxhY2sgSG9sZS4uLjwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdCl9XG5cdFx0PC9kaXY+XG5cdCk7XG59XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VSZWYiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsIkJsYWNrSG9sZVJlbmRlcmVyIiwib25HZW5lcmF0ZSIsIm9uQ2xlYXIiLCJjb25maWciLCJtb3VudFJlZiIsInNjZW5lUmVmIiwicmVuZGVyZXJSZWYiLCJjYW1lcmFSZWYiLCJibGFja0hvbGVHcm91cFJlZiIsImFuaW1hdGlvbklkUmVmIiwic2NlbmUiLCJzZXRTY2VuZSIsImNhbWVyYSIsInNldENhbWVyYSIsInJlbmRlcmVyIiwic2V0UmVuZGVyZXIiLCJjdXJyZW50QmxhY2tIb2xlIiwic2V0Q3VycmVudEJsYWNrSG9sZSIsImlzR2VuZXJhdGluZyIsInNldElzR2VuZXJhdGluZyIsImVycm9yIiwic2V0RXJyb3IiLCJkZWZhdWx0Q29uZmlnIiwibWFzcyIsInNwaW4iLCJpbmNsaW5hdGlvbiIsImRpc2tJbm5lclJhZGl1cyIsImRpc2tPdXRlclJhZGl1cyIsInRlbXBlcmF0dXJlIiwiYWNjcmV0aW9uUmF0ZSIsIm1hZ25ldGljRmllbGQiLCJjb3JvbmFUZW1wZXJhdHVyZSIsImpldFBvd2VyIiwidmlld2luZ0Rpc3RhbmNlIiwidHlwZSIsImxlbnNpbmdTdHJlbmd0aCIsInZvbHVtZXRyaWNEZW5zaXR5IiwicGxhc21hRGVuc2l0eSIsInN5bmNocm90cm9uRW1pc3Npb24iLCJyZWxhdGl2aXN0aWNCZWFtaW5nIiwiY2FsY3VsYXRlU2Nod2FyenNjaGlsZFJhZGl1cyIsImJsYWNrQm9keUNvbG9yIiwidCIsIk1hdGgiLCJtYXgiLCJyIiwiZyIsImIiLCJwb3ciLCJib29zdCIsIm1pbiIsImNyZWF0ZUFkdmFuY2VkTGVuc2luZ1NoYWRlciIsInZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwiY3JlYXRlVm9sdW1ldHJpY0Rpc2tTaGFkZXIiLCJycyIsImNyZWF0ZVBob3RvblNwaGVyZVNoYWRlciIsImNyZWF0ZVJlbGF0aXZpc3RpY0pldHMiLCJibGFja0hvbGVHcm91cCIsIlRIUkVFIiwiamV0SGVpZ2h0IiwiamV0UmFkaXVzIiwiamV0U2hhZGVyIiwiamV0R2VvbWV0cnkiLCJDeWxpbmRlckdlb21ldHJ5IiwiamV0TWF0ZXJpYWwiLCJTaGFkZXJNYXRlcmlhbCIsInVuaWZvcm1zIiwidGltZSIsInZhbHVlIiwiamV0Q29sb3IiLCJWZWN0b3IzIiwidHJhbnNwYXJlbnQiLCJibGVuZGluZyIsIkFkZGl0aXZlQmxlbmRpbmciLCJkZXB0aFdyaXRlIiwidG9wSmV0IiwiTWVzaCIsImNsb25lIiwicG9zaXRpb24iLCJ5IiwiYWRkIiwiYm90dG9tSmV0Iiwicm90YXRpb24iLCJ6IiwiUEkiLCJjcmVhdGVBZHZhbmNlZFN0YXJmaWVsZCIsInN0YXJDb3VudCIsInN0YXJHZW9tZXRyeSIsIkJ1ZmZlckdlb21ldHJ5Iiwic3RhclBvc2l0aW9ucyIsIkZsb2F0MzJBcnJheSIsInN0YXJDb2xvcnMiLCJzdGFyU2l6ZXMiLCJpIiwicGhpIiwicmFuZG9tIiwiY29zVGhldGEiLCJ0aGV0YSIsImFjb3MiLCJzaW4iLCJjb3MiLCJ0ZW1wIiwic2V0QXR0cmlidXRlIiwiQnVmZmVyQXR0cmlidXRlIiwic3Rhck1hdGVyaWFsIiwidmVydGV4Q29sb3JzIiwic3RhcnMiLCJQb2ludHMiLCJzZXR1cENpbmVtYXRpY0xpZ2h0aW5nIiwiYW1iaWVudExpZ2h0IiwiQW1iaWVudExpZ2h0IiwiZGlza0xpZ2h0IiwiUG9pbnRMaWdodCIsInNldCIsImhvdFNwb3RMaWdodCIsImpldExpZ2h0MSIsImpldExpZ2h0MiIsInJpbUxpZ2h0IiwiRGlyZWN0aW9uYWxMaWdodCIsImdlbmVyYXRlQmxhY2tIb2xlIiwiY2xlYXJCbGFja0hvbGUiLCJHcm91cCIsImNvbnNvbGUiLCJsb2ciLCJ0b0ZpeGVkIiwiZXZlbnRIb3Jpem9uR2VvbWV0cnkiLCJTcGhlcmVHZW9tZXRyeSIsImV2ZW50SG9yaXpvbk1hdGVyaWFsIiwiTWVzaEJhc2ljTWF0ZXJpYWwiLCJjb2xvciIsImV2ZW50SG9yaXpvbiIsInBob3RvblNwaGVyZUdlb21ldHJ5IiwicGhvdG9uU3BoZXJlU2hhZGVyIiwicGhvdG9uU3BoZXJlTWF0ZXJpYWwiLCJzY2h3YXJ6c2NoaWxkUmFkaXVzIiwiYmFzZUNvbG9yIiwic2lkZSIsIkRvdWJsZVNpZGUiLCJwaG90b25TcGhlcmUiLCJkaXNrR2VvbWV0cnkiLCJSaW5nR2VvbWV0cnkiLCJkaXNrU2hhZGVyIiwiZGlza01hdGVyaWFsIiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsImNvcm9uYVRlbXAiLCJjYW1lcmFQb3NpdGlvbiIsImFjY3JldGlvbkRpc2siLCJ4IiwiaG90U3BvdEdlb21ldHJ5IiwiaG90U3BvdE1hdGVyaWFsIiwib3BhY2l0eSIsImhvdFNwb3QiLCJsZW5zaW5nR2VvbWV0cnkiLCJQbGFuZUdlb21ldHJ5IiwibGVuc2luZ1NoYWRlciIsImxlbnNpbmdNYXRlcmlhbCIsImJsYWNrSG9sZVBvc2l0aW9uIiwiYmFja2dyb3VuZFRleHR1cmUiLCJyZXNvbHV0aW9uIiwiVmVjdG9yMiIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIk5vcm1hbEJsZW5kaW5nIiwibGVuc2luZ0xheWVyIiwiY3VycmVudCIsIkVycm9yIiwibWVzc2FnZSIsInN0YXJ0QmxhY2tIb2xlQW5pbWF0aW9uIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJhbmltYXRlIiwidGltZVNlY29uZHMiLCJ0cmF2ZXJzZSIsImNoaWxkIiwibWF0ZXJpYWwiLCJjb3B5IiwiZGlzayIsImNoaWxkcmVuIiwiZmluZCIsImdlb21ldHJ5IiwiamV0cyIsImZpbHRlciIsImZvckVhY2giLCJqZXQiLCJpbmRleCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRpc3Bvc2UiLCJBcnJheSIsImlzQXJyYXkiLCJyZW1vdmUiLCJpbml0U2NlbmUiLCJuZXdTY2VuZSIsIlNjZW5lIiwibmV3Q2FtZXJhIiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJuZXdSZW5kZXJlciIsIldlYkdMUmVuZGVyZXIiLCJhbnRpYWxpYXMiLCJhbHBoYSIsInBvd2VyUHJlZmVyZW5jZSIsInNldFNpemUiLCJzZXRDbGVhckNvbG9yIiwidG9uZU1hcHBpbmciLCJBQ0VTRmlsbWljVG9uZU1hcHBpbmciLCJ0b25lTWFwcGluZ0V4cG9zdXJlIiwibG9va0F0IiwiT3JiaXRDb250cm9scyIsImNvbnRyb2xzIiwiZG9tRWxlbWVudCIsImVuYWJsZURhbXBpbmciLCJkYW1waW5nRmFjdG9yIiwibWluRGlzdGFuY2UiLCJtYXhEaXN0YW5jZSIsImFwcGVuZENoaWxkIiwicmVuZGVyTG9vcCIsInVwZGF0ZSIsInJlbmRlciIsImhhbmRsZVJlc2l6ZSIsImFzcGVjdCIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm1vdW50RWxlbWVudCIsInJlbW92ZUNoaWxkIiwiZGl2IiwiY2xhc3NOYW1lIiwicmVmIiwiaDMiLCJzcGFuIiwidG9Mb2NhbGVTdHJpbmciLCJidXR0b24iLCJvbkNsaWNrIiwiZGlzYWJsZWQiLCJoNCIsInVsIiwibGkiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/BlackHoleRenderer.tsx\n"));

/***/ })

}]);