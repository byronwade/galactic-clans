"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_shared_procgen_planet_planet-renderer_ts"],{

/***/ "(app-pages-browser)/./src/shared/procgen/planet/planet-renderer.ts":
/*!******************************************************!*\
  !*** ./src/shared/procgen/planet/planet-renderer.ts ***!
  \******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PlanetRenderer: () => (/* binding */ PlanetRenderer)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _planet_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./planet-types */ \"(app-pages-browser)/./src/shared/procgen/planet/planet-types.ts\");\n/**\n * @file planet-renderer.ts\n * @description Unified planet renderer with comprehensive planet type support and surface details\n * @version 6.0.0\n * @author Galactic Clans Development Team\n *\n * @purpose Renders scientifically accurate planets using the comprehensive planet type\n * system with enhanced visual features, surface details, trees, and zoom capabilities.\n */ \n\n// Biome-specific tree types\nconst TREE_SPECIES_BY_BIOME = new Map([\n    [\n        _planet_types__WEBPACK_IMPORTED_MODULE_0__.BiomeType.TEMPERATE_FOREST,\n        [\n            {\n                species: \"Oak\",\n                height: 15,\n                trunkRadius: 0.8,\n                crownRadius: 8,\n                branchCount: 12,\n                leafDensity: 0.8,\n                seasonalColor: new three__WEBPACK_IMPORTED_MODULE_1__.Color(0x228b22),\n                biomeSuitability: 1.0\n            },\n            {\n                species: \"Pine\",\n                height: 25,\n                trunkRadius: 0.6,\n                crownRadius: 4,\n                branchCount: 8,\n                leafDensity: 0.9,\n                seasonalColor: new three__WEBPACK_IMPORTED_MODULE_1__.Color(0x006400),\n                biomeSuitability: 0.9\n            },\n            {\n                species: \"Birch\",\n                height: 12,\n                trunkRadius: 0.4,\n                crownRadius: 6,\n                branchCount: 10,\n                leafDensity: 0.7,\n                seasonalColor: new three__WEBPACK_IMPORTED_MODULE_1__.Color(0x90ee90),\n                biomeSuitability: 0.8\n            }\n        ]\n    ],\n    [\n        _planet_types__WEBPACK_IMPORTED_MODULE_0__.BiomeType.TROPICAL_JUNGLE,\n        [\n            {\n                species: \"Mahogany\",\n                height: 35,\n                trunkRadius: 1.2,\n                crownRadius: 12,\n                branchCount: 15,\n                leafDensity: 0.95,\n                seasonalColor: new three__WEBPACK_IMPORTED_MODULE_1__.Color(0x006400),\n                biomeSuitability: 1.0\n            },\n            {\n                species: \"Kapok\",\n                height: 40,\n                trunkRadius: 1.5,\n                crownRadius: 15,\n                branchCount: 20,\n                leafDensity: 0.9,\n                seasonalColor: new three__WEBPACK_IMPORTED_MODULE_1__.Color(0x228b22),\n                biomeSuitability: 0.95\n            },\n            {\n                species: \"Palm\",\n                height: 20,\n                trunkRadius: 0.5,\n                crownRadius: 8,\n                branchCount: 6,\n                leafDensity: 0.8,\n                seasonalColor: new three__WEBPACK_IMPORTED_MODULE_1__.Color(0x32cd32),\n                biomeSuitability: 0.9\n            }\n        ]\n    ]\n]);\n// Default configuration\nconst DEFAULT_CONFIG = {\n    radius: 3.0,\n    seed: Date.now(),\n    starDistance: 1.0,\n    starType: \"G\",\n    detailLevel: 2,\n    featureDensity: 0.7,\n    colorVariation: 0.8,\n    enableLOD: true,\n    maxFeatures: 50,\n    renderDistance: 100,\n    enableAtmosphere: true,\n    enableRings: true,\n    enableMoons: true,\n    enableSpecialEffects: true,\n    enableSurfaceDetails: true,\n    enableVegetation: true,\n    treeCount: 500,\n    terrainDetail: 0.8,\n    surfaceZoomLevel: 1.0,\n    enableAdvancedLighting: true,\n    ambientIntensity: 0.4,\n    sunIntensity: 1.5\n};\nclass PlanetRenderer {\n    /**\n\t * Render a planet with the specified configuration\n\t */ async renderPlanetByType(planetClass) {\n        let config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const startTime = performance.now();\n        const finalConfig = {\n            ...DEFAULT_CONFIG,\n            ...config\n        };\n        // Get planet type definition\n        const planetType = (0,_planet_types__WEBPACK_IMPORTED_MODULE_0__.getPlanetTypeByClass)(planetClass);\n        if (!planetType) {\n            throw new Error(\"Unknown planet class: \".concat(planetClass));\n        }\n        // Check cache first\n        const cacheKey = this.generateCacheKey(finalConfig);\n        if (this.renderCache.has(cacheKey)) {\n            const cachedMesh = this.renderCache.get(cacheKey);\n            return this.createCachedResult(cachedMesh, finalConfig, startTime);\n        }\n        try {\n            // Generate planet mesh\n            const mesh = await this.generatePlanetMesh(planetType, finalConfig);\n            // Apply effects based on configuration\n            if (finalConfig.enableAtmosphere) {\n                this.addAtmosphere(mesh, planetType);\n            }\n            if (finalConfig.enableRings && planetType.features.rings) {\n                this.addRings(mesh, planetType);\n            }\n            if (finalConfig.enableMoons && planetType.features.moons > 0) {\n                this.addMoons(mesh, planetType);\n            }\n            if (finalConfig.enableSpecialEffects) {\n                this.addSpecialEffects(mesh, planetType);\n            }\n            if (finalConfig.enableAdvancedLighting) {\n                this.setupAdvancedLighting(mesh, finalConfig);\n            }\n            // Generate surface vegetation for habitable planets\n            if (finalConfig.enableSurfaceDetails) {\n                this.generateVegetation(mesh, planetType, finalConfig);\n            }\n            // Cache the result\n            this.renderCache.set(cacheKey, mesh);\n            // Calculate metadata\n            const metadata = this.calculateRenderMetadata(mesh, startTime);\n            return {\n                mesh,\n                config: finalConfig,\n                planetType,\n                statistics: {\n                    vertexCount: this.calculatePolyCount(mesh),\n                    featureCount: this.countFeatures(mesh)\n                },\n                metadata\n            };\n        } catch (error) {\n            console.error(\"Planet rendering failed:\", error);\n            return this.renderFallbackPlanet(finalConfig, startTime);\n        }\n    }\n    /**\n\t * Generate a simple planet mesh based on planet type\n\t */ async generatePlanetMesh(planetType, config) {\n        const group = new three__WEBPACK_IMPORTED_MODULE_1__.Group();\n        // Create basic sphere geometry\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(config.radius || 3.0, 32, 32);\n        // Create material based on planet type\n        const material = this.createPlanetMaterial(planetType, config);\n        // Create mesh\n        const mesh = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(geometry, material);\n        group.add(mesh);\n        // Add basic rotation\n        mesh.rotation.x = Math.PI * 0.1; // Slight tilt\n        return group;\n    }\n    /**\n\t * Create planet material based on type\n\t */ createPlanetMaterial(planetType, config) {\n        // Use primary colors from planet type\n        const primaryColor = planetType.primaryColors[0] || new three__WEBPACK_IMPORTED_MODULE_1__.Color(0x4a7c59);\n        // Create basic material\n        const material = new three__WEBPACK_IMPORTED_MODULE_1__.MeshLambertMaterial({\n            color: primaryColor,\n            emissive: new three__WEBPACK_IMPORTED_MODULE_1__.Color(0x111111),\n            emissiveIntensity: 0.1\n        });\n        return material;\n    }\n    /**\n\t * Get radius from mesh geometry\n\t */ getMeshRadius(mesh) {\n        const firstMesh = mesh.children[0];\n        if (firstMesh && firstMesh.geometry instanceof three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry) {\n            return firstMesh.geometry.parameters.radius;\n        }\n        return 3.0; // Default radius\n    }\n    /**\n\t * Add atmosphere effect\n\t */ addAtmosphere(mesh, planetType) {\n        if (!planetType.features.clouds) return;\n        const radius = this.getMeshRadius(mesh);\n        const atmosphereGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(radius * 1.1, 32, 32);\n        const atmosphereMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0x87ceeb,\n            transparent: true,\n            opacity: 0.3,\n            side: three__WEBPACK_IMPORTED_MODULE_1__.BackSide\n        });\n        const atmosphere = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(atmosphereGeometry, atmosphereMaterial);\n        mesh.add(atmosphere);\n    }\n    /**\n\t * Add ring system\n\t */ addRings(mesh, planetType) {\n        const radius = this.getMeshRadius(mesh);\n        const ringGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.RingGeometry(radius * 1.5, radius * 2.5, 64);\n        const ringMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0xcccccc,\n            transparent: true,\n            opacity: 0.6,\n            side: three__WEBPACK_IMPORTED_MODULE_1__.DoubleSide\n        });\n        const rings = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(ringGeometry, ringMaterial);\n        rings.rotation.x = Math.PI * 0.5; // Rotate to be horizontal\n        mesh.add(rings);\n    }\n    /**\n\t * Add moons\n\t */ addMoons(mesh, planetType) {\n        const moonCount = Math.min(planetType.features.moons, 3); // Limit to 3 for performance\n        for(let i = 0; i < moonCount; i++){\n            const moonGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(0.3, 16, 16);\n            const moonMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshLambertMaterial({\n                color: 0x888888\n            });\n            const moon = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(moonGeometry, moonMaterial);\n            // Position moons in orbit\n            const angle = i / moonCount * Math.PI * 2;\n            const distance = 4 + i * 0.5;\n            moon.position.set(Math.cos(angle) * distance, Math.sin(angle) * distance * 0.3, Math.sin(angle) * distance * 0.7);\n            mesh.add(moon);\n        }\n    }\n    /**\n\t * Add special effects based on planet type\n\t */ addSpecialEffects(mesh, planetType) {\n        // Add lava particles for lava worlds\n        if (planetType.class === _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.LAVA_WORLD) {\n            this.addLavaParticles(mesh);\n        }\n        // Add ice shimmers for ice giants\n        if (planetType.class === _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.ICE_GIANT) {\n            this.addIceShimmers(mesh);\n        }\n        // Add aurora for planets with magnetosphere\n        if (planetType.features.aurorae) {\n            this.addAuroraEffect(mesh);\n        }\n    }\n    /**\n\t * Add lava particle effect\n\t */ addLavaParticles(mesh) {\n        const particleCount = 50;\n        const particles = new three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry();\n        const positions = new Float32Array(particleCount * 3);\n        for(let i = 0; i < particleCount * 3; i += 3){\n            positions[i] = (Math.random() - 0.5) * 6;\n            positions[i + 1] = (Math.random() - 0.5) * 6;\n            positions[i + 2] = (Math.random() - 0.5) * 6;\n        }\n        particles.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_1__.BufferAttribute(positions, 3));\n        const particleMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.PointsMaterial({\n            color: 0xff4500,\n            size: 0.1,\n            transparent: true,\n            opacity: 0.8\n        });\n        const particleSystem = new three__WEBPACK_IMPORTED_MODULE_1__.Points(particles, particleMaterial);\n        mesh.add(particleSystem);\n    }\n    /**\n\t * Add ice shimmer effect\n\t */ addIceShimmers(mesh) {\n        const radius = this.getMeshRadius(mesh);\n        const shimmerGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(radius * 1.05, 32, 32);\n        const shimmerMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0x87ceeb,\n            transparent: true,\n            opacity: 0.2,\n            side: three__WEBPACK_IMPORTED_MODULE_1__.BackSide\n        });\n        const shimmer = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(shimmerGeometry, shimmerMaterial);\n        mesh.add(shimmer);\n    }\n    /**\n\t * Add aurora effect\n\t */ addAuroraEffect(mesh) {\n        const radius = this.getMeshRadius(mesh);\n        const auroraGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(radius * 1.2, 32, 32);\n        const auroraMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0x00ff00,\n            transparent: true,\n            opacity: 0.1,\n            side: three__WEBPACK_IMPORTED_MODULE_1__.BackSide\n        });\n        const aurora = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(auroraGeometry, auroraMaterial);\n        mesh.add(aurora);\n    }\n    /**\n\t * Generate surface vegetation for habitable planets\n\t */ generateVegetation(mesh, planetType, config) {\n        // Only generate vegetation for habitable planets with forests\n        if (!planetType.features.forests || !config.enableVegetation) {\n            return;\n        }\n        // Check if planet is habitable enough for trees (habitability > 70)\n        if (planetType.baseHabitability.overallScore < 70) {\n            return;\n        }\n        console.log(\"\\uD83C\\uDF32 [PLANET] Generating vegetation for \".concat(planetType.name));\n        const vegetationGroup = new three__WEBPACK_IMPORTED_MODULE_1__.Group();\n        vegetationGroup.name = \"vegetation\";\n        // Determine primary biome for tree selection\n        const primaryBiome = this.getPrimaryBiome(planetType);\n        const treeSpecies = TREE_SPECIES_BY_BIOME.get(primaryBiome) || TREE_SPECIES_BY_BIOME.get(_planet_types__WEBPACK_IMPORTED_MODULE_0__.BiomeType.TEMPERATE_FOREST);\n        if (!treeSpecies) return;\n        const treeCount = Math.min(config.treeCount || 500, 1000); // Cap at 1000 for performance\n        const radius = config.radius || 3.0;\n        // Generate trees using Poisson disk sampling for realistic distribution\n        const treePositions = this.generateTreePositions(treeCount, radius);\n        for(let i = 0; i < treePositions.length; i++){\n            const position = treePositions[i];\n            if (!position) continue; // Skip if no position available\n            // Select random tree species\n            const speciesIndex = Math.floor(Math.random() * treeSpecies.length);\n            const species = treeSpecies[speciesIndex];\n            if (!species) continue; // Skip if no species available\n            // Generate individual tree\n            const tree = this.generateTree(species, position, radius);\n            if (tree) {\n                vegetationGroup.add(tree);\n            }\n            // Performance check - don't generate too many trees per frame\n            if (i % 50 === 0) {\n            // Could yield control here in a real implementation\n            }\n        }\n        mesh.add(vegetationGroup);\n        console.log(\"\\uD83C\\uDF32 [PLANET] Generated \".concat(vegetationGroup.children.length, \" trees\"));\n    }\n    /**\n\t * Generate realistic tree positions using Poisson disk sampling\n\t */ generateTreePositions(count, planetRadius) {\n        const positions = [];\n        const minDistance = 0.1; // Minimum distance between trees\n        const maxAttempts = 30;\n        for(let i = 0; i < count; i++){\n            let attempts = 0;\n            let validPosition = false;\n            while(!validPosition && attempts < maxAttempts){\n                // Generate random point on sphere surface\n                const theta = Math.random() * Math.PI * 2;\n                const phi = Math.acos(2 * Math.random() - 1);\n                const x = planetRadius * Math.sin(phi) * Math.cos(theta);\n                const y = planetRadius * Math.sin(phi) * Math.sin(theta);\n                const z = planetRadius * Math.cos(phi);\n                const position = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(x, y, z);\n                // Check minimum distance to existing trees\n                validPosition = true;\n                for (const existingPos of positions){\n                    if (position.distanceTo(existingPos) < minDistance) {\n                        validPosition = false;\n                        break;\n                    }\n                }\n                if (validPosition) {\n                    positions.push(position);\n                }\n                attempts++;\n            }\n        }\n        return positions;\n    }\n    /**\n\t * Generate a single realistic tree\n\t */ generateTree(species, position, planetRadius) {\n        const treeGroup = new three__WEBPACK_IMPORTED_MODULE_1__.Group();\n        // Scale tree based on planet size and random variation\n        const scale = planetRadius / 3.0 * (0.8 + Math.random() * 0.4);\n        const height = species.height * scale * 0.01; // Scale down for planet surface\n        const trunkRadius = species.trunkRadius * scale * 0.01;\n        const crownRadius = species.crownRadius * scale * 0.01;\n        // Generate trunk\n        const trunk = this.generateTrunk(height, trunkRadius);\n        if (trunk) {\n            treeGroup.add(trunk);\n        }\n        // Generate crown/foliage\n        const crown = this.generateCrown(species, height, crownRadius);\n        if (crown) {\n            crown.position.y = height * 0.7; // Position crown above trunk\n            treeGroup.add(crown);\n        }\n        // Position tree on planet surface\n        const surfaceNormal = position.clone().normalize();\n        treeGroup.position.copy(position);\n        treeGroup.lookAt(position.clone().add(surfaceNormal));\n        // Add slight random rotation\n        treeGroup.rotateY(Math.random() * Math.PI * 2);\n        return treeGroup;\n    }\n    /**\n\t * Generate tree trunk\n\t */ generateTrunk(height, radius) {\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_1__.CylinderGeometry(radius * 0.8, radius, height, 8);\n        const material = new three__WEBPACK_IMPORTED_MODULE_1__.MeshLambertMaterial({\n            color: new three__WEBPACK_IMPORTED_MODULE_1__.Color(0x4a4a4a).lerp(new three__WEBPACK_IMPORTED_MODULE_1__.Color(0x8b4513), 0.7)\n        });\n        const trunk = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(geometry, material);\n        trunk.position.y = height / 2;\n        trunk.castShadow = true;\n        trunk.receiveShadow = true;\n        return trunk;\n    }\n    /**\n\t * Generate tree crown/foliage\n\t */ generateCrown(species, trunkHeight, radius) {\n        const crownGroup = new three__WEBPACK_IMPORTED_MODULE_1__.Group();\n        // Create multiple foliage spheres for realistic appearance\n        const foliageCount = 3 + Math.floor(Math.random() * 3);\n        for(let i = 0; i < foliageCount; i++){\n            const foliageRadius = radius * (0.6 + Math.random() * 0.4);\n            const geometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(foliageRadius, 8, 6);\n            // Create realistic leaf material\n            const leafColor = species.seasonalColor.clone();\n            leafColor.lerp(new three__WEBPACK_IMPORTED_MODULE_1__.Color(0x2f4f2f), Math.random() * 0.3); // Add variation\n            const material = new three__WEBPACK_IMPORTED_MODULE_1__.MeshLambertMaterial({\n                color: leafColor,\n                transparent: true,\n                opacity: 0.8 + Math.random() * 0.2\n            });\n            const foliage = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(geometry, material);\n            // Position foliage spheres randomly within crown area\n            foliage.position.set((Math.random() - 0.5) * radius * 0.5, (Math.random() - 0.5) * trunkHeight * 0.3, (Math.random() - 0.5) * radius * 0.5);\n            foliage.castShadow = true;\n            foliage.receiveShadow = true;\n            crownGroup.add(foliage);\n        }\n        return crownGroup;\n    }\n    /**\n\t * Determine primary biome for a planet type\n\t */ getPrimaryBiome(planetType) {\n        if (planetType.possibleBiomes && planetType.possibleBiomes.length > 0) {\n            // Return the first biome that has tree species defined\n            for (const biome of planetType.possibleBiomes){\n                if (TREE_SPECIES_BY_BIOME.has(biome)) {\n                    return biome;\n                }\n            }\n        }\n        // Default to temperate forest for habitable planets\n        return _planet_types__WEBPACK_IMPORTED_MODULE_0__.BiomeType.TEMPERATE_FOREST;\n    }\n    /**\n\t * Setup advanced lighting\n\t */ setupAdvancedLighting(mesh, config) {\n        // Add ambient light\n        const ambientLight = new three__WEBPACK_IMPORTED_MODULE_1__.AmbientLight(0x404040, config.ambientIntensity || 0.4);\n        mesh.add(ambientLight);\n        // Add directional light (sun)\n        const sunLight = new three__WEBPACK_IMPORTED_MODULE_1__.DirectionalLight(0xffffff, config.sunIntensity || 1.5);\n        sunLight.position.set(10, 10, 5);\n        mesh.add(sunLight);\n    }\n    /**\n\t * Get available planet types\n\t */ getAvailablePlanetTypes() {\n        return Array.from(_planet_types__WEBPACK_IMPORTED_MODULE_0__.PLANET_TYPES.keys());\n    }\n    /**\n\t * Get planet type information\n\t */ getPlanetTypeInfo(planetClass) {\n        return (0,_planet_types__WEBPACK_IMPORTED_MODULE_0__.getPlanetTypeByClass)(planetClass);\n    }\n    /**\n\t * Update quality settings\n\t */ updateQuality(qualityLevel) {\n        // Adjust detail level based on quality\n        const detailLevel = Math.max(1, Math.min(5, qualityLevel));\n        // Clear cache to force regeneration with new quality\n        this.clearCache();\n        console.log(\"\\uD83C\\uDF0D [PLANET] Quality updated to level \".concat(detailLevel));\n    }\n    /**\n\t * Dispose of resources\n\t */ dispose() {\n        if (this.isDisposed) return;\n        // Clear cache\n        this.clearCache();\n        this.isDisposed = true;\n        console.log(\"🌍 [PLANET] Renderer disposed\");\n    }\n    /**\n\t * Generate cache key for configuration\n\t */ generateCacheKey(config) {\n        return \"\".concat(config.planetClass, \"-\").concat(config.radius, \"-\").concat(config.seed, \"-\").concat(config.detailLevel);\n    }\n    /**\n\t * Create cached result\n\t */ createCachedResult(mesh, config, startTime) {\n        const planetType = (0,_planet_types__WEBPACK_IMPORTED_MODULE_0__.getPlanetTypeByClass)(config.planetClass || _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.TERRESTRIAL);\n        const metadata = this.calculateRenderMetadata(mesh, startTime);\n        return {\n            mesh: mesh.clone(),\n            config,\n            planetType,\n            statistics: {\n                vertexCount: this.calculatePolyCount(mesh),\n                featureCount: this.countFeatures(mesh)\n            },\n            metadata\n        };\n    }\n    /**\n\t * Calculate render metadata\n\t */ calculateRenderMetadata(mesh, startTime) {\n        const renderTime = performance.now() - startTime;\n        const polyCount = this.calculatePolyCount(mesh);\n        const featureCount = this.countFeatures(mesh);\n        return {\n            renderTime,\n            polyCount,\n            textureCount: 1,\n            featureCount,\n            memoryUsage: polyCount * 32,\n            qualityLevel: this.determineQualityLevel(polyCount, 1)\n        };\n    }\n    /**\n\t * Calculate polygon count\n\t */ calculatePolyCount(mesh) {\n        let count = 0;\n        mesh.traverse((child)=>{\n            if (child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh && child.geometry) {\n                const geometry = child.geometry;\n                if (geometry.attributes.position) {\n                    count += geometry.attributes.position.count / 3;\n                }\n            }\n        });\n        return count;\n    }\n    /**\n\t * Count features in mesh\n\t */ countFeatures(mesh) {\n        let count = 0;\n        mesh.traverse((child)=>{\n            if (child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh) {\n                count++;\n            }\n        });\n        return count;\n    }\n    /**\n\t * Determine quality level\n\t */ determineQualityLevel(polyCount, textureCount) {\n        if (polyCount > 10000) return \"Ultra\";\n        if (polyCount > 5000) return \"High\";\n        if (polyCount > 2000) return \"Medium\";\n        return \"Low\";\n    }\n    /**\n\t * Render fallback planet\n\t */ renderFallbackPlanet(config, startTime) {\n        console.warn(\"🌍 [PLANET] Using fallback planet renderer\");\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(config.radius || 3.0, 16, 16);\n        const material = new three__WEBPACK_IMPORTED_MODULE_1__.MeshBasicMaterial({\n            color: 0x808080\n        });\n        const mesh = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(geometry, material);\n        const group = new three__WEBPACK_IMPORTED_MODULE_1__.Group();\n        group.add(mesh);\n        const planetType = (0,_planet_types__WEBPACK_IMPORTED_MODULE_0__.getPlanetTypeByClass)(_planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.TERRESTRIAL);\n        const metadata = this.calculateRenderMetadata(group, startTime);\n        return {\n            mesh: group,\n            config,\n            planetType,\n            statistics: {\n                vertexCount: 256,\n                featureCount: 1\n            },\n            metadata\n        };\n    }\n    /**\n\t * Get performance statistics\n\t */ getPerformanceStats() {\n        return {\n            lastRenderTime: this.lastRenderTime,\n            cacheSize: this.renderCache.size\n        };\n    }\n    /**\n\t * Clear render cache\n\t */ clearCache() {\n        this.renderCache.forEach((mesh)=>{\n            this.disposeMesh(mesh);\n        });\n        this.renderCache.clear();\n        console.log(\"🌍 [PLANET] Cache cleared\");\n    }\n    /**\n\t * Dispose of mesh resources\n\t */ disposeMesh(object) {\n        object.traverse((child)=>{\n            if (child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh) {\n                if (child.geometry) {\n                    child.geometry.dispose();\n                }\n                if (child.material) {\n                    if (Array.isArray(child.material)) {\n                        child.material.forEach((material)=>material.dispose());\n                    } else {\n                        child.material.dispose();\n                    }\n                }\n            }\n        });\n    }\n    /**\n\t * Preload common planet types\n\t */ async preloadCommonTypes() {\n        const commonTypes = [\n            _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.TERRESTRIAL,\n            _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.GAS_GIANT,\n            _planet_types__WEBPACK_IMPORTED_MODULE_0__.PlanetClass.ICE_GIANT\n        ];\n        console.log(\"🌍 [PLANET] Preloading common planet types...\");\n        for (const planetClass of commonTypes){\n            try {\n                await this.renderPlanetByType(planetClass, {\n                    detailLevel: 1\n                });\n            } catch (error) {\n                console.warn(\"\\uD83C\\uDF0D [PLANET] Failed to preload \".concat(planetClass, \":\"), error);\n            }\n        }\n        console.log(\"🌍 [PLANET] Preloading complete\");\n    }\n    constructor(){\n        this.isDisposed = false;\n        this.renderCache = new Map();\n        this.lastRenderTime = 0;\n    // Initialize renderer\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/shared/procgen/planet/planet-renderer.ts\n"));

/***/ })

}]);